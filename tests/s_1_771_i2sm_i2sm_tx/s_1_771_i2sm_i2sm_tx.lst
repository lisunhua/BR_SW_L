
.//s_1_771_i2sm_i2sm_tx.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20010000 	.word	0x20010000
       4:	00000201 	.word	0x00000201
       8:	00000249 	.word	0x00000249
       c:	0000024b 	.word	0x0000024b
      10:	0000024d 	.word	0x0000024d
      14:	0000024f 	.word	0x0000024f
      18:	00000251 	.word	0x00000251
	...
      2c:	00000253 	.word	0x00000253
      30:	00000255 	.word	0x00000255
      34:	00000000 	.word	0x00000000
      38:	00000257 	.word	0x00000257
      3c:	00001849 	.word	0x00001849
      40:	0000025b 	.word	0x0000025b
      44:	0000025d 	.word	0x0000025d
      48:	0000025f 	.word	0x0000025f
      4c:	00000261 	.word	0x00000261
      50:	00000263 	.word	0x00000263
      54:	00000265 	.word	0x00000265
      58:	00000267 	.word	0x00000267
      5c:	00000269 	.word	0x00000269
      60:	00001c71 	.word	0x00001c71
      64:	0000026d 	.word	0x0000026d
      68:	0000026f 	.word	0x0000026f
      6c:	00000271 	.word	0x00000271
      70:	00000273 	.word	0x00000273
      74:	00000275 	.word	0x00000275
      78:	00000277 	.word	0x00000277
      7c:	00000279 	.word	0x00000279
      80:	0000027b 	.word	0x0000027b
      84:	0000027d 	.word	0x0000027d
      88:	0000027f 	.word	0x0000027f
      8c:	00000281 	.word	0x00000281
      90:	00000283 	.word	0x00000283
      94:	00000285 	.word	0x00000285
      98:	00000287 	.word	0x00000287
      9c:	00000289 	.word	0x00000289
      a0:	0000028b 	.word	0x0000028b
      a4:	0000028d 	.word	0x0000028d
      a8:	0000028f 	.word	0x0000028f
      ac:	00000291 	.word	0x00000291
      b0:	00000293 	.word	0x00000293
      b4:	00000295 	.word	0x00000295
      b8:	00000297 	.word	0x00000297
      bc:	00000299 	.word	0x00000299
      c0:	0000029b 	.word	0x0000029b
      c4:	0000029d 	.word	0x0000029d
      c8:	0000029f 	.word	0x0000029f
      cc:	000002a1 	.word	0x000002a1
      d0:	000002a3 	.word	0x000002a3
      d4:	000002a5 	.word	0x000002a5
      d8:	000002a7 	.word	0x000002a7
      dc:	000002a9 	.word	0x000002a9
      e0:	000002ab 	.word	0x000002ab
      e4:	000002ad 	.word	0x000002ad
      e8:	000002af 	.word	0x000002af
      ec:	000002b1 	.word	0x000002b1
      f0:	000002b3 	.word	0x000002b3
      f4:	000002b5 	.word	0x000002b5
      f8:	000002b7 	.word	0x000002b7
      fc:	000002b9 	.word	0x000002b9
     100:	000002bb 	.word	0x000002bb
     104:	000002bd 	.word	0x000002bd
     108:	000002bf 	.word	0x000002bf
     10c:	000002c1 	.word	0x000002c1
     110:	000002c3 	.word	0x000002c3
     114:	000002c5 	.word	0x000002c5
     118:	000002c7 	.word	0x000002c7
     11c:	000002c9 	.word	0x000002c9
     120:	000002cb 	.word	0x000002cb
     124:	000002cd 	.word	0x000002cd
     128:	000002cf 	.word	0x000002cf
     12c:	000002d1 	.word	0x000002d1
     130:	000002d3 	.word	0x000002d3
     134:	000002d5 	.word	0x000002d5
     138:	000002d7 	.word	0x000002d7

0000013c <boot_flag>:
     13c:	52554e58 	.word	0x52554e58

00000140 <program_size>:
     140:	00000000 	.word	0x00000000

00000144 <ram_addr>:
     144:	00000000 	.word	0x00000000

00000148 <copy_unit_size>:
     148:	00000000 	.word	0x00000000

0000014c <cpu_clk_type>:
     14c:	03d09000 	.word	0x03d09000

00000150 <qspi_clk_type>:
     150:	03d09000 	.word	0x03d09000

00000154 <cache_cfg>:
     154:	00000061 	.word	0x00000061

00000158 <clock_divider>:
     158:	00000002 	.word	0x00000002

0000015c <frame_format_size>:
     15c:	0000001f 	.word	0x0000001f

00000160 <ssi_frame_format>:
     160:	00000000 	.word	0x00000000

00000164 <clock_phase>:
     164:	00000000 	.word	0x00000000

00000168 <clock_polarity>:
     168:	00000000 	.word	0x00000000

0000016c <transfer_mode>:
     16c:	00000003 	.word	0x00000003

00000170 <slave_output_enable>:
     170:	00000000 	.word	0x00000000

00000174 <operation_mode>:
     174:	00000000 	.word	0x00000000

00000178 <slave_select_toggle_en>:
     178:	00000000 	.word	0x00000000

0000017c <control_farme_size>:
     17c:	00000000 	.word	0x00000000

00000180 <spi_frame_format>:
     180:	00000001 	.word	0x00000001

00000184 <spi_hyperbus_en>:
     184:	00000000 	.word	0x00000000

00000188 <data_frames_number>:
     188:	00000000 	.word	0x00000000

0000018c <slaves_select>:
     18c:	00000001 	.word	0x00000001

00000190 <tx_fifo_threshold_level>:
     190:	00000000 	.word	0x00000000

00000194 <tx_fifo_start_fifo_level>:
     194:	00000000 	.word	0x00000000

00000198 <rx_fifo_threshold_level>:
     198:	00000000 	.word	0x00000000

0000019c <dma_rx_data_level>:
     19c:	00000000 	.word	0x00000000

000001a0 <dma_tx_data_level>:
     1a0:	00000000 	.word	0x00000000

000001a4 <unmask_interrupt>:
     1a4:	00000000 	.word	0x00000000

000001a8 <xip_spi_frame_format>:
     1a8:	00000001 	.word	0x00000001

000001ac <transfer_type>:
     1ac:	00000000 	.word	0x00000000

000001b0 <address_length>:
     1b0:	00000006 	.word	0x00000006

000001b4 <instruction_length>:
     1b4:	00000002 	.word	0x00000002

000001b8 <xip_mode_bit_en>:
     1b8:	00000000 	.word	0x00000000

000001bc <wait_cycles>:
     1bc:	00000008 	.word	0x00000008

000001c0 <xip_dfs_hsize_hburst_en>:
     1c0:	00000000 	.word	0x00000000

000001c4 <xip_spi_ddr_en>:
     1c4:	00000000 	.word	0x00000000

000001c8 <instruction_ddr_enable>:
     1c8:	00000000 	.word	0x00000000

000001cc <read_data_strobe_enable>:
     1cc:	00000000 	.word	0x00000000

000001d0 <xip_instruction_enable>:
     1d0:	00000001 	.word	0x00000001

000001d4 <xip_continuous_transfer_enable>:
     1d4:	00000000 	.word	0x00000000

000001d8 <xip_spi_hyerbus_format_enable>:
     1d8:	00000000 	.word	0x00000000

000001dc <xip_rxds_signaling_enable>:
     1dc:	00000000 	.word	0x00000000

000001e0 <xip_mode_bit_length>:
     1e0:	00000000 	.word	0x00000000

000001e4 <xip_pre_fetch_enable>:
     1e4:	00000000 	.word	0x00000000

000001e8 <xip_inst_transfer_opcode>:
     1e8:	0000003b 	.word	0x0000003b

000001ec <xip_wrap_transfer_opcode>:
     1ec:	00000000 	.word	0x00000000

000001f0 <slaves_enbale_mask>:
     1f0:	00000001 	.word	0x00000001

000001f4 <spi_clk_stretch_en>:
     1f4:	00000000 	.word	0x00000000

000001f8 <spi_data_mask_en>:
     1f8:	00000000 	.word	0x00000000

000001fc <xip_time_out>:
     1fc:	00000032 	.word	0x00000032

00000200 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     200:	490b      	ldr	r1, [pc, #44]	; (230 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     202:	4a0c      	ldr	r2, [pc, #48]	; (234 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     204:	4b0c      	ldr	r3, [pc, #48]	; (238 <Reset_Handler+0x38>)

    subs    r3, r2
     206:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     208:	dd03      	ble.n	212 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     20a:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     20c:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     20e:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     210:	dcfb      	bgt.n	20a <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     212:	490a      	ldr	r1, [pc, #40]	; (23c <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     214:	4a0a      	ldr	r2, [pc, #40]	; (240 <Reset_Handler+0x40>)

    movs    r0, 0
     216:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     218:	4291      	cmp	r1, r2
    itt    lt
     21a:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     21c:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     220:	e7fa      	blt.n	218 <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     222:	4808      	ldr	r0, [pc, #32]	; (244 <Reset_Handler+0x44>)
    blx     r0
     224:	4780      	blx	r0
#endif

    bl    main
     226:	f001 fc8d 	bl	1b44 <main>
    bl    exit
     22a:	f001 fd85 	bl	1d38 <exit>
     22e:	0000      	.short	0x0000
    ldr    r1, =__etext
     230:	00002717 	.word	0x00002717
    ldr    r2, =__data_start__
     234:	20008000 	.word	0x20008000
    ldr    r3, =__data_end__
     238:	2000806c 	.word	0x2000806c
    ldr r1, =__bss_start__
     23c:	2000806c 	.word	0x2000806c
    ldr r2, =__bss_end__
     240:	2000829c 	.word	0x2000829c
    ldr     r0,=SystemInit
     244:	000002f5 	.word	0x000002f5

00000248 <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     248:	e7fe      	b.n	248 <NMI_Handler>

0000024a <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     24a:	e7fe      	b.n	24a <HardFault_Handler>

0000024c <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     24c:	e7fe      	b.n	24c <MemManage_Handler>

0000024e <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     24e:	e7fe      	b.n	24e <BusFault_Handler>

00000250 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     250:	e7fe      	b.n	250 <UsageFault_Handler>

00000252 <SVC_Handler>:
    def_default_handler    SVC_Handler
     252:	e7fe      	b.n	252 <SVC_Handler>

00000254 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     254:	e7fe      	b.n	254 <DebugMon_Handler>

00000256 <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     256:	e7fe      	b.n	256 <PendSV_Handler>
    def_default_handler    SysTick_Handler
     258:	e7fe      	b.n	258 <PendSV_Handler+0x2>

0000025a <UART0_IRQHandler>:

/* IRQ Handlers */

    def_default_handler     UART0_IRQHandler 
     25a:	e7fe      	b.n	25a <UART0_IRQHandler>

0000025c <UART1_IRQHandler>:
    def_default_handler     UART1_IRQHandler        
     25c:	e7fe      	b.n	25c <UART1_IRQHandler>

0000025e <DMA_IRQHandler>:
    def_default_handler     DMA_IRQHandler          
     25e:	e7fe      	b.n	25e <DMA_IRQHandler>

00000260 <SPIM0_IRQHandler>:
    def_default_handler     SPIM0_IRQHandler        
     260:	e7fe      	b.n	260 <SPIM0_IRQHandler>

00000262 <SPIM1_IRQHandler>:
    def_default_handler     SPIM1_IRQHandler        
     262:	e7fe      	b.n	262 <SPIM1_IRQHandler>

00000264 <SPIS1_IRQHandler>:
    def_default_handler     SPIS1_IRQHandler        
     264:	e7fe      	b.n	264 <SPIS1_IRQHandler>

00000266 <I2C0_IRQHandler>:
    def_default_handler     I2C0_IRQHandler         
     266:	e7fe      	b.n	266 <I2C0_IRQHandler>

00000268 <I2C1_IRQHandler>:
    def_default_handler     I2C1_IRQHandler         
     268:	e7fe      	b.n	268 <I2C1_IRQHandler>
    def_default_handler     I2SM_IRQHandler         
     26a:	e7fe      	b.n	26a <I2C1_IRQHandler+0x2>

0000026c <I2SS_IRQHandler>:
    def_default_handler     I2SS_IRQHandler         
     26c:	e7fe      	b.n	26c <I2SS_IRQHandler>

0000026e <RTC_IRQHandler>:
    def_default_handler     RTC_IRQHandler          
     26e:	e7fe      	b.n	26e <RTC_IRQHandler>

00000270 <QDEC_IRQHandler>:
    def_default_handler     QDEC_IRQHandler         
     270:	e7fe      	b.n	270 <QDEC_IRQHandler>

00000272 <TIMER0_IRQHandler>:
    def_default_handler     TIMER0_IRQHandler       
     272:	e7fe      	b.n	272 <TIMER0_IRQHandler>

00000274 <TIMER1_IRQHandler>:
    def_default_handler     TIMER1_IRQHandler       
     274:	e7fe      	b.n	274 <TIMER1_IRQHandler>

00000276 <TIMER2_IRQHandler>:
    def_default_handler     TIMER2_IRQHandler       
     276:	e7fe      	b.n	276 <TIMER2_IRQHandler>

00000278 <TIMER3_IRQHandler>:
    def_default_handler     TIMER3_IRQHandler       
     278:	e7fe      	b.n	278 <TIMER3_IRQHandler>

0000027a <TIMER4_IRQHandler>:
    def_default_handler     TIMER4_IRQHandler       
     27a:	e7fe      	b.n	27a <TIMER4_IRQHandler>

0000027c <TIMER5_IRQHandler>:
    def_default_handler     TIMER5_IRQHandler       
     27c:	e7fe      	b.n	27c <TIMER5_IRQHandler>

0000027e <TIMER6_IRQHandler>:
    def_default_handler     TIMER6_IRQHandler       
     27e:	e7fe      	b.n	27e <TIMER6_IRQHandler>

00000280 <TIMER7_IRQHandler>:
    def_default_handler     TIMER7_IRQHandler       
     280:	e7fe      	b.n	280 <TIMER7_IRQHandler>

00000282 <GPIO0_IRQHandler>:
    def_default_handler     GPIO0_IRQHandler        
     282:	e7fe      	b.n	282 <GPIO0_IRQHandler>

00000284 <GPIO1_IRQHandler>:
    def_default_handler     GPIO1_IRQHandler        
     284:	e7fe      	b.n	284 <GPIO1_IRQHandler>

00000286 <GPIO2_IRQHandler>:
    def_default_handler     GPIO2_IRQHandler        
     286:	e7fe      	b.n	286 <GPIO2_IRQHandler>

00000288 <GPIO3_IRQHandler>:
    def_default_handler     GPIO3_IRQHandler        
     288:	e7fe      	b.n	288 <GPIO3_IRQHandler>

0000028a <GPIO4_IRQHandler>:
    def_default_handler     GPIO4_IRQHandler        
     28a:	e7fe      	b.n	28a <GPIO4_IRQHandler>

0000028c <GPIO5_IRQHandler>:
    def_default_handler     GPIO5_IRQHandler        
     28c:	e7fe      	b.n	28c <GPIO5_IRQHandler>

0000028e <GPIO6_IRQHandler>:
    def_default_handler     GPIO6_IRQHandler        
     28e:	e7fe      	b.n	28e <GPIO6_IRQHandler>

00000290 <GPIO7_IRQHandler>:
    def_default_handler     GPIO7_IRQHandler        
     290:	e7fe      	b.n	290 <GPIO7_IRQHandler>

00000292 <GPIO8_IRQHandler>:
    def_default_handler     GPIO8_IRQHandler        
     292:	e7fe      	b.n	292 <GPIO8_IRQHandler>

00000294 <GPIO9_IRQHandler>:
    def_default_handler     GPIO9_IRQHandler        
     294:	e7fe      	b.n	294 <GPIO9_IRQHandler>

00000296 <GPIO10_IRQHandler>:
    def_default_handler     GPIO10_IRQHandler        
     296:	e7fe      	b.n	296 <GPIO10_IRQHandler>

00000298 <GPIO11_IRQHandler>:
    def_default_handler     GPIO11_IRQHandler       
     298:	e7fe      	b.n	298 <GPIO11_IRQHandler>

0000029a <GPIO12_IRQHandler>:
    def_default_handler     GPIO12_IRQHandler       
     29a:	e7fe      	b.n	29a <GPIO12_IRQHandler>

0000029c <GPIO13_IRQHandler>:
    def_default_handler     GPIO13_IRQHandler       
     29c:	e7fe      	b.n	29c <GPIO13_IRQHandler>

0000029e <GPIO14_IRQHandler>:
    def_default_handler     GPIO14_IRQHandler       
     29e:	e7fe      	b.n	29e <GPIO14_IRQHandler>

000002a0 <GPIO15_IRQHandler>:
    def_default_handler     GPIO15_IRQHandler       
     2a0:	e7fe      	b.n	2a0 <GPIO15_IRQHandler>

000002a2 <GPIO16_IRQHandler>:
    def_default_handler     GPIO16_IRQHandler       
     2a2:	e7fe      	b.n	2a2 <GPIO16_IRQHandler>

000002a4 <GPIO17_IRQHandler>:
    def_default_handler     GPIO17_IRQHandler       
     2a4:	e7fe      	b.n	2a4 <GPIO17_IRQHandler>

000002a6 <GPIO18_IRQHandler>:
    def_default_handler     GPIO18_IRQHandler       
     2a6:	e7fe      	b.n	2a6 <GPIO18_IRQHandler>

000002a8 <GPIO19_IRQHandler>:
    def_default_handler     GPIO19_IRQHandler       
     2a8:	e7fe      	b.n	2a8 <GPIO19_IRQHandler>

000002aa <GPIO20_IRQHandler>:
    def_default_handler     GPIO20_IRQHandler       
     2aa:	e7fe      	b.n	2aa <GPIO20_IRQHandler>

000002ac <GPIO21_IRQHandler>:
    def_default_handler     GPIO21_IRQHandler       
     2ac:	e7fe      	b.n	2ac <GPIO21_IRQHandler>

000002ae <GPIO22_IRQHandler>:
    def_default_handler     GPIO22_IRQHandler       
     2ae:	e7fe      	b.n	2ae <GPIO22_IRQHandler>

000002b0 <GPIO23_IRQHandler>:
    def_default_handler     GPIO23_IRQHandler       
     2b0:	e7fe      	b.n	2b0 <GPIO23_IRQHandler>

000002b2 <GPIO24_IRQHandler>:
    def_default_handler     GPIO24_IRQHandler       
     2b2:	e7fe      	b.n	2b2 <GPIO24_IRQHandler>

000002b4 <GPIO25_IRQHandler>:
    def_default_handler     GPIO25_IRQHandler       
     2b4:	e7fe      	b.n	2b4 <GPIO25_IRQHandler>

000002b6 <GPIO26_IRQHandler>:
    def_default_handler     GPIO26_IRQHandler       
     2b6:	e7fe      	b.n	2b6 <GPIO26_IRQHandler>

000002b8 <GPIO27_IRQHandler>:
    def_default_handler     GPIO27_IRQHandler       
     2b8:	e7fe      	b.n	2b8 <GPIO27_IRQHandler>

000002ba <GPIO28_IRQHandler>:
    def_default_handler     GPIO28_IRQHandler       
     2ba:	e7fe      	b.n	2ba <GPIO28_IRQHandler>

000002bc <GPIO29_IRQHandler>:
    def_default_handler     GPIO29_IRQHandler       
     2bc:	e7fe      	b.n	2bc <GPIO29_IRQHandler>

000002be <GPIO30_IRQHandler>:
    def_default_handler     GPIO30_IRQHandler       
     2be:	e7fe      	b.n	2be <GPIO30_IRQHandler>

000002c0 <GPIO31_IRQHandler>:
    def_default_handler     GPIO31_IRQHandler       
     2c0:	e7fe      	b.n	2c0 <GPIO31_IRQHandler>

000002c2 <rwbt_isr>:
    def_default_handler     rwbt_isr   			   
     2c2:	e7fe      	b.n	2c2 <rwbt_isr>

000002c4 <rwble_isr>:
    def_default_handler     rwble_isr   			   
     2c4:	e7fe      	b.n	2c4 <rwble_isr>

000002c6 <rwip_isr>:
    def_default_handler     rwip_isr				   
     2c6:	e7fe      	b.n	2c6 <rwip_isr>

000002c8 <pcm_isr>:
    def_default_handler     pcm_isr				   
     2c8:	e7fe      	b.n	2c8 <pcm_isr>

000002ca <apb2dpv_isr>:
    def_default_handler     apb2dpv_isr			   
     2ca:	e7fe      	b.n	2ca <apb2dpv_isr>

000002cc <bboscen_isr>:
    def_default_handler     bboscen_isr			   
     2cc:	e7fe      	b.n	2cc <bboscen_isr>

000002ce <RF_IRQHandler>:
    def_default_handler     RF_IRQHandler           
     2ce:	e7fe      	b.n	2ce <RF_IRQHandler>

000002d0 <USBSRT_IRQHandler>:
    def_default_handler     USBSRT_IRQHandler       
     2d0:	e7fe      	b.n	2d0 <USBSRT_IRQHandler>

000002d2 <USBSTO_IRQHandler>:
    def_default_handler     USBSTO_IRQHandler	   
     2d2:	e7fe      	b.n	2d2 <USBSTO_IRQHandler>

000002d4 <USB_IRQHandler>:
    def_default_handler     USB_IRQHandler          
     2d4:	e7fe      	b.n	2d4 <USB_IRQHandler>

000002d6 <info_init_get>:
    def_default_handler     info_init_get           
     2d6:	e7fe      	b.n	2d6 <info_init_get>

000002d8 <SystemCoreClockUpdate>:
  System Core Clock Variable
 *----------------------------------------------------------------------------*/
unsigned long int SystemCoreClock = SYSTEM_CLOCK;  /* System Core Clock Frequency      */

void SystemCoreClockUpdate(unsigned long int clock)
{
     2d8:	b480      	push	{r7}
     2da:	b083      	sub	sp, #12
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
    SystemCoreClock = clock;
     2e0:	4a03      	ldr	r2, [pc, #12]	; (2f0 <SystemCoreClockUpdate+0x18>)
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	6013      	str	r3, [r2, #0]
}
     2e6:	bf00      	nop
     2e8:	370c      	adds	r7, #12
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	20008000 	.word	0x20008000

000002f4 <SystemInit>:

void SystemInit (void)
{
     2f4:	b480      	push	{r7}
     2f6:	af00      	add	r7, sp, #0
    SystemCoreClock = SYSTEM_CLOCK;
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <SystemInit+0x14>)
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <SystemInit+0x18>)
     2fc:	601a      	str	r2, [r3, #0]
}
     2fe:	bf00      	nop
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20008000 	.word	0x20008000
     30c:	016e3600 	.word	0x016e3600

00000310 <SystemDevClockCtl>:

void SystemDevClockCtl(CKEnId_Type id, uint8_t enable)
{
     310:	b480      	push	{r7}
     312:	b083      	sub	sp, #12
     314:	af00      	add	r7, sp, #0
     316:	4603      	mov	r3, r0
     318:	460a      	mov	r2, r1
     31a:	71fb      	strb	r3, [r7, #7]
     31c:	4613      	mov	r3, r2
     31e:	71bb      	strb	r3, [r7, #6]
   if (enable) {
     320:	79bb      	ldrb	r3, [r7, #6]
     322:	2b00      	cmp	r3, #0
     324:	d00b      	beq.n	33e <SystemDevClockCtl+0x2e>
       SCU->CLK_EN |= 0x01ul << id;
     326:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	79fb      	ldrb	r3, [r7, #7]
     32e:	2101      	movs	r1, #1
     330:	fa01 f303 	lsl.w	r3, r1, r3
     334:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     338:	4313      	orrs	r3, r2
     33a:	600b      	str	r3, [r1, #0]
   }
   else {
       SCU->CLK_EN &= ~(0x01ul << id);
   }
}
     33c:	e00b      	b.n	356 <SystemDevClockCtl+0x46>
       SCU->CLK_EN &= ~(0x01ul << id);
     33e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     342:	681a      	ldr	r2, [r3, #0]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	2101      	movs	r1, #1
     348:	fa01 f303 	lsl.w	r3, r1, r3
     34c:	43db      	mvns	r3, r3
     34e:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     352:	4013      	ands	r3, r2
     354:	600b      	str	r3, [r1, #0]
}
     356:	bf00      	nop
     358:	370c      	adds	r7, #12
     35a:	46bd      	mov	sp, r7
     35c:	bc80      	pop	{r7}
     35e:	4770      	bx	lr

00000360 <SystemDevRstCtl>:

void SystemDevRstCtl(SwRstId_Type id)
{
     360:	b480      	push	{r7}
     362:	b083      	sub	sp, #12
     364:	af00      	add	r7, sp, #0
     366:	4603      	mov	r3, r0
     368:	71fb      	strb	r3, [r7, #7]
    SCU->SW_RST = 1 << id;
     36a:	79fb      	ldrb	r3, [r7, #7]
     36c:	2201      	movs	r2, #1
     36e:	409a      	lsls	r2, r3
     370:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     374:	605a      	str	r2, [r3, #4]
    /* The SoC need us set it to zero when reset request is triggered! */
    SCU->SW_RST = 0 << id;
     376:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     37a:	2200      	movs	r2, #0
     37c:	605a      	str	r2, [r3, #4]
}
     37e:	bf00      	nop
     380:	370c      	adds	r7, #12
     382:	46bd      	mov	sp, r7
     384:	bc80      	pop	{r7}
     386:	4770      	bx	lr

00000388 <SystemPADConfig>:

void SystemPADConfig(PADId_Type pad_id, PADConfig_Type *config)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	4603      	mov	r3, r0
     390:	6039      	str	r1, [r7, #0]
     392:	71fb      	strb	r3, [r7, #7]
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     394:	683b      	ldr	r3, [r7, #0]
     396:	781b      	ldrb	r3, [r3, #0]
     398:	f3c3 0300 	ubfx	r3, r3, #0, #1
     39c:	b2db      	uxtb	r3, r3
     39e:	f003 0201 	and.w	r2, r3, #1
                            (config->ie     &0x01) << 1 | 
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
     3aa:	b2db      	uxtb	r3, r3
     3ac:	005b      	lsls	r3, r3, #1
     3ae:	f003 0302 	and.w	r3, r3, #2
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3b2:	431a      	orrs	r2, r3
                            (config->oen    &0x01) << 2 | 
     3b4:	683b      	ldr	r3, [r7, #0]
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
     3bc:	b2db      	uxtb	r3, r3
     3be:	009b      	lsls	r3, r3, #2
     3c0:	f003 0304 	and.w	r3, r3, #4
                            (config->ie     &0x01) << 1 | 
     3c4:	431a      	orrs	r2, r3
                            (config->ren    &0x01) << 3 | 
     3c6:	683b      	ldr	r3, [r7, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     3ce:	b2db      	uxtb	r3, r3
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0308 	and.w	r3, r3, #8
                            (config->oen    &0x01) << 2 | 
     3d6:	431a      	orrs	r2, r3
                            (config->pad_ctl&0x07) << 4 );
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
     3e0:	b2db      	uxtb	r3, r3
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
                            (config->ren    &0x01) << 3 | 
     3e8:	ea42 0103 	orr.w	r1, r2, r3
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3ec:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	331c      	adds	r3, #28
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	4413      	add	r3, r2
     3f8:	6059      	str	r1, [r3, #4]
}
     3fa:	bf00      	nop
     3fc:	370c      	adds	r7, #12
     3fe:	46bd      	mov	sp, r7
     400:	bc80      	pop	{r7}
     402:	4770      	bx	lr

00000404 <SystemIOConfigQspi>:


void SystemIOConfigQspi(IOConfig_Type *config)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
    uint32_t cfg = SCU->IO_CONFIG ;
     40c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     412:	60fb      	str	r3, [r7, #12]
    cfg  &=~(0x07ul<<8|0x07ul<<11|0x07ul<<14|0x07ul<<17);
     414:	68fb      	ldr	r3, [r7, #12]
     416:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
     41a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
     41e:	60fb      	str	r3, [r7, #12]
    cfg  |= (	(config->d0&0x07) << 8  | 
     420:	687b      	ldr	r3, [r7, #4]
     422:	781b      	ldrb	r3, [r3, #0]
     424:	f3c3 0302 	ubfx	r3, r3, #0, #3
     428:	b2db      	uxtb	r3, r3
     42a:	021b      	lsls	r3, r3, #8
     42c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
                (config->d1&0x07) << 11 | 
     430:	687b      	ldr	r3, [r7, #4]
     432:	781b      	ldrb	r3, [r3, #0]
     434:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     438:	b2db      	uxtb	r3, r3
     43a:	02db      	lsls	r3, r3, #11
     43c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    cfg  |= (	(config->d0&0x07) << 8  | 
     440:	431a      	orrs	r2, r3
                (config->d2&0x07) << 14 | 
     442:	687b      	ldr	r3, [r7, #4]
     444:	881b      	ldrh	r3, [r3, #0]
     446:	f3c3 1382 	ubfx	r3, r3, #6, #3
     44a:	b2db      	uxtb	r3, r3
     44c:	039b      	lsls	r3, r3, #14
     44e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
                (config->d1&0x07) << 11 | 
     452:	431a      	orrs	r2, r3
                (config->d3&0x07) << 17 );	
     454:	687b      	ldr	r3, [r7, #4]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	f3c3 0342 	ubfx	r3, r3, #1, #3
     45c:	b2db      	uxtb	r3, r3
     45e:	045b      	lsls	r3, r3, #17
     460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
                (config->d2&0x07) << 14 | 
     464:	4313      	orrs	r3, r2
     466:	461a      	mov	r2, r3
    cfg  |= (	(config->d0&0x07) << 8  | 
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	4313      	orrs	r3, r2
     46c:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     46e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     472:	68fb      	ldr	r3, [r7, #12]
     474:	6293      	str	r3, [r2, #40]	; 0x28
}
     476:	bf00      	nop
     478:	3714      	adds	r7, #20
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <SystemIOConfigQspiOne>:


void SystemIOConfigQspiOne(uint32_t config,PadIoConfig_Type io)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	460b      	mov	r3, r1
     48a:	70fb      	strb	r3, [r7, #3]
    uint32_t cfg = SCU->IO_CONFIG ;
     48c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     492:	60fb      	str	r3, [r7, #12]
    if(io>3 || config >5)
     494:	78fb      	ldrb	r3, [r7, #3]
     496:	2b03      	cmp	r3, #3
     498:	d820      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2b05      	cmp	r3, #5
     49e:	d81d      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
        return ;
        
    cfg &=~(0x7ul<<(8 + 3*io));
     4a0:	78fa      	ldrb	r2, [r7, #3]
     4a2:	4613      	mov	r3, r2
     4a4:	005b      	lsls	r3, r3, #1
     4a6:	4413      	add	r3, r2
     4a8:	3308      	adds	r3, #8
     4aa:	2207      	movs	r2, #7
     4ac:	fa02 f303 	lsl.w	r3, r2, r3
     4b0:	43db      	mvns	r3, r3
     4b2:	68fa      	ldr	r2, [r7, #12]
     4b4:	4013      	ands	r3, r2
     4b6:	60fb      	str	r3, [r7, #12]
    cfg  |= ((config&0x07) << (8 + 3*io));	
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	f003 0107 	and.w	r1, r3, #7
     4be:	78fa      	ldrb	r2, [r7, #3]
     4c0:	4613      	mov	r3, r2
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	4413      	add	r3, r2
     4c6:	3308      	adds	r3, #8
     4c8:	fa01 f303 	lsl.w	r3, r1, r3
     4cc:	68fa      	ldr	r2, [r7, #12]
     4ce:	4313      	orrs	r3, r2
     4d0:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     4d2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     4d6:	68fb      	ldr	r3, [r7, #12]
     4d8:	6293      	str	r3, [r2, #40]	; 0x28
     4da:	e000      	b.n	4de <SystemIOConfigQspiOne+0x5e>
        return ;
     4dc:	bf00      	nop
}
     4de:	3714      	adds	r7, #20
     4e0:	46bd      	mov	sp, r7
     4e2:	bc80      	pop	{r7}
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop

000004e8 <cm_printf>:
//    return ch;
//}


int cm_printf(const char *fmt, ...)
{
     4e8:	b40f      	push	{r0, r1, r2, r3}
     4ea:	b580      	push	{r7, lr}
     4ec:	b082      	sub	sp, #8
     4ee:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
     4f0:	f107 0314 	add.w	r3, r7, #20
     4f4:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
     4f6:	683a      	ldr	r2, [r7, #0]
     4f8:	6939      	ldr	r1, [r7, #16]
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <cm_printf+0x38>)
     4fc:	f001 fc5c 	bl	1db8 <vsiprintf>
     500:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_tmp_buf, r);
     502:	687b      	ldr	r3, [r7, #4]
     504:	b29b      	uxth	r3, r3
     506:	461a      	mov	r2, r3
     508:	4905      	ldr	r1, [pc, #20]	; (520 <cm_printf+0x38>)
     50a:	4806      	ldr	r0, [pc, #24]	; (524 <cm_printf+0x3c>)
     50c:	f000 f986 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
     510:	687b      	ldr	r3, [r7, #4]
}
     512:	4618      	mov	r0, r3
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     51c:	b004      	add	sp, #16
     51e:	4770      	bx	lr
     520:	2000806c 	.word	0x2000806c
     524:	90002000 	.word	0x90002000

00000528 <at_eventInd>:

int at_eventInd(const char *fmt, ...)
{
     528:	b40f      	push	{r0, r1, r2, r3}
     52a:	b580      	push	{r7, lr}
     52c:	b082      	sub	sp, #8
     52e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     530:	f107 0314 	add.w	r3, r7, #20
     534:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     536:	683a      	ldr	r2, [r7, #0]
     538:	6939      	ldr	r1, [r7, #16]
     53a:	4809      	ldr	r0, [pc, #36]	; (560 <at_eventInd+0x38>)
     53c:	f001 fc3c 	bl	1db8 <vsiprintf>
     540:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_dbg_tmp_buf, r);
     542:	687b      	ldr	r3, [r7, #4]
     544:	b29b      	uxth	r3, r3
     546:	461a      	mov	r2, r3
     548:	4905      	ldr	r1, [pc, #20]	; (560 <at_eventInd+0x38>)
     54a:	4806      	ldr	r0, [pc, #24]	; (564 <at_eventInd+0x3c>)
     54c:	f000 f966 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     550:	687b      	ldr	r3, [r7, #4]
}
     552:	4618      	mov	r0, r3
     554:	3708      	adds	r7, #8
     556:	46bd      	mov	sp, r7
     558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     55c:	b004      	add	sp, #16
     55e:	4770      	bx	lr
     560:	200080ec 	.word	0x200080ec
     564:	90002000 	.word	0x90002000

00000568 <cm_printf_Uart1>:

int cm_printf_Uart1(const char *fmt, ...)
{
     568:	b40f      	push	{r0, r1, r2, r3}
     56a:	b580      	push	{r7, lr}
     56c:	b082      	sub	sp, #8
     56e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     570:	f107 0314 	add.w	r3, r7, #20
     574:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     576:	683a      	ldr	r2, [r7, #0]
     578:	6939      	ldr	r1, [r7, #16]
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <cm_printf_Uart1+0x38>)
     57c:	f001 fc1c 	bl	1db8 <vsiprintf>
     580:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART1, s_dbg_tmp_buf, r);
     582:	687b      	ldr	r3, [r7, #4]
     584:	b29b      	uxth	r3, r3
     586:	461a      	mov	r2, r3
     588:	4905      	ldr	r1, [pc, #20]	; (5a0 <cm_printf_Uart1+0x38>)
     58a:	4806      	ldr	r0, [pc, #24]	; (5a4 <cm_printf_Uart1+0x3c>)
     58c:	f000 f946 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     590:	687b      	ldr	r3, [r7, #4]
}
     592:	4618      	mov	r0, r3
     594:	3708      	adds	r7, #8
     596:	46bd      	mov	sp, r7
     598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     59c:	b004      	add	sp, #16
     59e:	4770      	bx	lr
     5a0:	2000816c 	.word	0x2000816c
     5a4:	90002800 	.word	0x90002800

000005a8 <UART_DeInit>:

UART_write_handle  UWrite_handle;


void UART_DeInit(UART_TypeDef *UARTx)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
    #if  defined(BR002)||defined(BR003)
    if (UARTx == UART0) {
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	4a0c      	ldr	r2, [pc, #48]	; (5e4 <UART_DeInit+0x3c>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d108      	bne.n	5ca <UART_DeInit+0x22>
        SystemDevRstCtl(UART0_SwRst);
     5b8:	2004      	movs	r0, #4
     5ba:	f7ff fed1 	bl	360 <SystemDevRstCtl>
        memset(UART0,0,sizeof(UART_TypeDef));
     5be:	22d0      	movs	r2, #208	; 0xd0
     5c0:	2100      	movs	r1, #0
     5c2:	4808      	ldr	r0, [pc, #32]	; (5e4 <UART_DeInit+0x3c>)
     5c4:	f001 fbda 	bl	1d7c <memset>
    else {
        SystemDevRstCtl(UART1_PCLK_SwRst);
        memset(UART1,0,sizeof(UART_TypeDef));
    }
    #endif
}
     5c8:	e007      	b.n	5da <UART_DeInit+0x32>
        SystemDevRstCtl(UART1_SwRst);
     5ca:	2005      	movs	r0, #5
     5cc:	f7ff fec8 	bl	360 <SystemDevRstCtl>
        memset(UART1,0,sizeof(UART_TypeDef));
     5d0:	22d0      	movs	r2, #208	; 0xd0
     5d2:	2100      	movs	r1, #0
     5d4:	4804      	ldr	r0, [pc, #16]	; (5e8 <UART_DeInit+0x40>)
     5d6:	f001 fbd1 	bl	1d7c <memset>
}
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bd80      	pop	{r7, pc}
     5e2:	bf00      	nop
     5e4:	90002000 	.word	0x90002000
     5e8:	90002800 	.word	0x90002800

000005ec <UART_Init>:

void UART_Init(UART_TypeDef *UARTx, UART_InitInfo_Type *UART_InitStruct)
{
     5ec:	b480      	push	{r7}
     5ee:	b085      	sub	sp, #20
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
     5f4:	6039      	str	r1, [r7, #0]
    uint32_t BR_div;
    uint32_t fcr_cfg = 0;
     5f6:	2300      	movs	r3, #0
     5f8:	60fb      	str	r3, [r7, #12]
    
    if (UARTx->USR & 0x01) {
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     5fe:	f003 0301 	and.w	r3, r3, #1
     602:	2b00      	cmp	r3, #0
     604:	f040 80dc 	bne.w	7c0 <UART_Init+0x1d4>
        //UART is busy now, we can init it!
        return;
    }
    UARTx->IER &= ~(0xFF);
     608:	687b      	ldr	r3, [r7, #4]
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     610:	687b      	ldr	r3, [r7, #4]
     612:	605a      	str	r2, [r3, #4]
    UARTx->LCR |= 0x01 << 7; //Enable the DLL/DLH to writable
     614:	687b      	ldr	r3, [r7, #4]
     616:	68db      	ldr	r3, [r3, #12]
     618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	60da      	str	r2, [r3, #12]
    BR_div = (SystemCoreClock/UART_InitStruct->UART_BaudRate);
     620:	4b6a      	ldr	r3, [pc, #424]	; (7cc <UART_Init+0x1e0>)
     622:	681a      	ldr	r2, [r3, #0]
     624:	683b      	ldr	r3, [r7, #0]
     626:	681b      	ldr	r3, [r3, #0]
     628:	fbb2 f3f3 	udiv	r3, r2, r3
     62c:	60bb      	str	r3, [r7, #8]

    UARTx->DLL =  ((BR_div>>4 ) & 0xFF);
     62e:	68bb      	ldr	r3, [r7, #8]
     630:	091b      	lsrs	r3, r3, #4
     632:	b2da      	uxtb	r2, r3
     634:	687b      	ldr	r3, [r7, #4]
     636:	601a      	str	r2, [r3, #0]
    UARTx->DLH =  ((BR_div>>12) & 0xFF);
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	0b1b      	lsrs	r3, r3, #12
     63c:	b2da      	uxtb	r2, r3
     63e:	687b      	ldr	r3, [r7, #4]
     640:	605a      	str	r2, [r3, #4]
    UARTx->DLF =  ((BR_div) & 0xf);
     642:	68bb      	ldr	r3, [r7, #8]
     644:	f003 020f 	and.w	r2, r3, #15
     648:	687b      	ldr	r3, [r7, #4]
     64a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable
     64e:	687b      	ldr	r3, [r7, #4]
     650:	68db      	ldr	r3, [r3, #12]
     652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
     656:	687b      	ldr	r3, [r7, #4]
     658:	60da      	str	r2, [r3, #12]
    UARTx->LCR &= ~(0xFF);
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	68db      	ldr	r3, [r3, #12]
     65e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     662:	687b      	ldr	r3, [r7, #4]
     664:	60da      	str	r2, [r3, #12]
    UARTx->LCR_EXT &= ~(0xFF);
     666:	687b      	ldr	r3, [r7, #4]
     668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
     66c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     670:	687b      	ldr	r3, [r7, #4]
     672:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if (UART_InitStruct->UART_WordLength == UART_WL_9BITS) {
     676:	683b      	ldr	r3, [r7, #0]
     678:	889b      	ldrh	r3, [r3, #4]
     67a:	2b04      	cmp	r3, #4
     67c:	d006      	beq.n	68c <UART_Init+0xa0>
        //Supported  ???
        //UARTx->LCR_EXT |= 0x01 << 0;
    }
    else {
        UARTx->LCR |= UART_InitStruct->UART_WordLength;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	68db      	ldr	r3, [r3, #12]
     682:	683a      	ldr	r2, [r7, #0]
     684:	8892      	ldrh	r2, [r2, #4]
     686:	431a      	orrs	r2, r3
     688:	687b      	ldr	r3, [r7, #4]
     68a:	60da      	str	r2, [r3, #12]
    }
    UARTx->LCR |= UART_InitStruct->UART_StopBits << 2;
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	68db      	ldr	r3, [r3, #12]
     690:	683a      	ldr	r2, [r7, #0]
     692:	88d2      	ldrh	r2, [r2, #6]
     694:	0092      	lsls	r2, r2, #2
     696:	431a      	orrs	r2, r3
     698:	687b      	ldr	r3, [r7, #4]
     69a:	60da      	str	r2, [r3, #12]
    if (UART_InitStruct->UART_ParityMode != UART_PM_NONE) {
     69c:	683b      	ldr	r3, [r7, #0]
     69e:	891b      	ldrh	r3, [r3, #8]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d025      	beq.n	6f0 <UART_Init+0x104>
        UARTx->LCR |= 0x01 << 3;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	68db      	ldr	r3, [r3, #12]
     6a8:	f043 0208 	orr.w	r2, r3, #8
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	60da      	str	r2, [r3, #12]
        //For ODD parity mode, the EPS/Stick Parity have be cleard.
        if (UART_InitStruct->UART_ParityMode == UART_PM_EVEN) {
     6b0:	683b      	ldr	r3, [r7, #0]
     6b2:	891b      	ldrh	r3, [r3, #8]
     6b4:	2b02      	cmp	r3, #2
     6b6:	d106      	bne.n	6c6 <UART_Init+0xda>
            UARTx->LCR |= 0x01 << 4;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	68db      	ldr	r3, [r3, #12]
     6bc:	f043 0210 	orr.w	r2, r3, #16
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	60da      	str	r2, [r3, #12]
     6c4:	e014      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG0) {
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	891b      	ldrh	r3, [r3, #8]
     6ca:	2b03      	cmp	r3, #3
     6cc:	d106      	bne.n	6dc <UART_Init+0xf0>
            UARTx->LCR |= 0x03 << 4;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	68db      	ldr	r3, [r3, #12]
     6d2:	f043 0230 	orr.w	r2, r3, #48	; 0x30
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	60da      	str	r2, [r3, #12]
     6da:	e009      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG1) {
     6dc:	683b      	ldr	r3, [r7, #0]
     6de:	891b      	ldrh	r3, [r3, #8]
     6e0:	2b04      	cmp	r3, #4
     6e2:	d105      	bne.n	6f0 <UART_Init+0x104>
            UARTx->LCR |= 0x02 << 4;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	68db      	ldr	r3, [r3, #12]
     6e8:	f043 0220 	orr.w	r2, r3, #32
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	60da      	str	r2, [r3, #12]
        }
    }
    UARTx->MCR &= ~(0xFF);
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	691b      	ldr	r3, [r3, #16]
     6f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	611a      	str	r2, [r3, #16]
    if (UART_InitStruct->UART_HardwareFlowControl      == UART_FC_DTRDSR) 
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	895b      	ldrh	r3, [r3, #10]
     700:	2b01      	cmp	r3, #1
     702:	d106      	bne.n	712 <UART_Init+0x126>
         UARTx->MCR |= 0x01;
     704:	687b      	ldr	r3, [r7, #4]
     706:	691b      	ldr	r3, [r3, #16]
     708:	f043 0201 	orr.w	r2, r3, #1
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	611a      	str	r2, [r3, #16]
     710:	e02a      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS) 
     712:	683b      	ldr	r3, [r7, #0]
     714:	895b      	ldrh	r3, [r3, #10]
     716:	2b02      	cmp	r3, #2
     718:	d106      	bne.n	728 <UART_Init+0x13c>
         UARTx->MCR |= 0x02;
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	f043 0202 	orr.w	r2, r3, #2
     722:	687b      	ldr	r3, [r7, #4]
     724:	611a      	str	r2, [r3, #16]
     726:	e01f      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS) 
     728:	683b      	ldr	r3, [r7, #0]
     72a:	895b      	ldrh	r3, [r3, #10]
     72c:	2b03      	cmp	r3, #3
     72e:	d106      	bne.n	73e <UART_Init+0x152>
        UARTx->MCR  |= 0x22;
     730:	687b      	ldr	r3, [r7, #4]
     732:	691b      	ldr	r3, [r3, #16]
     734:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     738:	687b      	ldr	r3, [r7, #4]
     73a:	611a      	str	r2, [r3, #16]
     73c:	e014      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS_DTRDSR) 
     73e:	683b      	ldr	r3, [r7, #0]
     740:	895b      	ldrh	r3, [r3, #10]
     742:	2b04      	cmp	r3, #4
     744:	d106      	bne.n	754 <UART_Init+0x168>
        UARTx->MCR  |= 0x3;
     746:	687b      	ldr	r3, [r7, #4]
     748:	691b      	ldr	r3, [r3, #16]
     74a:	f043 0203 	orr.w	r2, r3, #3
     74e:	687b      	ldr	r3, [r7, #4]
     750:	611a      	str	r2, [r3, #16]
     752:	e009      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS_DTRDSR) 
     754:	683b      	ldr	r3, [r7, #0]
     756:	895b      	ldrh	r3, [r3, #10]
     758:	2b05      	cmp	r3, #5
     75a:	d105      	bne.n	768 <UART_Init+0x17c>
        UARTx->MCR  |= 0x23;
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	691b      	ldr	r3, [r3, #16]
     760:	f043 0223 	orr.w	r2, r3, #35	; 0x23
     764:	687b      	ldr	r3, [r7, #4]
     766:	611a      	str	r2, [r3, #16]
    
    UARTx->FCR &= ~(0xFF);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	689b      	ldr	r3, [r3, #8]
     76c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     770:	687b      	ldr	r3, [r7, #4]
     772:	609a      	str	r2, [r3, #8]
    if (UART_InitStruct->UART_DMAMode == UART_DM_MODE_1) 
     774:	683b      	ldr	r3, [r7, #0]
     776:	899b      	ldrh	r3, [r3, #12]
     778:	2b01      	cmp	r3, #1
     77a:	d103      	bne.n	784 <UART_Init+0x198>
        fcr_cfg |= 0x01 << 3;
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	f043 0308 	orr.w	r3, r3, #8
     782:	60fb      	str	r3, [r7, #12]
    
    if (UART_InitStruct->UART_FIFOMode == UART_FM_ENABLE) {
     784:	683b      	ldr	r3, [r7, #0]
     786:	89db      	ldrh	r3, [r3, #14]
     788:	2b01      	cmp	r3, #1
     78a:	d10d      	bne.n	7a8 <UART_Init+0x1bc>
        
        fcr_cfg |= UART_InitStruct->UART_RX_FIFOTriggerMode << 6;
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	8a5b      	ldrh	r3, [r3, #18]
     790:	019b      	lsls	r3, r3, #6
     792:	461a      	mov	r2, r3
     794:	68fb      	ldr	r3, [r7, #12]
     796:	4313      	orrs	r3, r2
     798:	60fb      	str	r3, [r7, #12]
        fcr_cfg |= UART_InitStruct->UART_TX_FIFOTriggerMode << 4;       
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	8a1b      	ldrh	r3, [r3, #16]
     79e:	011b      	lsls	r3, r3, #4
     7a0:	461a      	mov	r2, r3
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	4313      	orrs	r3, r2
     7a6:	60fb      	str	r3, [r7, #12]
    }
    
    fcr_cfg |= 0x03 << 1; //Reset XMIT/RCVR FIFO
     7a8:	68fb      	ldr	r3, [r7, #12]
     7aa:	f043 0306 	orr.w	r3, r3, #6
     7ae:	60fb      	str	r3, [r7, #12]
    fcr_cfg |= 0x01 << 0;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	f043 0301 	orr.w	r3, r3, #1
     7b6:	60fb      	str	r3, [r7, #12]
    UARTx->FCR = fcr_cfg;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	68fa      	ldr	r2, [r7, #12]
     7bc:	609a      	str	r2, [r3, #8]
     7be:	e000      	b.n	7c2 <UART_Init+0x1d6>
        return;
     7c0:	bf00      	nop
}
     7c2:	3714      	adds	r7, #20
     7c4:	46bd      	mov	sp, r7
     7c6:	bc80      	pop	{r7}
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop
     7cc:	20008000 	.word	0x20008000

000007d0 <UART_InterruptSet>:

void UART_InterruptSet(UART_TypeDef *UARTx, uint16_t UART_IntMask)
{
     7d0:	b480      	push	{r7}
     7d2:	b083      	sub	sp, #12
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	460b      	mov	r3, r1
     7da:	807b      	strh	r3, [r7, #2]
    // UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable    
    UARTx->IER &= ~UART_IntMask;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	685b      	ldr	r3, [r3, #4]
     7e0:	887a      	ldrh	r2, [r7, #2]
     7e2:	43d2      	mvns	r2, r2
     7e4:	401a      	ands	r2, r3
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	605a      	str	r2, [r3, #4]
    UARTx->IER |= UART_IntMask;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	685a      	ldr	r2, [r3, #4]
     7ee:	887b      	ldrh	r3, [r7, #2]
     7f0:	431a      	orrs	r2, r3
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	605a      	str	r2, [r3, #4]
}
     7f6:	bf00      	nop
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	bc80      	pop	{r7}
     7fe:	4770      	bx	lr

00000800 <UART_WriteByte>:

void UART_WriteByte(UART_TypeDef *UARTx, uint8_t byte)
{
     800:	b480      	push	{r7}
     802:	b083      	sub	sp, #12
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	460b      	mov	r3, r1
     80a:	70fb      	strb	r3, [r7, #3]
    UARTx->THR = byte;
     80c:	78fa      	ldrb	r2, [r7, #3]
     80e:	687b      	ldr	r3, [r7, #4]
     810:	601a      	str	r2, [r3, #0]
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	bc80      	pop	{r7}
     81a:	4770      	bx	lr

0000081c <UART_WriteData>:

void UART_WriteData(UART_TypeDef *UARTx, uint8_t *data, uint16_t length)
{
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	60f8      	str	r0, [r7, #12]
     824:	60b9      	str	r1, [r7, #8]
     826:	4613      	mov	r3, r2
     828:	80fb      	strh	r3, [r7, #6]
    while (length--) {
     82a:	e013      	b.n	854 <UART_WriteData+0x38>
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
        {
            if(UWrite_handle)
     82c:	4b0e      	ldr	r3, [pc, #56]	; (868 <UART_WriteData+0x4c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2b00      	cmp	r3, #0
     832:	d002      	beq.n	83a <UART_WriteData+0x1e>
                UWrite_handle();
     834:	4b0c      	ldr	r3, [pc, #48]	; (868 <UART_WriteData+0x4c>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	4798      	blx	r3
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	695b      	ldr	r3, [r3, #20]
     83e:	f003 0320 	and.w	r3, r3, #32
     842:	2b00      	cmp	r3, #0
     844:	d0f2      	beq.n	82c <UART_WriteData+0x10>
        };
        UARTx->THR = *data++;
     846:	68bb      	ldr	r3, [r7, #8]
     848:	1c5a      	adds	r2, r3, #1
     84a:	60ba      	str	r2, [r7, #8]
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	461a      	mov	r2, r3
     850:	68fb      	ldr	r3, [r7, #12]
     852:	601a      	str	r2, [r3, #0]
    while (length--) {
     854:	88fb      	ldrh	r3, [r7, #6]
     856:	1e5a      	subs	r2, r3, #1
     858:	80fa      	strh	r2, [r7, #6]
     85a:	2b00      	cmp	r3, #0
     85c:	d1ed      	bne.n	83a <UART_WriteData+0x1e>
    }
}
     85e:	bf00      	nop
     860:	3710      	adds	r7, #16
     862:	46bd      	mov	sp, r7
     864:	bd80      	pop	{r7, pc}
     866:	bf00      	nop
     868:	20008288 	.word	0x20008288

0000086c <UART_SetUWriteHandle>:

void UART_SetUWriteHandle(UART_write_handle handle)
{
     86c:	b480      	push	{r7}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
    UWrite_handle = handle;
     874:	4a03      	ldr	r2, [pc, #12]	; (884 <UART_SetUWriteHandle+0x18>)
     876:	687b      	ldr	r3, [r7, #4]
     878:	6013      	str	r3, [r2, #0]
}
     87a:	bf00      	nop
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr
     884:	20008288 	.word	0x20008288

00000888 <UART_ReadByte>:

uint8_t UART_ReadByte(UART_TypeDef *UARTx)
{
     888:	b480      	push	{r7}
     88a:	b083      	sub	sp, #12
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
    return (UARTx->RBR & 0xFF);
     890:	687b      	ldr	r3, [r7, #4]
     892:	681b      	ldr	r3, [r3, #0]
     894:	b2db      	uxtb	r3, r3
}
     896:	4618      	mov	r0, r3
     898:	370c      	adds	r7, #12
     89a:	46bd      	mov	sp, r7
     89c:	bc80      	pop	{r7}
     89e:	4770      	bx	lr

000008a0 <UART_AutoFlow>:

void  UART_AutoFlow(UART_TypeDef *UARTx,bool En)
{
     8a0:	b480      	push	{r7}
     8a2:	b083      	sub	sp, #12
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
     8a8:	460b      	mov	r3, r1
     8aa:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ac:	78fb      	ldrb	r3, [r7, #3]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d00c      	beq.n	8cc <UART_AutoFlow+0x2c>
    {
        UARTx->MCR  |=0x22;  
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	691b      	ldr	r3, [r3, #16]
     8b6:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	611a      	str	r2, [r3, #16]
        UARTx->FCR  |=1<<0;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	689b      	ldr	r3, [r3, #8]
     8c2:	f043 0201 	orr.w	r2, r3, #1
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	609a      	str	r2, [r3, #8]
    else
    {
        UARTx->MCR  &= ~0x22;  
    }
        
}
     8ca:	e005      	b.n	8d8 <UART_AutoFlow+0x38>
        UARTx->MCR  &= ~0x22;  
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	691b      	ldr	r3, [r3, #16]
     8d0:	f023 0222 	bic.w	r2, r3, #34	; 0x22
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	611a      	str	r2, [r3, #16]
}
     8d8:	bf00      	nop
     8da:	370c      	adds	r7, #12
     8dc:	46bd      	mov	sp, r7
     8de:	bc80      	pop	{r7}
     8e0:	4770      	bx	lr

000008e2 <UART_SetRts>:

void  UART_SetRts(UART_TypeDef *UARTx,bool En)
{
     8e2:	b480      	push	{r7}
     8e4:	b083      	sub	sp, #12
     8e6:	af00      	add	r7, sp, #0
     8e8:	6078      	str	r0, [r7, #4]
     8ea:	460b      	mov	r3, r1
     8ec:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ee:	78fb      	ldrb	r3, [r7, #3]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d006      	beq.n	902 <UART_SetRts+0x20>
    {
        UARTx->MCR  |=0x02;  
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	691b      	ldr	r3, [r3, #16]
     8f8:	f043 0202 	orr.w	r2, r3, #2
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	611a      	str	r2, [r3, #16]
    else
    {
        UARTx->MCR  &= ~0x02;  
    }
        
}
     900:	e005      	b.n	90e <UART_SetRts+0x2c>
        UARTx->MCR  &= ~0x02;  
     902:	687b      	ldr	r3, [r7, #4]
     904:	691b      	ldr	r3, [r3, #16]
     906:	f023 0202 	bic.w	r2, r3, #2
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	611a      	str	r2, [r3, #16]
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	bc80      	pop	{r7}
     916:	4770      	bx	lr

00000918 <UART_LSRCheckBits>:

FlagStatus UART_LSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     918:	b480      	push	{r7}
     91a:	b085      	sub	sp, #20
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->LSR & 0x1FF;
     922:	687b      	ldr	r3, [r7, #4]
     924:	695b      	ldr	r3, [r3, #20]
     926:	f3c3 0308 	ubfx	r3, r3, #0, #9
     92a:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     92c:	68fa      	ldr	r2, [r7, #12]
     92e:	683b      	ldr	r3, [r7, #0]
     930:	4013      	ands	r3, r2
     932:	2b00      	cmp	r3, #0
     934:	d001      	beq.n	93a <UART_LSRCheckBits+0x22>
        return SET;
     936:	2301      	movs	r3, #1
     938:	e000      	b.n	93c <UART_LSRCheckBits+0x24>
    }
    else {
        return RESET;
     93a:	2300      	movs	r3, #0
    }
}
     93c:	4618      	mov	r0, r3
     93e:	3714      	adds	r7, #20
     940:	46bd      	mov	sp, r7
     942:	bc80      	pop	{r7}
     944:	4770      	bx	lr

00000946 <UART_MSRCheckBits>:

FlagStatus UART_MSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     946:	b480      	push	{r7}
     948:	b085      	sub	sp, #20
     94a:	af00      	add	r7, sp, #0
     94c:	6078      	str	r0, [r7, #4]
     94e:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->MSR;
     950:	687b      	ldr	r3, [r7, #4]
     952:	699b      	ldr	r3, [r3, #24]
     954:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     956:	68fa      	ldr	r2, [r7, #12]
     958:	683b      	ldr	r3, [r7, #0]
     95a:	4013      	ands	r3, r2
     95c:	2b00      	cmp	r3, #0
     95e:	d001      	beq.n	964 <UART_MSRCheckBits+0x1e>
        return SET;
     960:	2301      	movs	r3, #1
     962:	e000      	b.n	966 <UART_MSRCheckBits+0x20>
    }
    else {
        return RESET;
     964:	2300      	movs	r3, #0
    }
}
     966:	4618      	mov	r0, r3
     968:	3714      	adds	r7, #20
     96a:	46bd      	mov	sp, r7
     96c:	bc80      	pop	{r7}
     96e:	4770      	bx	lr

00000970 <UART_GetInterruptID>:

UART_InterID_Tpye UART_GetInterruptID(UART_TypeDef *UARTx)
{
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
    return (UART_InterID_Tpye)(UARTx->IIR & 0xf);
     978:	687b      	ldr	r3, [r7, #4]
     97a:	689b      	ldr	r3, [r3, #8]
     97c:	b2db      	uxtb	r3, r3
     97e:	f003 030f 	and.w	r3, r3, #15
     982:	b2db      	uxtb	r3, r3
}
     984:	4618      	mov	r0, r3
     986:	370c      	adds	r7, #12
     988:	46bd      	mov	sp, r7
     98a:	bc80      	pop	{r7}
     98c:	4770      	bx	lr

0000098e <UART_GetInterruptStatus>:

ITStatus UART_GetInterruptStatus(UART_TypeDef *UARTx, uint16_t UART_IntIds)
{
     98e:	b480      	push	{r7}
     990:	b083      	sub	sp, #12
     992:	af00      	add	r7, sp, #0
     994:	6078      	str	r0, [r7, #4]
     996:	460b      	mov	r3, r1
     998:	807b      	strh	r3, [r7, #2]
    if (UARTx->IER & UART_IntIds) {
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	685a      	ldr	r2, [r3, #4]
     99e:	887b      	ldrh	r3, [r7, #2]
     9a0:	4013      	ands	r3, r2
     9a2:	2b00      	cmp	r3, #0
     9a4:	d007      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
        if (UARTx->IIR & UART_IntIds) {
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	689a      	ldr	r2, [r3, #8]
     9aa:	887b      	ldrh	r3, [r7, #2]
     9ac:	4013      	ands	r3, r2
     9ae:	2b00      	cmp	r3, #0
     9b0:	d001      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
            return SET;
     9b2:	2301      	movs	r3, #1
     9b4:	e000      	b.n	9b8 <UART_GetInterruptStatus+0x2a>
        }
    }
    return RESET;
     9b6:	2300      	movs	r3, #0
}
     9b8:	4618      	mov	r0, r3
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr

000009c2 <UART_GetStatus>:

uint32_t UART_GetStatus(UART_TypeDef *UARTx)
{
     9c2:	b480      	push	{r7}
     9c4:	b083      	sub	sp, #12
     9c6:	af00      	add	r7, sp, #0
     9c8:	6078      	str	r0, [r7, #4]
    return(UARTx->USR );
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
     9ce:	4618      	mov	r0, r3
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	bc80      	pop	{r7}
     9d6:	4770      	bx	lr

000009d8 <SCU_ClockSelectDivControl>:

#if  defined(BR002)||defined(BR003)||defined(BR005)

//96M DIV Select
void SCU_ClockSelectDivControl(SCU_96MDIVCtl_Type st)
{   
     9d8:	b480      	push	{r7}
     9da:	b085      	sub	sp, #20
     9dc:	af00      	add	r7, sp, #0
     9de:	4603      	mov	r3, r0
     9e0:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = SCU->CLK_CTL;
     9e2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     9e6:	689b      	ldr	r3, [r3, #8]
     9e8:	60fb      	str	r3, [r7, #12]
    clk &= ~0x03;
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	f023 0303 	bic.w	r3, r3, #3
     9f0:	60fb      	str	r3, [r7, #12]
    clk |= st&0x03;
     9f2:	79fb      	ldrb	r3, [r7, #7]
     9f4:	f003 0303 	and.w	r3, r3, #3
     9f8:	68fa      	ldr	r2, [r7, #12]
     9fa:	4313      	orrs	r3, r2
     9fc:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     9fe:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     a02:	68fb      	ldr	r3, [r7, #12]
     a04:	6093      	str	r3, [r2, #8]
}
     a06:	bf00      	nop
     a08:	3714      	adds	r7, #20
     a0a:	46bd      	mov	sp, r7
     a0c:	bc80      	pop	{r7}
     a0e:	4770      	bx	lr

00000a10 <SCU_PClkSelect>:

//PCLK Select
void SCU_PClkSelect(SCU_PclkSelect_Type st)
{
     a10:	b480      	push	{r7}
     a12:	b085      	sub	sp, #20
     a14:	af00      	add	r7, sp, #0
     a16:	4603      	mov	r3, r0
     a18:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = SCU->CLK_CTL;
     a1a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     a1e:	689b      	ldr	r3, [r3, #8]
     a20:	60fb      	str	r3, [r7, #12]
	clk &= ~(0x01<<2);
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	f023 0304 	bic.w	r3, r3, #4
     a28:	60fb      	str	r3, [r7, #12]
	clk |=  (st&0x01)<<2;
     a2a:	79fb      	ldrb	r3, [r7, #7]
     a2c:	009b      	lsls	r3, r3, #2
     a2e:	f003 0304 	and.w	r3, r3, #4
     a32:	68fa      	ldr	r2, [r7, #12]
     a34:	4313      	orrs	r3, r2
     a36:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     a38:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     a3c:	68fb      	ldr	r3, [r7, #12]
     a3e:	6093      	str	r3, [r2, #8]
}
     a40:	bf00      	nop
     a42:	3714      	adds	r7, #20
     a44:	46bd      	mov	sp, r7
     a46:	bc80      	pop	{r7}
     a48:	4770      	bx	lr

00000a4a <SCU_PClkPreSelect>:

//PCLK Pre Select
void SCU_PClkPreSelect(SCU_Pclk_Pre_Select_Type st)
{
     a4a:	b480      	push	{r7}
     a4c:	b085      	sub	sp, #20
     a4e:	af00      	add	r7, sp, #0
     a50:	4603      	mov	r3, r0
     a52:	71fb      	strb	r3, [r7, #7]
    clk |=  (st&0x07)<<9;
    SCU->CLK_CTL = clk;

#endif
#ifdef BR003
    uint32_t clk = SCU->CLK_CTL;
     a54:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     a58:	689b      	ldr	r3, [r3, #8]
     a5a:	60fb      	str	r3, [r7, #12]
    clk &= ~(0x0f<<10);
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
     a62:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x0f)<<10;
     a64:	79fb      	ldrb	r3, [r7, #7]
     a66:	029b      	lsls	r3, r3, #10
     a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
     a6c:	68fa      	ldr	r2, [r7, #12]
     a6e:	4313      	orrs	r3, r2
     a70:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     a72:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	6093      	str	r3, [r2, #8]
    clk &= ~(0x0f<<10);
    clk |=  (st&0x0f)<<10;
    SCU->CLK_CTL = clk;
#endif
    
}
     a7a:	bf00      	nop
     a7c:	3714      	adds	r7, #20
     a7e:	46bd      	mov	sp, r7
     a80:	bc80      	pop	{r7}
     a82:	4770      	bx	lr

00000a84 <SCU_HClkSelect>:


//HCLK Pre Select
void SCU_HClkSelect(SCU_HclkSelect_Type st)
{
     a84:	b480      	push	{r7}
     a86:	b085      	sub	sp, #20
     a88:	af00      	add	r7, sp, #0
     a8a:	4603      	mov	r3, r0
     a8c:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = SCU->CLK_CTL;
     a8e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     a92:	689b      	ldr	r3, [r3, #8]
     a94:	60fb      	str	r3, [r7, #12]
    clk &= ~(0x03<<3);
     a96:	68fb      	ldr	r3, [r7, #12]
     a98:	f023 0318 	bic.w	r3, r3, #24
     a9c:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x03)<<3;
     a9e:	79fb      	ldrb	r3, [r7, #7]
     aa0:	00db      	lsls	r3, r3, #3
     aa2:	f003 0318 	and.w	r3, r3, #24
     aa6:	68fa      	ldr	r2, [r7, #12]
     aa8:	4313      	orrs	r3, r2
     aaa:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     aac:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     ab0:	68fb      	ldr	r3, [r7, #12]
     ab2:	6093      	str	r3, [r2, #8]
	
}
     ab4:	bf00      	nop
     ab6:	3714      	adds	r7, #20
     ab8:	46bd      	mov	sp, r7
     aba:	bc80      	pop	{r7}
     abc:	4770      	bx	lr

00000abe <SCU_SPIM0ClkSelect>:


//SPIM0 Select
void SCU_SPIM0ClkSelect(SCU_SPIM0Select_Type st)
{
     abe:	b480      	push	{r7}
     ac0:	b085      	sub	sp, #20
     ac2:	af00      	add	r7, sp, #0
     ac4:	4603      	mov	r3, r0
     ac6:	71fb      	strb	r3, [r7, #7]
    clk |=  (st&0x03)<<5;
    SCU->CLK_CTL = clk;

#endif
#ifdef BR003
    uint32_t clk = SCU->CLK_CTL;
     ac8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     acc:	689b      	ldr	r3, [r3, #8]
     ace:	60fb      	str	r3, [r7, #12]
    clk &= ~(0x01<<5);
     ad0:	68fb      	ldr	r3, [r7, #12]
     ad2:	f023 0320 	bic.w	r3, r3, #32
     ad6:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x01)<<5;
     ad8:	79fb      	ldrb	r3, [r7, #7]
     ada:	015b      	lsls	r3, r3, #5
     adc:	f003 0320 	and.w	r3, r3, #32
     ae0:	68fa      	ldr	r2, [r7, #12]
     ae2:	4313      	orrs	r3, r2
     ae4:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     ae6:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     aea:	68fb      	ldr	r3, [r7, #12]
     aec:	6093      	str	r3, [r2, #8]
    clk |=  (st&0x01)<<5;
    SCU->CLK_CTL = clk;
#endif

	
}
     aee:	bf00      	nop
     af0:	3714      	adds	r7, #20
     af2:	46bd      	mov	sp, r7
     af4:	bc80      	pop	{r7}
     af6:	4770      	bx	lr

00000af8 <SCU_32KClkSelect>:

//32K Select
void SCU_32KClkSelect(SCU_32KSelect_Type st)
{
     af8:	b480      	push	{r7}
     afa:	b085      	sub	sp, #20
     afc:	af00      	add	r7, sp, #0
     afe:	4603      	mov	r3, r0
     b00:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = SCU->CLK_CTL;
     b02:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b06:	689b      	ldr	r3, [r3, #8]
     b08:	60fb      	str	r3, [r7, #12]
    clk &=   ~(0x03<<6);
     b0a:	68fb      	ldr	r3, [r7, #12]
     b0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     b10:	60fb      	str	r3, [r7, #12]
    clk |=   (st&0x03)<<6;
     b12:	79fb      	ldrb	r3, [r7, #7]
     b14:	019b      	lsls	r3, r3, #6
     b16:	b2db      	uxtb	r3, r3
     b18:	68fa      	ldr	r2, [r7, #12]
     b1a:	4313      	orrs	r3, r2
     b1c:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     b1e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	6093      	str	r3, [r2, #8]
	
}
     b26:	bf00      	nop
     b28:	3714      	adds	r7, #20
     b2a:	46bd      	mov	sp, r7
     b2c:	bc80      	pop	{r7}
     b2e:	4770      	bx	lr

00000b30 <SCU_USBClkSelect>:


void SCU_USBClkSelect(SCU_USBSelect_Type st)
{
     b30:	b480      	push	{r7}
     b32:	b085      	sub	sp, #20
     b34:	af00      	add	r7, sp, #0
     b36:	4603      	mov	r3, r0
     b38:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = SCU->CLK_CTL;
     b3a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b3e:	689b      	ldr	r3, [r3, #8]
     b40:	60fb      	str	r3, [r7, #12]
    clk &=  ~(0x01<<8);
     b42:	68fb      	ldr	r3, [r7, #12]
     b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     b48:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x01)<<8;
     b4a:	79fb      	ldrb	r3, [r7, #7]
     b4c:	021b      	lsls	r3, r3, #8
     b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
     b52:	68fa      	ldr	r2, [r7, #12]
     b54:	4313      	orrs	r3, r2
     b56:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     b58:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	6093      	str	r3, [r2, #8]
	
}
     b60:	bf00      	nop
     b62:	3714      	adds	r7, #20
     b64:	46bd      	mov	sp, r7
     b66:	bc80      	pop	{r7}
     b68:	4770      	bx	lr

00000b6a <SCU_UART0ClkSelect>:

void SCU_UART0ClkSelect(SCU_UART0Select_Type st)
{
     b6a:	b480      	push	{r7}
     b6c:	b085      	sub	sp, #20
     b6e:	af00      	add	r7, sp, #0
     b70:	4603      	mov	r3, r0
     b72:	71fb      	strb	r3, [r7, #7]
#if defined(BR003)||defined(BR005)
    uint32_t clk = SCU->CLK_CTL;
     b74:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b78:	689b      	ldr	r3, [r3, #8]
     b7a:	60fb      	str	r3, [r7, #12]
    clk &=  ~(0x01<<9);
     b7c:	68fb      	ldr	r3, [r7, #12]
     b7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     b82:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x01)<<9;
     b84:	79fb      	ldrb	r3, [r7, #7]
     b86:	025b      	lsls	r3, r3, #9
     b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	4313      	orrs	r3, r2
     b90:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     b92:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     b96:	68fb      	ldr	r3, [r7, #12]
     b98:	6093      	str	r3, [r2, #8]
#endif
}
     b9a:	bf00      	nop
     b9c:	3714      	adds	r7, #20
     b9e:	46bd      	mov	sp, r7
     ba0:	bc80      	pop	{r7}
     ba2:	4770      	bx	lr

00000ba4 <SCU_BB_MEM_ADC_ClkSelect>:

void SCU_BB_MEM_ADC_ClkSelect(bool st)
{
     ba4:	b480      	push	{r7}
     ba6:	b085      	sub	sp, #20
     ba8:	af00      	add	r7, sp, #0
     baa:	4603      	mov	r3, r0
     bac:	71fb      	strb	r3, [r7, #7]
#if defined(BR003)||defined(BR005)
    uint32_t clk = SCU->CLK_CTL;
     bae:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     bb2:	689b      	ldr	r3, [r3, #8]
     bb4:	60fb      	str	r3, [r7, #12]
    clk &=  ~(0x01<<14);
     bb6:	68fb      	ldr	r3, [r7, #12]
     bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     bbc:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x01)<<14;
     bbe:	79fb      	ldrb	r3, [r7, #7]
     bc0:	039b      	lsls	r3, r3, #14
     bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     bc6:	68fa      	ldr	r2, [r7, #12]
     bc8:	4313      	orrs	r3, r2
     bca:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     bcc:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     bd0:	68fb      	ldr	r3, [r7, #12]
     bd2:	6093      	str	r3, [r2, #8]
#endif
}
     bd4:	bf00      	nop
     bd6:	3714      	adds	r7, #20
     bd8:	46bd      	mov	sp, r7
     bda:	bc80      	pop	{r7}
     bdc:	4770      	bx	lr

00000bde <SCU_BB_MEM_DAC_ClkSelect>:

void SCU_BB_MEM_DAC_ClkSelect(bool st)
{
     bde:	b480      	push	{r7}
     be0:	b085      	sub	sp, #20
     be2:	af00      	add	r7, sp, #0
     be4:	4603      	mov	r3, r0
     be6:	71fb      	strb	r3, [r7, #7]
#if defined(BR003)||defined(BR005)
    uint32_t clk = SCU->CLK_CTL;
     be8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     bec:	689b      	ldr	r3, [r3, #8]
     bee:	60fb      	str	r3, [r7, #12]
    clk &=  ~(0x01<<15);
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     bf6:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x01)<<15;
     bf8:	79fb      	ldrb	r3, [r7, #7]
     bfa:	03db      	lsls	r3, r3, #15
     bfc:	b29b      	uxth	r3, r3
     bfe:	68fa      	ldr	r2, [r7, #12]
     c00:	4313      	orrs	r3, r2
     c02:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     c04:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     c08:	68fb      	ldr	r3, [r7, #12]
     c0a:	6093      	str	r3, [r2, #8]
#endif
}
     c0c:	bf00      	nop
     c0e:	3714      	adds	r7, #20
     c10:	46bd      	mov	sp, r7
     c12:	bc80      	pop	{r7}
     c14:	4770      	bx	lr

00000c16 <SCU_RF_ADC_ClkSelect>:

void SCU_RF_ADC_ClkSelect(uint32_t st)
{
     c16:	b480      	push	{r7}
     c18:	b085      	sub	sp, #20
     c1a:	af00      	add	r7, sp, #0
     c1c:	6078      	str	r0, [r7, #4]
#if defined(BR003)||defined(BR005)
    uint32_t clk = SCU->CLK_CTL;
     c1e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     c22:	689b      	ldr	r3, [r3, #8]
     c24:	60fb      	str	r3, [r7, #12]
    clk &=  ~(0x03<<16);
     c26:	68fb      	ldr	r3, [r7, #12]
     c28:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
     c2c:	60fb      	str	r3, [r7, #12]
    clk |=  (st&0x03)<<16;
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	041b      	lsls	r3, r3, #16
     c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
     c36:	68fa      	ldr	r2, [r7, #12]
     c38:	4313      	orrs	r3, r2
     c3a:	60fb      	str	r3, [r7, #12]
    SCU->CLK_CTL = clk;
     c3c:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     c40:	68fb      	ldr	r3, [r7, #12]
     c42:	6093      	str	r3, [r2, #8]
#endif
}
     c44:	bf00      	nop
     c46:	3714      	adds	r7, #20
     c48:	46bd      	mov	sp, r7
     c4a:	bc80      	pop	{r7}
     c4c:	4770      	bx	lr

00000c4e <SCU_SPI1Div>:



void SCU_SPI1Div(uint32_t div)
{
     c4e:	b480      	push	{r7}
     c50:	b085      	sub	sp, #20
     c52:	af00      	add	r7, sp, #0
     c54:	6078      	str	r0, [r7, #4]
    uint32_t clk_div = SCU->CLK_DIV;
     c56:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     c5a:	68db      	ldr	r3, [r3, #12]
     c5c:	60fb      	str	r3, [r7, #12]
    clk_div &=~0xFFFF;
     c5e:	68fb      	ldr	r3, [r7, #12]
     c60:	0c1b      	lsrs	r3, r3, #16
     c62:	041b      	lsls	r3, r3, #16
     c64:	60fb      	str	r3, [r7, #12]
    clk_div |=div&0xFFFF;
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	b29b      	uxth	r3, r3
     c6a:	68fa      	ldr	r2, [r7, #12]
     c6c:	4313      	orrs	r3, r2
     c6e:	60fb      	str	r3, [r7, #12]
    SCU->CLK_DIV = clk_div;
     c70:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     c74:	68fb      	ldr	r3, [r7, #12]
     c76:	60d3      	str	r3, [r2, #12]
}
     c78:	bf00      	nop
     c7a:	3714      	adds	r7, #20
     c7c:	46bd      	mov	sp, r7
     c7e:	bc80      	pop	{r7}
     c80:	4770      	bx	lr

00000c82 <SCU_32KDiv>:

void SCU_32KDiv(uint32_t div)
{
     c82:	b480      	push	{r7}
     c84:	b085      	sub	sp, #20
     c86:	af00      	add	r7, sp, #0
     c88:	6078      	str	r0, [r7, #4]
    uint32_t clk_div = SCU->CLK_DIV;
     c8a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     c8e:	68db      	ldr	r3, [r3, #12]
     c90:	60fb      	str	r3, [r7, #12]
    clk_div &=~0xFFFF0000;
     c92:	68fb      	ldr	r3, [r7, #12]
     c94:	b29b      	uxth	r3, r3
     c96:	60fb      	str	r3, [r7, #12]
    clk_div |=((div&0xFFFF)<<16);
     c98:	687b      	ldr	r3, [r7, #4]
     c9a:	041b      	lsls	r3, r3, #16
     c9c:	68fa      	ldr	r2, [r7, #12]
     c9e:	4313      	orrs	r3, r2
     ca0:	60fb      	str	r3, [r7, #12]
    SCU->CLK_DIV = clk_div;
     ca2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     ca6:	68fb      	ldr	r3, [r7, #12]
     ca8:	60d3      	str	r3, [r2, #12]
}
     caa:	bf00      	nop
     cac:	3714      	adds	r7, #20
     cae:	46bd      	mov	sp, r7
     cb0:	bc80      	pop	{r7}
     cb2:	4770      	bx	lr

00000cb4 <SCU_WdtDiv>:


void SCU_WdtDiv(uint32_t div)
{
     cb4:	b480      	push	{r7}
     cb6:	b085      	sub	sp, #20
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
    uint32_t clk_div = SCU->CLK_DIV1;
     cbc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     cc2:	60fb      	str	r3, [r7, #12]
    clk_div &=~0xFFFF;
     cc4:	68fb      	ldr	r3, [r7, #12]
     cc6:	0c1b      	lsrs	r3, r3, #16
     cc8:	041b      	lsls	r3, r3, #16
     cca:	60fb      	str	r3, [r7, #12]
    clk_div |=div&0xFFFF;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	b29b      	uxth	r3, r3
     cd0:	68fa      	ldr	r2, [r7, #12]
     cd2:	4313      	orrs	r3, r2
     cd4:	60fb      	str	r3, [r7, #12]
    SCU->CLK_DIV1 = clk_div;
     cd6:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     cda:	68fb      	ldr	r3, [r7, #12]
     cdc:	6313      	str	r3, [r2, #48]	; 0x30
}
     cde:	bf00      	nop
     ce0:	3714      	adds	r7, #20
     ce2:	46bd      	mov	sp, r7
     ce4:	bc80      	pop	{r7}
     ce6:	4770      	bx	lr

00000ce8 <SCU_I2SDiv>:


void SCU_I2SDiv(uint32_t div)
{
     ce8:	b480      	push	{r7}
     cea:	b085      	sub	sp, #20
     cec:	af00      	add	r7, sp, #0
     cee:	6078      	str	r0, [r7, #4]
    uint32_t clk_div = SCU->CLK_CTL;
     cf0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     cf4:	689b      	ldr	r3, [r3, #8]
     cf6:	60fb      	str	r3, [r7, #12]
    clk_div &=~0xFFFF0000;
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	b29b      	uxth	r3, r3
     cfc:	60fb      	str	r3, [r7, #12]
    clk_div |=((div&0xFFFF)<<16);
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	041b      	lsls	r3, r3, #16
     d02:	68fa      	ldr	r2, [r7, #12]
     d04:	4313      	orrs	r3, r2
     d06:	60fb      	str	r3, [r7, #12]
    SCU->CLK_DIV1 = clk_div;
     d08:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	6313      	str	r3, [r2, #48]	; 0x30
}
     d10:	bf00      	nop
     d12:	3714      	adds	r7, #20
     d14:	46bd      	mov	sp, r7
     d16:	bc80      	pop	{r7}
     d18:	4770      	bx	lr

00000d1a <SCU_RTCDiv>:

void SCU_RTCDiv(uint32_t div)
{
     d1a:	b480      	push	{r7}
     d1c:	b083      	sub	sp, #12
     d1e:	af00      	add	r7, sp, #0
     d20:	6078      	str	r0, [r7, #4]
	   SCU->CLK_DIV2 = div;
     d22:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	6353      	str	r3, [r2, #52]	; 0x34
}
     d2a:	bf00      	nop
     d2c:	370c      	adds	r7, #12
     d2e:	46bd      	mov	sp, r7
     d30:	bc80      	pop	{r7}
     d32:	4770      	bx	lr

00000d34 <SCU_TimersDiv>:


void SCU_TimersDiv(SCU_Timers_Type tm,uint16_t div)
{
     d34:	b480      	push	{r7}
     d36:	b083      	sub	sp, #12
     d38:	af00      	add	r7, sp, #0
     d3a:	4603      	mov	r3, r0
     d3c:	460a      	mov	r2, r1
     d3e:	71fb      	strb	r3, [r7, #7]
     d40:	4613      	mov	r3, r2
     d42:	80bb      	strh	r3, [r7, #4]
	   SCU->TIMERS_DIV[tm] = div;
     d44:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     d48:	79fb      	ldrb	r3, [r7, #7]
     d4a:	3330      	adds	r3, #48	; 0x30
     d4c:	005b      	lsls	r3, r3, #1
     d4e:	4413      	add	r3, r2
     d50:	88ba      	ldrh	r2, [r7, #4]
     d52:	809a      	strh	r2, [r3, #4]
}
     d54:	bf00      	nop
     d56:	370c      	adds	r7, #12
     d58:	46bd      	mov	sp, r7
     d5a:	bc80      	pop	{r7}
     d5c:	4770      	bx	lr
	...

00000d60 <I2S_SeletDevice>:
#define I2S_IMR_TX_FIFO_OVERRUN_Pos (5ul) /*!< Position of FIFO_OVERRUN field. */
#define I2S_IMR_TX_FIFO_OVERRUN_Msk (0x01ul << I2S_IMR_TX_FIFO_OVERRUN_Pos) /*!< Bit mask of FIFO_OVERRUN field. */ 


static I2S_Chn_TypeDef  * I2S_SeletDevice(I2S_TypeDef *I2Sx)
{
     d60:	b480      	push	{r7}
     d62:	b083      	sub	sp, #12
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
    if(I2SM == I2Sx)
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	4a05      	ldr	r2, [pc, #20]	; (d80 <I2S_SeletDevice+0x20>)
     d6c:	4293      	cmp	r3, r2
     d6e:	d101      	bne.n	d74 <I2S_SeletDevice+0x14>
        return &I2SM->I2S_Ch;
     d70:	4b04      	ldr	r3, [pc, #16]	; (d84 <I2S_SeletDevice+0x24>)
     d72:	e000      	b.n	d76 <I2S_SeletDevice+0x16>
    else
       return &I2SS->I2S_Ch;
     d74:	4b04      	ldr	r3, [pc, #16]	; (d88 <I2S_SeletDevice+0x28>)
}
     d76:	4618      	mov	r0, r3
     d78:	370c      	adds	r7, #12
     d7a:	46bd      	mov	sp, r7
     d7c:	bc80      	pop	{r7}
     d7e:	4770      	bx	lr
     d80:	90007000 	.word	0x90007000
     d84:	90007020 	.word	0x90007020
     d88:	90007820 	.word	0x90007820

00000d8c <I2S_DeInit>:


void I2S_DeInit(I2S_TypeDef  *I2Sx)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
    #if  defined(BR002)||defined(BR003)
    if(I2Sx==I2SM)
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	4a0a      	ldr	r2, [pc, #40]	; (dc0 <I2S_DeInit+0x34>)
     d98:	4293      	cmp	r3, r2
     d9a:	d103      	bne.n	da4 <I2S_DeInit+0x18>
    {
        SystemDevRstCtl(I2SM_SwRst);
     d9c:	2008      	movs	r0, #8
     d9e:	f7ff fadf 	bl	360 <SystemDevRstCtl>
     da2:	e002      	b.n	daa <I2S_DeInit+0x1e>
    }
    else
    {
        SystemDevRstCtl(I2SS_SwRst);
     da4:	2009      	movs	r0, #9
     da6:	f7ff fadb 	bl	360 <SystemDevRstCtl>
    }
    #endif
    memset(I2Sx, 0, sizeof(DMA_TypeDef));
     daa:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
     dae:	2100      	movs	r1, #0
     db0:	6878      	ldr	r0, [r7, #4]
     db2:	f000 ffe3 	bl	1d7c <memset>
}
     db6:	bf00      	nop
     db8:	3708      	adds	r7, #8
     dba:	46bd      	mov	sp, r7
     dbc:	bd80      	pop	{r7, pc}
     dbe:	bf00      	nop
     dc0:	90007000 	.word	0x90007000

00000dc4 <I2S_GetLeftReceiveData>:


uint32_t  I2S_GetLeftReceiveData(I2S_TypeDef *I2Sx)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b082      	sub	sp, #8
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
    return I2S_SeletDevice(I2Sx)->LRBR;
     dcc:	6878      	ldr	r0, [r7, #4]
     dce:	f7ff ffc7 	bl	d60 <I2S_SeletDevice>
     dd2:	4603      	mov	r3, r0
     dd4:	681b      	ldr	r3, [r3, #0]
}
     dd6:	4618      	mov	r0, r3
     dd8:	3708      	adds	r7, #8
     dda:	46bd      	mov	sp, r7
     ddc:	bd80      	pop	{r7, pc}

00000dde <I2S_GetRightReceiveData>:

uint32_t  I2S_GetRightReceiveData(I2S_TypeDef *I2Sx )
{
     dde:	b580      	push	{r7, lr}
     de0:	b082      	sub	sp, #8
     de2:	af00      	add	r7, sp, #0
     de4:	6078      	str	r0, [r7, #4]
    return I2S_SeletDevice(I2Sx)->RRBR;
     de6:	6878      	ldr	r0, [r7, #4]
     de8:	f7ff ffba 	bl	d60 <I2S_SeletDevice>
     dec:	4603      	mov	r3, r0
     dee:	685b      	ldr	r3, [r3, #4]
}
     df0:	4618      	mov	r0, r3
     df2:	3708      	adds	r7, #8
     df4:	46bd      	mov	sp, r7
     df6:	bd80      	pop	{r7, pc}

00000df8 <I2S_SetLeftTransmitData>:

void  I2S_SetLeftTransmitData(I2S_TypeDef *I2Sx ,uint32_t data)
{
     df8:	b580      	push	{r7, lr}
     dfa:	b082      	sub	sp, #8
     dfc:	af00      	add	r7, sp, #0
     dfe:	6078      	str	r0, [r7, #4]
     e00:	6039      	str	r1, [r7, #0]
    I2S_SeletDevice(I2Sx)->LTHR = data;
     e02:	6878      	ldr	r0, [r7, #4]
     e04:	f7ff ffac 	bl	d60 <I2S_SeletDevice>
     e08:	4602      	mov	r2, r0
     e0a:	683b      	ldr	r3, [r7, #0]
     e0c:	6013      	str	r3, [r2, #0]
}
     e0e:	bf00      	nop
     e10:	3708      	adds	r7, #8
     e12:	46bd      	mov	sp, r7
     e14:	bd80      	pop	{r7, pc}

00000e16 <I2S_SetRightTransmitData>:
void  I2S_SetRightTransmitData(I2S_TypeDef *I2Sx ,uint32_t data)
{
     e16:	b580      	push	{r7, lr}
     e18:	b082      	sub	sp, #8
     e1a:	af00      	add	r7, sp, #0
     e1c:	6078      	str	r0, [r7, #4]
     e1e:	6039      	str	r1, [r7, #0]
    I2S_SeletDevice(I2Sx)->RTHR = data;
     e20:	6878      	ldr	r0, [r7, #4]
     e22:	f7ff ff9d 	bl	d60 <I2S_SeletDevice>
     e26:	4602      	mov	r2, r0
     e28:	683b      	ldr	r3, [r7, #0]
     e2a:	6053      	str	r3, [r2, #4]
}
     e2c:	bf00      	nop
     e2e:	3708      	adds	r7, #8
     e30:	46bd      	mov	sp, r7
     e32:	bd80      	pop	{r7, pc}

00000e34 <I2S_ReceiveFifoReset>:

void  I2S_ReceiveFifoReset(I2S_TypeDef *I2Sx )
{
     e34:	b580      	push	{r7, lr}
     e36:	b082      	sub	sp, #8
     e38:	af00      	add	r7, sp, #0
     e3a:	6078      	str	r0, [r7, #4]
    I2S_SeletDevice(I2Sx)->RFF= ENABLE;
     e3c:	6878      	ldr	r0, [r7, #4]
     e3e:	f7ff ff8f 	bl	d60 <I2S_SeletDevice>
     e42:	4602      	mov	r2, r0
     e44:	2301      	movs	r3, #1
     e46:	6313      	str	r3, [r2, #48]	; 0x30
}
     e48:	bf00      	nop
     e4a:	3708      	adds	r7, #8
     e4c:	46bd      	mov	sp, r7
     e4e:	bd80      	pop	{r7, pc}

00000e50 <I2S_TransmitFifoReset>:
void  I2S_TransmitFifoReset( I2S_TypeDef *I2Sx )
{
     e50:	b580      	push	{r7, lr}
     e52:	b082      	sub	sp, #8
     e54:	af00      	add	r7, sp, #0
     e56:	6078      	str	r0, [r7, #4]
    I2S_SeletDevice(I2Sx)->TFF= ENABLE;
     e58:	6878      	ldr	r0, [r7, #4]
     e5a:	f7ff ff81 	bl	d60 <I2S_SeletDevice>
     e5e:	4602      	mov	r2, r0
     e60:	2301      	movs	r3, #1
     e62:	6353      	str	r3, [r2, #52]	; 0x34
}
     e64:	bf00      	nop
     e66:	3708      	adds	r7, #8
     e68:	46bd      	mov	sp, r7
     e6a:	bd80      	pop	{r7, pc}

00000e6c <I2S_GeneratrClock>:


void I2S_GeneratrClock(I2S_TypeDef *I2Sx,bool status)
{
     e6c:	b480      	push	{r7}
     e6e:	b083      	sub	sp, #12
     e70:	af00      	add	r7, sp, #0
     e72:	6078      	str	r0, [r7, #4]
     e74:	460b      	mov	r3, r1
     e76:	70fb      	strb	r3, [r7, #3]
    if(status)
     e78:	78fb      	ldrb	r3, [r7, #3]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d003      	beq.n	e86 <I2S_GeneratrClock+0x1a>
        I2Sx->CER  = ENABLE;
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	2201      	movs	r2, #1
     e82:	60da      	str	r2, [r3, #12]
    else
        I2Sx->CER  = DISABLE;
    
}
     e84:	e002      	b.n	e8c <I2S_GeneratrClock+0x20>
        I2Sx->CER  = DISABLE;
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	2200      	movs	r2, #0
     e8a:	60da      	str	r2, [r3, #12]
}
     e8c:	bf00      	nop
     e8e:	370c      	adds	r7, #12
     e90:	46bd      	mov	sp, r7
     e92:	bc80      	pop	{r7}
     e94:	4770      	bx	lr

00000e96 <I2S_SetInterruptMask>:

void I2S_SetInterruptMask(I2S_TypeDef *I2Sx, I2S_IntCtlMask *IntCtlMask)
{
     e96:	b580      	push	{r7, lr}
     e98:	b084      	sub	sp, #16
     e9a:	af00      	add	r7, sp, #0
     e9c:	6078      	str	r0, [r7, #4]
     e9e:	6039      	str	r1, [r7, #0]
    I2S_Chn_TypeDef *device_chn = I2S_SeletDevice(I2Sx);
     ea0:	6878      	ldr	r0, [r7, #4]
     ea2:	f7ff ff5d 	bl	d60 <I2S_SeletDevice>
     ea6:	60f8      	str	r0, [r7, #12]

    device_chn->IMR = ((IntCtlMask->rx_dma_available_interrupt_mask<<I2S_IMR_RX_DAM_Pos)|
     ea8:	683b      	ldr	r3, [r7, #0]
     eaa:	78db      	ldrb	r3, [r3, #3]
     eac:	461a      	mov	r2, r3
        (IntCtlMask->rx_fifo_overrun_interrupt_mask<<I2S_IMR_RX_FIFO_OVERRUN_Pos)|
     eae:	683b      	ldr	r3, [r7, #0]
     eb0:	789b      	ldrb	r3, [r3, #2]
     eb2:	005b      	lsls	r3, r3, #1
    device_chn->IMR = ((IntCtlMask->rx_dma_available_interrupt_mask<<I2S_IMR_RX_DAM_Pos)|
     eb4:	431a      	orrs	r2, r3
        (IntCtlMask->tx_fifo_empty_interrupt_mask<<I2S_IMR_TX_FIFO_EMPTY_Pos)|
     eb6:	683b      	ldr	r3, [r7, #0]
     eb8:	785b      	ldrb	r3, [r3, #1]
     eba:	011b      	lsls	r3, r3, #4
        (IntCtlMask->rx_fifo_overrun_interrupt_mask<<I2S_IMR_RX_FIFO_OVERRUN_Pos)|
     ebc:	431a      	orrs	r2, r3
        (IntCtlMask->tx_fifo_overrun_interrupt_mask<<I2S_IMR_TX_FIFO_OVERRUN_Pos)); 
     ebe:	683b      	ldr	r3, [r7, #0]
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	015b      	lsls	r3, r3, #5
        (IntCtlMask->tx_fifo_empty_interrupt_mask<<I2S_IMR_TX_FIFO_EMPTY_Pos)|
     ec4:	4313      	orrs	r3, r2
     ec6:	461a      	mov	r2, r3
    device_chn->IMR = ((IntCtlMask->rx_dma_available_interrupt_mask<<I2S_IMR_RX_DAM_Pos)|
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	61da      	str	r2, [r3, #28]

}
     ecc:	bf00      	nop
     ece:	3710      	adds	r7, #16
     ed0:	46bd      	mov	sp, r7
     ed2:	bd80      	pop	{r7, pc}

00000ed4 <I2S_Init>:


void I2S_Init(I2S_TypeDef *I2Sx , I2S_InitInof_Type  *I2S_InitStru)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	b084      	sub	sp, #16
     ed8:	af00      	add	r7, sp, #0
     eda:	6078      	str	r0, [r7, #4]
     edc:	6039      	str	r1, [r7, #0]
    I2S_Chn_TypeDef *device_chn = I2S_SeletDevice(I2Sx);
     ede:	6878      	ldr	r0, [r7, #4]
     ee0:	f7ff ff3e 	bl	d60 <I2S_SeletDevice>
     ee4:	60f8      	str	r0, [r7, #12]
    I2Sx->IER = DISABLE;
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	2200      	movs	r2, #0
     eea:	601a      	str	r2, [r3, #0]
    I2S_GeneratrClock(I2Sx,false);
     eec:	2100      	movs	r1, #0
     eee:	6878      	ldr	r0, [r7, #4]
     ef0:	f7ff ffbc 	bl	e6c <I2S_GeneratrClock>
    I2Sx->CCR = (I2S_InitStru->clock_gating_type | I2S_InitStru->clock_type<<I2S_CCR_WSS_Pos);
     ef4:	683b      	ldr	r3, [r7, #0]
     ef6:	789b      	ldrb	r3, [r3, #2]
     ef8:	461a      	mov	r2, r3
     efa:	683b      	ldr	r3, [r7, #0]
     efc:	785b      	ldrb	r3, [r3, #1]
     efe:	00db      	lsls	r3, r3, #3
     f00:	4313      	orrs	r3, r2
     f02:	461a      	mov	r2, r3
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	611a      	str	r2, [r3, #16]
  
    if(I2S_IS_RX_MODE(I2S_InitStru->dirct_type))
     f08:	683b      	ldr	r3, [r7, #0]
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	f003 0301 	and.w	r3, r3, #1
     f10:	2b00      	cmp	r3, #0
     f12:	d015      	beq.n	f40 <I2S_Init+0x6c>
    {   
        device_chn->RER  = DISABLE;
     f14:	68fb      	ldr	r3, [r7, #12]
     f16:	2200      	movs	r2, #0
     f18:	609a      	str	r2, [r3, #8]
        device_chn->RCR  = I2S_InitStru->data_resl_type ;
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	78db      	ldrb	r3, [r3, #3]
     f1e:	461a      	mov	r2, r3
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	611a      	str	r2, [r3, #16]
        device_chn->RFCR = I2S_InitStru->interrupt_level;
     f24:	683b      	ldr	r3, [r7, #0]
     f26:	791b      	ldrb	r3, [r3, #4]
     f28:	461a      	mov	r2, r3
     f2a:	68fb      	ldr	r3, [r7, #12]
     f2c:	629a      	str	r2, [r3, #40]	; 0x28
        
        device_chn->RER = ENABLE; 
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	2201      	movs	r2, #1
     f32:	609a      	str	r2, [r3, #8]
        I2Sx->IRER  = ENABLE;
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	2201      	movs	r2, #1
     f38:	605a      	str	r2, [r3, #4]
        I2Sx->RXFFR = ENABLE;     
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	2201      	movs	r2, #1
     f3e:	615a      	str	r2, [r3, #20]
    }

    if(I2S_IS_TX_MODE(I2S_InitStru->dirct_type))
     f40:	683b      	ldr	r3, [r7, #0]
     f42:	781b      	ldrb	r3, [r3, #0]
     f44:	f003 0302 	and.w	r3, r3, #2
     f48:	2b00      	cmp	r3, #0
     f4a:	d015      	beq.n	f78 <I2S_Init+0xa4>
    {
        device_chn->TER = DISABLE;
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	2200      	movs	r2, #0
     f50:	60da      	str	r2, [r3, #12]
        device_chn->TCR=  I2S_InitStru->data_resl_type;
     f52:	683b      	ldr	r3, [r7, #0]
     f54:	78db      	ldrb	r3, [r3, #3]
     f56:	461a      	mov	r2, r3
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	615a      	str	r2, [r3, #20]
        device_chn->TFCR= I2S_InitStru->interrupt_level;
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	791b      	ldrb	r3, [r3, #4]
     f60:	461a      	mov	r2, r3
     f62:	68fb      	ldr	r3, [r7, #12]
     f64:	62da      	str	r2, [r3, #44]	; 0x2c
        
        device_chn->TER=ENABLE;
     f66:	68fb      	ldr	r3, [r7, #12]
     f68:	2201      	movs	r2, #1
     f6a:	60da      	str	r2, [r3, #12]
        I2Sx->ITER  = ENABLE;
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	2201      	movs	r2, #1
     f70:	609a      	str	r2, [r3, #8]
        I2Sx->TXFFR = ENABLE;
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	2201      	movs	r2, #1
     f76:	619a      	str	r2, [r3, #24]
    }
    
    I2S_SetInterruptMask(I2Sx,&I2S_InitStru->IntCtlMask);
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	3305      	adds	r3, #5
     f7c:	4619      	mov	r1, r3
     f7e:	6878      	ldr	r0, [r7, #4]
     f80:	f7ff ff89 	bl	e96 <I2S_SetInterruptMask>
    I2Sx->IER = ENABLE;
     f84:	687b      	ldr	r3, [r7, #4]
     f86:	2201      	movs	r2, #1
     f88:	601a      	str	r2, [r3, #0]
    I2S_ReceiveFifoReset(I2Sx);
     f8a:	6878      	ldr	r0, [r7, #4]
     f8c:	f7ff ff52 	bl	e34 <I2S_ReceiveFifoReset>
    I2S_TransmitFifoReset(I2Sx);
     f90:	6878      	ldr	r0, [r7, #4]
     f92:	f7ff ff5d 	bl	e50 <I2S_TransmitFifoReset>
        

}
     f96:	bf00      	nop
     f98:	3710      	adds	r7, #16
     f9a:	46bd      	mov	sp, r7
     f9c:	bd80      	pop	{r7, pc}

00000f9e <I2S_GetInterruptStatus>:

bool  I2S_GetInterruptStatus(I2S_TypeDef *I2Sx,I2S_Interrupt_Type  interrupt_type)
{
     f9e:	b580      	push	{r7, lr}
     fa0:	b082      	sub	sp, #8
     fa2:	af00      	add	r7, sp, #0
     fa4:	6078      	str	r0, [r7, #4]
     fa6:	460b      	mov	r3, r1
     fa8:	70fb      	strb	r3, [r7, #3]
    switch(interrupt_type)
     faa:	78fb      	ldrb	r3, [r7, #3]
     fac:	2b03      	cmp	r3, #3
     fae:	d842      	bhi.n	1036 <Stack_Size+0x36>
     fb0:	a201      	add	r2, pc, #4	; (adr r2, fb8 <I2S_GetInterruptStatus+0x1a>)
     fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fb6:	bf00      	nop
     fb8:	00000fc9 	.word	0x00000fc9
     fbc:	00000fe3 	.word	0x00000fe3
     fc0:	00000fff 	.word	0x00000fff
     fc4:	0000101b 	.word	0x0000101b
    {
        case I2S_RX_AVAILABLE_DAM:
            return(( I2S_SeletDevice(I2Sx)->ISR>>I2S_IMR_RX_DAM_Pos)&0x01);
     fc8:	6878      	ldr	r0, [r7, #4]
     fca:	f7ff fec9 	bl	d60 <I2S_SeletDevice>
     fce:	4603      	mov	r3, r0
     fd0:	699b      	ldr	r3, [r3, #24]
     fd2:	f003 0301 	and.w	r3, r3, #1
     fd6:	2b00      	cmp	r3, #0
     fd8:	bf14      	ite	ne
     fda:	2301      	movne	r3, #1
     fdc:	2300      	moveq	r3, #0
     fde:	b2db      	uxtb	r3, r3
     fe0:	e02a      	b.n	1038 <Stack_Size+0x38>
        case I2S_RX_FIFO_OVERRUN:
            return(( I2S_SeletDevice(I2Sx)->ISR>>I2S_IMR_RX_FIFO_OVERRUN_Pos)&0x01);
     fe2:	6878      	ldr	r0, [r7, #4]
     fe4:	f7ff febc 	bl	d60 <I2S_SeletDevice>
     fe8:	4603      	mov	r3, r0
     fea:	699b      	ldr	r3, [r3, #24]
     fec:	085b      	lsrs	r3, r3, #1
     fee:	f003 0301 	and.w	r3, r3, #1
     ff2:	2b00      	cmp	r3, #0
     ff4:	bf14      	ite	ne
     ff6:	2301      	movne	r3, #1
     ff8:	2300      	moveq	r3, #0
     ffa:	b2db      	uxtb	r3, r3
     ffc:	e01c      	b.n	1038 <Stack_Size+0x38>
        case I2S_TX_FIFO_EMPTY:
            return(( I2S_SeletDevice(I2Sx)->ISR>>I2S_IMR_TX_FIFO_EMPTY_Pos)&0x01);
     ffe:	6878      	ldr	r0, [r7, #4]
    1000:	f7ff feae 	bl	d60 <I2S_SeletDevice>
    1004:	4603      	mov	r3, r0
    1006:	699b      	ldr	r3, [r3, #24]
    1008:	091b      	lsrs	r3, r3, #4
    100a:	f003 0301 	and.w	r3, r3, #1
    100e:	2b00      	cmp	r3, #0
    1010:	bf14      	ite	ne
    1012:	2301      	movne	r3, #1
    1014:	2300      	moveq	r3, #0
    1016:	b2db      	uxtb	r3, r3
    1018:	e00e      	b.n	1038 <Stack_Size+0x38>
        case I2S_TX_FIFO_OVERRUN:
            return(( I2S_SeletDevice(I2Sx)->ISR>>I2S_IMR_TX_FIFO_OVERRUN_Pos)&0x01);
    101a:	6878      	ldr	r0, [r7, #4]
    101c:	f7ff fea0 	bl	d60 <I2S_SeletDevice>
    1020:	4603      	mov	r3, r0
    1022:	699b      	ldr	r3, [r3, #24]
    1024:	095b      	lsrs	r3, r3, #5
    1026:	f003 0301 	and.w	r3, r3, #1
    102a:	2b00      	cmp	r3, #0
    102c:	bf14      	ite	ne
    102e:	2301      	movne	r3, #1
    1030:	2300      	moveq	r3, #0
    1032:	b2db      	uxtb	r3, r3
    1034:	e000      	b.n	1038 <Stack_Size+0x38>
    }
    return false;
    1036:	2300      	movs	r3, #0
}
    1038:	4618      	mov	r0, r3
    103a:	3708      	adds	r7, #8
    103c:	46bd      	mov	sp, r7
    103e:	bd80      	pop	{r7, pc}

00001040 <I2S_ClearRxOverrunInterrupt>:


bool  I2S_ClearRxOverrunInterrupt(I2S_TypeDef *I2Sx)
{
    1040:	b580      	push	{r7, lr}
    1042:	b082      	sub	sp, #8
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
    return( I2S_SeletDevice(I2Sx)->ROR&0x01);
    1048:	6878      	ldr	r0, [r7, #4]
    104a:	f7ff fe89 	bl	d60 <I2S_SeletDevice>
    104e:	4603      	mov	r3, r0
    1050:	6a1b      	ldr	r3, [r3, #32]
    1052:	f003 0301 	and.w	r3, r3, #1
    1056:	2b00      	cmp	r3, #0
    1058:	bf14      	ite	ne
    105a:	2301      	movne	r3, #1
    105c:	2300      	moveq	r3, #0
    105e:	b2db      	uxtb	r3, r3
}
    1060:	4618      	mov	r0, r3
    1062:	3708      	adds	r7, #8
    1064:	46bd      	mov	sp, r7
    1066:	bd80      	pop	{r7, pc}

00001068 <I2S_ClearTxOverrunInterrupt>:

bool  I2S_ClearTxOverrunInterrupt(I2S_TypeDef *I2Sx)
{
    1068:	b580      	push	{r7, lr}
    106a:	b082      	sub	sp, #8
    106c:	af00      	add	r7, sp, #0
    106e:	6078      	str	r0, [r7, #4]
    return( I2S_SeletDevice(I2Sx)->TOR&0x01);
    1070:	6878      	ldr	r0, [r7, #4]
    1072:	f7ff fe75 	bl	d60 <I2S_SeletDevice>
    1076:	4603      	mov	r3, r0
    1078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    107a:	f003 0301 	and.w	r3, r3, #1
    107e:	2b00      	cmp	r3, #0
    1080:	bf14      	ite	ne
    1082:	2301      	movne	r3, #1
    1084:	2300      	moveq	r3, #0
    1086:	b2db      	uxtb	r3, r3
}
    1088:	4618      	mov	r0, r3
    108a:	3708      	adds	r7, #8
    108c:	46bd      	mov	sp, r7
    108e:	bd80      	pop	{r7, pc}

00001090 <I2S_ResetTxDma>:


void I2S_ResetTxDma(I2S_TypeDef *I2Sx )
{
    1090:	b480      	push	{r7}
    1092:	b083      	sub	sp, #12
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
    I2Sx->RTXDMA = ENABLE;
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	2201      	movs	r2, #1
    109c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
}
    10a0:	bf00      	nop
    10a2:	370c      	adds	r7, #12
    10a4:	46bd      	mov	sp, r7
    10a6:	bc80      	pop	{r7}
    10a8:	4770      	bx	lr

000010aa <I2S_ResetRxDma>:

void I2S_ResetRxDma(I2S_TypeDef *I2Sx )
{
    10aa:	b480      	push	{r7}
    10ac:	b083      	sub	sp, #12
    10ae:	af00      	add	r7, sp, #0
    10b0:	6078      	str	r0, [r7, #4]
    I2Sx->RRXDMA=ENABLE;
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	2201      	movs	r2, #1
    10b6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
}
    10ba:	bf00      	nop
    10bc:	370c      	adds	r7, #12
    10be:	46bd      	mov	sp, r7
    10c0:	bc80      	pop	{r7}
    10c2:	4770      	bx	lr

000010c4 <I2S_GetTxDmaPr>:

uint32_t I2S_GetTxDmaPr(I2S_TypeDef *I2Sx)
{
    10c4:	b480      	push	{r7}
    10c6:	b083      	sub	sp, #12
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
    return (uint32_t)&(I2Sx->TXDMA);
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
}
    10d2:	4618      	mov	r0, r3
    10d4:	370c      	adds	r7, #12
    10d6:	46bd      	mov	sp, r7
    10d8:	bc80      	pop	{r7}
    10da:	4770      	bx	lr

000010dc <I2S_GetRxDmaPr>:

uint32_t  I2S_GetRxDmaPr(I2S_TypeDef *I2Sx )
{
    10dc:	b480      	push	{r7}
    10de:	b083      	sub	sp, #12
    10e0:	af00      	add	r7, sp, #0
    10e2:	6078      	str	r0, [r7, #4]
    return (uint32_t)&(I2Sx->RXDMA);
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
}
    10ea:	4618      	mov	r0, r3
    10ec:	370c      	adds	r7, #12
    10ee:	46bd      	mov	sp, r7
    10f0:	bc80      	pop	{r7}
    10f2:	4770      	bx	lr

000010f4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    10f4:	b480      	push	{r7}
    10f6:	b083      	sub	sp, #12
    10f8:	af00      	add	r7, sp, #0
    10fa:	4603      	mov	r3, r0
    10fc:	6039      	str	r1, [r7, #0]
    10fe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1100:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1104:	2b00      	cmp	r3, #0
    1106:	da0b      	bge.n	1120 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1108:	683b      	ldr	r3, [r7, #0]
    110a:	b2da      	uxtb	r2, r3
    110c:	490c      	ldr	r1, [pc, #48]	; (1140 <NVIC_SetPriority+0x4c>)
    110e:	79fb      	ldrb	r3, [r7, #7]
    1110:	f003 030f 	and.w	r3, r3, #15
    1114:	3b04      	subs	r3, #4
    1116:	0152      	lsls	r2, r2, #5
    1118:	b2d2      	uxtb	r2, r2
    111a:	440b      	add	r3, r1
    111c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
    111e:	e009      	b.n	1134 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1120:	683b      	ldr	r3, [r7, #0]
    1122:	b2da      	uxtb	r2, r3
    1124:	4907      	ldr	r1, [pc, #28]	; (1144 <NVIC_SetPriority+0x50>)
    1126:	f997 3007 	ldrsb.w	r3, [r7, #7]
    112a:	0152      	lsls	r2, r2, #5
    112c:	b2d2      	uxtb	r2, r2
    112e:	440b      	add	r3, r1
    1130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1134:	bf00      	nop
    1136:	370c      	adds	r7, #12
    1138:	46bd      	mov	sp, r7
    113a:	bc80      	pop	{r7}
    113c:	4770      	bx	lr
    113e:	bf00      	nop
    1140:	e000ed00 	.word	0xe000ed00
    1144:	e000e100 	.word	0xe000e100

00001148 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);           /* Reload value impossible */
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	3b01      	subs	r3, #1
    1154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1158:	d301      	bcc.n	115e <SysTick_Config+0x16>
    115a:	2301      	movs	r3, #1
    115c:	e00f      	b.n	117e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                       /* set reload register */
    115e:	4a0a      	ldr	r2, [pc, #40]	; (1188 <SysTick_Config+0x40>)
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	3b01      	subs	r3, #1
    1164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);       /* set Priority for Systick Interrupt */
    1166:	2107      	movs	r1, #7
    1168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    116c:	f7ff ffc2 	bl	10f4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                               /* Load the SysTick Counter Value */
    1170:	4b05      	ldr	r3, [pc, #20]	; (1188 <SysTick_Config+0x40>)
    1172:	2200      	movs	r2, #0
    1174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1176:	4b04      	ldr	r3, [pc, #16]	; (1188 <SysTick_Config+0x40>)
    1178:	2207      	movs	r2, #7
    117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                       /* Function successful */
    117c:	2300      	movs	r3, #0
}
    117e:	4618      	mov	r0, r3
    1180:	3708      	adds	r7, #8
    1182:	46bd      	mov	sp, r7
    1184:	bd80      	pop	{r7, pc}
    1186:	bf00      	nop
    1188:	e000e010 	.word	0xe000e010

0000118c <VerifyIsGo>:
void Verify_SendEndSimulation(void);


/* Get a run Case Falg*/
bool VerifyIsGo(void)
{
    118c:	b480      	push	{r7}
    118e:	af00      	add	r7, sp, #0
    if(VERIFY_RUN_CF)
    1190:	4b07      	ldr	r3, [pc, #28]	; (11b0 <VerifyIsGo+0x24>)
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	b2db      	uxtb	r3, r3
    1196:	2b00      	cmp	r3, #0
    1198:	d004      	beq.n	11a4 <VerifyIsGo+0x18>
    {
        VERIFY_RUN_CF = false;
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <VerifyIsGo+0x24>)
    119c:	2200      	movs	r2, #0
    119e:	701a      	strb	r2, [r3, #0]
        return true;
    11a0:	2301      	movs	r3, #1
    11a2:	e000      	b.n	11a6 <VerifyIsGo+0x1a>
    }
    return false;
    11a4:	2300      	movs	r3, #0
}
    11a6:	4618      	mov	r0, r3
    11a8:	46bd      	mov	sp, r7
    11aa:	bc80      	pop	{r7}
    11ac:	4770      	bx	lr
    11ae:	bf00      	nop
    11b0:	200081f4 	.word	0x200081f4

000011b4 <VerifyRunCase>:

/* Set a run Case Falg*/
void VerifyRunCase(void)
{
    11b4:	b480      	push	{r7}
    11b6:	af00      	add	r7, sp, #0
    VERIFY_RUN_CF = true ;
    11b8:	4b03      	ldr	r3, [pc, #12]	; (11c8 <VerifyRunCase+0x14>)
    11ba:	2201      	movs	r2, #1
    11bc:	701a      	strb	r2, [r3, #0]
}
    11be:	bf00      	nop
    11c0:	46bd      	mov	sp, r7
    11c2:	bc80      	pop	{r7}
    11c4:	4770      	bx	lr
    11c6:	bf00      	nop
    11c8:	200081f4 	.word	0x200081f4

000011cc <verify_messageGetRunCid>:

/* Get current Case ID*/
uint32_t  verify_messageGetRunCid(void)
{
    11cc:	b480      	push	{r7}
    11ce:	b083      	sub	sp, #12
    11d0:	af00      	add	r7, sp, #0
    uint32_t  cid = VERIFY_MESSGAE_RUN_CID;
    11d2:	4b04      	ldr	r3, [pc, #16]	; (11e4 <verify_messageGetRunCid+0x18>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	607b      	str	r3, [r7, #4]
    return cid; 
    11d8:	687b      	ldr	r3, [r7, #4]
}
    11da:	4618      	mov	r0, r3
    11dc:	370c      	adds	r7, #12
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr
    11e4:	200081ec 	.word	0x200081ec

000011e8 <Verify_messageSend>:



/* Send a message to UVM*/
void Verify_messageSend(uint32_t cmd, uint32_t val)
{
    11e8:	b480      	push	{r7}
    11ea:	b083      	sub	sp, #12
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
    11f0:	6039      	str	r1, [r7, #0]
    SCU->SEND_DATA  = val;
    11f2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    11f6:	683b      	ldr	r3, [r7, #0]
    11f8:	63d3      	str	r3, [r2, #60]	; 0x3c
    SCU->SEND_CMD   = cmd;
    11fa:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    11fe:	687b      	ldr	r3, [r7, #4]
    1200:	6393      	str	r3, [r2, #56]	; 0x38
}
    1202:	bf00      	nop
    1204:	370c      	adds	r7, #12
    1206:	46bd      	mov	sp, r7
    1208:	bc80      	pop	{r7}
    120a:	4770      	bx	lr

0000120c <Verify_FmessageSend>:

/* Send a message to UVM*/
void Verify_FmessageSend(uint32_t cmd, uint32_t val)
{
    120c:	b480      	push	{r7}
    120e:	b083      	sub	sp, #12
    1210:	af00      	add	r7, sp, #0
    1212:	6078      	str	r0, [r7, #4]
    1214:	6039      	str	r1, [r7, #0]
    SCU->READ_DATA = val;
    1216:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	6453      	str	r3, [r2, #68]	; 0x44
    SCU->READ_CMD  = cmd ;
    121e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	6413      	str	r3, [r2, #64]	; 0x40
}
    1226:	bf00      	nop
    1228:	370c      	adds	r7, #12
    122a:	46bd      	mov	sp, r7
    122c:	bc80      	pop	{r7}
    122e:	4770      	bx	lr

00001230 <Verify_messageReceive>:



/* Receive a message to UVM*/
bool Verify_messageReceive(uint32_t *cmd, uint32_t *val)
{
    1230:	b480      	push	{r7}
    1232:	b083      	sub	sp, #12
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
    1238:	6039      	str	r1, [r7, #0]
    while(SCU->READ_CMD == VERIFY_MESSGAE_CMD){};
    123a:	bf00      	nop
    123c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1242:	4b0c      	ldr	r3, [pc, #48]	; (1274 <Verify_messageReceive+0x44>)
    1244:	681b      	ldr	r3, [r3, #0]
    1246:	429a      	cmp	r2, r3
    1248:	d0f8      	beq.n	123c <Verify_messageReceive+0xc>
    *cmd   = SCU->READ_CMD;
    124a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    124e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	601a      	str	r2, [r3, #0]
    *val = SCU->READ_DATA;
    1254:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	601a      	str	r2, [r3, #0]
    VERIFY_MESSGAE_CMD = *cmd;
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	4a04      	ldr	r2, [pc, #16]	; (1274 <Verify_messageReceive+0x44>)
    1264:	6013      	str	r3, [r2, #0]
    return true;
    1266:	2301      	movs	r3, #1
}
    1268:	4618      	mov	r0, r3
    126a:	370c      	adds	r7, #12
    126c:	46bd      	mov	sp, r7
    126e:	bc80      	pop	{r7}
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	200081f0 	.word	0x200081f0

00001278 <Verify_messageGetRData>:



/* Receive a message to UVM*/
bool Verify_messageGetRData(uint32_t *cmd, uint32_t *val)
{
    1278:	b480      	push	{r7}
    127a:	b083      	sub	sp, #12
    127c:	af00      	add	r7, sp, #0
    127e:	6078      	str	r0, [r7, #4]
    1280:	6039      	str	r1, [r7, #0]
   
    *cmd  = SCU->READ_CMD;
    1282:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	601a      	str	r2, [r3, #0]
    *val  = SCU->READ_DATA;
    128c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1292:	683b      	ldr	r3, [r7, #0]
    1294:	601a      	str	r2, [r3, #0]
    return true;
    1296:	2301      	movs	r3, #1
}
    1298:	4618      	mov	r0, r3
    129a:	370c      	adds	r7, #12
    129c:	46bd      	mov	sp, r7
    129e:	bc80      	pop	{r7}
    12a0:	4770      	bx	lr

000012a2 <verify_messageGetReceive>:


/* Get current UVM message*/
bool verify_messageGetReceive(uint32_t *cmd, uint32_t *val)
{
    12a2:	b480      	push	{r7}
    12a4:	b083      	sub	sp, #12
    12a6:	af00      	add	r7, sp, #0
    12a8:	6078      	str	r0, [r7, #4]
    12aa:	6039      	str	r1, [r7, #0]
    if(SCU->READ_CMD != VERIFY_MESSGAE_CMD)
    12ac:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    12b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    12b2:	4b10      	ldr	r3, [pc, #64]	; (12f4 <verify_messageGetReceive+0x52>)
    12b4:	681b      	ldr	r3, [r3, #0]
    12b6:	429a      	cmp	r2, r3
    12b8:	d00f      	beq.n	12da <verify_messageGetReceive+0x38>
    {
        *cmd    = SCU->READ_CMD;
    12ba:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    12be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	601a      	str	r2, [r3, #0]
        *val    = SCU->READ_DATA;
    12c4:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    12c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	601a      	str	r2, [r3, #0]
        VERIFY_MESSGAE_CMD = *cmd;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	4a08      	ldr	r2, [pc, #32]	; (12f4 <verify_messageGetReceive+0x52>)
    12d4:	6013      	str	r3, [r2, #0]
        return true;
    12d6:	2301      	movs	r3, #1
    12d8:	e006      	b.n	12e8 <verify_messageGetReceive+0x46>
    }
    else
    {   
        *cmd = 0;
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	2200      	movs	r2, #0
    12de:	601a      	str	r2, [r3, #0]
        *val =0;
    12e0:	683b      	ldr	r3, [r7, #0]
    12e2:	2200      	movs	r2, #0
    12e4:	601a      	str	r2, [r3, #0]
        return false;
    12e6:	2300      	movs	r3, #0
    }
    
}
    12e8:	4618      	mov	r0, r3
    12ea:	370c      	adds	r7, #12
    12ec:	46bd      	mov	sp, r7
    12ee:	bc80      	pop	{r7}
    12f0:	4770      	bx	lr
    12f2:	bf00      	nop
    12f4:	200081f0 	.word	0x200081f0

000012f8 <verify_SendRunCaseId>:


/* Contorl Run a case*/
void verify_SendRunCaseId(uint32_t Cid)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	b082      	sub	sp, #8
    12fc:	af00      	add	r7, sp, #0
    12fe:	6078      	str	r0, [r7, #4]
    Verify_messageSend(BRCASE_RID,Cid);
    1300:	6879      	ldr	r1, [r7, #4]
    1302:	2001      	movs	r0, #1
    1304:	f7ff ff70 	bl	11e8 <Verify_messageSend>
    VerifyRunCase();
    1308:	f7ff ff54 	bl	11b4 <VerifyRunCase>
}
    130c:	bf00      	nop
    130e:	3708      	adds	r7, #8
    1310:	46bd      	mov	sp, r7
    1312:	bd80      	pop	{r7, pc}

00001314 <Verify_messageCheckRececive>:

/* Check that the run instruction is received */
bool Verify_messageCheckRececive(void)
{
    1314:	b580      	push	{r7, lr}
    1316:	b082      	sub	sp, #8
    1318:	af00      	add	r7, sp, #0
    uint32_t cid  =0;
    131a:	2300      	movs	r3, #0
    131c:	607b      	str	r3, [r7, #4]
    uint32_t data =0;
    131e:	2300      	movs	r3, #0
    1320:	603b      	str	r3, [r7, #0]
    verify_messageGetReceive(&cid,&data);
    1322:	463a      	mov	r2, r7
    1324:	1d3b      	adds	r3, r7, #4
    1326:	4611      	mov	r1, r2
    1328:	4618      	mov	r0, r3
    132a:	f7ff ffba 	bl	12a2 <verify_messageGetReceive>
    if(cid == BRCASE_RID)
    132e:	687b      	ldr	r3, [r7, #4]
    1330:	2b01      	cmp	r3, #1
    1332:	d10a      	bne.n	134a <Verify_messageCheckRececive+0x36>
    {
        VERIFY_MESSGAE_RUN_CID = data;
    1334:	683b      	ldr	r3, [r7, #0]
    1336:	4a07      	ldr	r2, [pc, #28]	; (1354 <Verify_messageCheckRececive+0x40>)
    1338:	6013      	str	r3, [r2, #0]
#ifndef BR_DUAL
        Verify_messageSend(BRCASE_RID,1);
    133a:	2101      	movs	r1, #1
    133c:	2001      	movs	r0, #1
    133e:	f7ff ff53 	bl	11e8 <Verify_messageSend>
#endif 
        VerifyRunCase();
    1342:	f7ff ff37 	bl	11b4 <VerifyRunCase>
        return true;
    1346:	2301      	movs	r3, #1
    1348:	e000      	b.n	134c <Verify_messageCheckRececive+0x38>
    }
   return false;
    134a:	2300      	movs	r3, #0
}
    134c:	4618      	mov	r0, r3
    134e:	3708      	adds	r7, #8
    1350:	46bd      	mov	sp, r7
    1352:	bd80      	pop	{r7, pc}
    1354:	200081ec 	.word	0x200081ec

00001358 <verify_SendCid>:

/****************************************************
Send Case ID ->UVM 
*****************************************************/
bool verify_SendCid(uint32_t cid,uint32_t *data)
{
    1358:	b580      	push	{r7, lr}
    135a:	b086      	sub	sp, #24
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	6039      	str	r1, [r7, #0]
    bool sut = true;
    1362:	2301      	movs	r3, #1
    1364:	75fb      	strb	r3, [r7, #23]
#ifndef BR_NO_UVM
    uint32_t cd=0,va=0;
    1366:	2300      	movs	r3, #0
    1368:	613b      	str	r3, [r7, #16]
    136a:	2300      	movs	r3, #0
    136c:	60fb      	str	r3, [r7, #12]
      
    Verify_messageSend(BRCASE_CID,cid);
    136e:	6879      	ldr	r1, [r7, #4]
    1370:	2002      	movs	r0, #2
    1372:	f7ff ff39 	bl	11e8 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    1376:	f107 020c 	add.w	r2, r7, #12
    137a:	f107 0310 	add.w	r3, r7, #16
    137e:	4611      	mov	r1, r2
    1380:	4618      	mov	r0, r3
    1382:	f7ff ff55 	bl	1230 <Verify_messageReceive>
    if(!(cd == BRCASE_CID && va != 0))
    1386:	693b      	ldr	r3, [r7, #16]
    1388:	2b02      	cmp	r3, #2
    138a:	d102      	bne.n	1392 <verify_SendCid+0x3a>
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	2b00      	cmp	r3, #0
    1390:	d101      	bne.n	1396 <verify_SendCid+0x3e>
        sut =false;
    1392:	2300      	movs	r3, #0
    1394:	75fb      	strb	r3, [r7, #23]
    *data = va;
    1396:	68fa      	ldr	r2, [r7, #12]
    1398:	683b      	ldr	r3, [r7, #0]
    139a:	601a      	str	r2, [r3, #0]
#endif  
    return sut;   
    139c:	7dfb      	ldrb	r3, [r7, #23]
  
}
    139e:	4618      	mov	r0, r3
    13a0:	3718      	adds	r7, #24
    13a2:	46bd      	mov	sp, r7
    13a4:	bd80      	pop	{r7, pc}

000013a6 <verify_step_SendCheckData>:

/*
Step by step to verify,CPU Send and UVM Check
*/
bool verify_step_SendCheckData(uint32_t step,func_handle func)
{
    13a6:	b580      	push	{r7, lr}
    13a8:	b086      	sub	sp, #24
    13aa:	af00      	add	r7, sp, #0
    13ac:	6078      	str	r0, [r7, #4]
    13ae:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    13b0:	2300      	movs	r3, #0
    13b2:	613b      	str	r3, [r7, #16]
    13b4:	2300      	movs	r3, #0
    13b6:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    13b8:	2301      	movs	r3, #1
    13ba:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(step,0);
    13bc:	2100      	movs	r1, #0
    13be:	6878      	ldr	r0, [r7, #4]
    13c0:	f7ff ff12 	bl	11e8 <Verify_messageSend>
    func();
    13c4:	683b      	ldr	r3, [r7, #0]
    13c6:	4798      	blx	r3
    Verify_messageReceive(&cd,&va);
    13c8:	f107 020c 	add.w	r2, r7, #12
    13cc:	f107 0310 	add.w	r3, r7, #16
    13d0:	4611      	mov	r1, r2
    13d2:	4618      	mov	r0, r3
    13d4:	f7ff ff2c 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    13d8:	693b      	ldr	r3, [r7, #16]
    13da:	687a      	ldr	r2, [r7, #4]
    13dc:	429a      	cmp	r2, r3
    13de:	d102      	bne.n	13e6 <verify_step_SendCheckData+0x40>
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	2b01      	cmp	r3, #1
    13e4:	d001      	beq.n	13ea <verify_step_SendCheckData+0x44>
        sut =false;
    13e6:	2300      	movs	r3, #0
    13e8:	75fb      	strb	r3, [r7, #23]
    
    return sut;
    13ea:	7dfb      	ldrb	r3, [r7, #23]
}
    13ec:	4618      	mov	r0, r3
    13ee:	3718      	adds	r7, #24
    13f0:	46bd      	mov	sp, r7
    13f2:	bd80      	pop	{r7, pc}

000013f4 <verify_step_SendCheckOneData>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneData(uint32_t step,volatile uint32_t *reg,uint32_t val)
{
    13f4:	b580      	push	{r7, lr}
    13f6:	b088      	sub	sp, #32
    13f8:	af00      	add	r7, sp, #0
    13fa:	60f8      	str	r0, [r7, #12]
    13fc:	60b9      	str	r1, [r7, #8]
    13fe:	607a      	str	r2, [r7, #4]
    uint32_t cd=0,va=0;
    1400:	2300      	movs	r3, #0
    1402:	61bb      	str	r3, [r7, #24]
    1404:	2300      	movs	r3, #0
    1406:	617b      	str	r3, [r7, #20]
    bool sut = true;
    1408:	2301      	movs	r3, #1
    140a:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	3b20      	subs	r3, #32
    1410:	b29b      	uxth	r3, r3
    1412:	4619      	mov	r1, r3
    1414:	480f      	ldr	r0, [pc, #60]	; (1454 <verify_step_SendCheckOneData+0x60>)
    1416:	f7ff f867 	bl	4e8 <cm_printf>
    *reg = val;
    141a:	68bb      	ldr	r3, [r7, #8]
    141c:	687a      	ldr	r2, [r7, #4]
    141e:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    1420:	6879      	ldr	r1, [r7, #4]
    1422:	68f8      	ldr	r0, [r7, #12]
    1424:	f7ff fee0 	bl	11e8 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    1428:	f107 0214 	add.w	r2, r7, #20
    142c:	f107 0318 	add.w	r3, r7, #24
    1430:	4611      	mov	r1, r2
    1432:	4618      	mov	r0, r3
    1434:	f7ff fefc 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    1438:	69bb      	ldr	r3, [r7, #24]
    143a:	68fa      	ldr	r2, [r7, #12]
    143c:	429a      	cmp	r2, r3
    143e:	d102      	bne.n	1446 <verify_step_SendCheckOneData+0x52>
    1440:	697b      	ldr	r3, [r7, #20]
    1442:	2b01      	cmp	r3, #1
    1444:	d001      	beq.n	144a <verify_step_SendCheckOneData+0x56>
        sut =false;
    1446:	2300      	movs	r3, #0
    1448:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    144a:	7ffb      	ldrb	r3, [r7, #31]
}
    144c:	4618      	mov	r0, r3
    144e:	3720      	adds	r7, #32
    1450:	46bd      	mov	sp, r7
    1452:	bd80      	pop	{r7, pc}
    1454:	000025e8 	.word	0x000025e8

00001458 <verify_step_SendCheckOneDataDma>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneDataDma(uint32_t step,volatile uint32_t *reg,uint32_t val,bool rt)
{
    1458:	b580      	push	{r7, lr}
    145a:	b088      	sub	sp, #32
    145c:	af00      	add	r7, sp, #0
    145e:	60f8      	str	r0, [r7, #12]
    1460:	60b9      	str	r1, [r7, #8]
    1462:	607a      	str	r2, [r7, #4]
    1464:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    1466:	2300      	movs	r3, #0
    1468:	61bb      	str	r3, [r7, #24]
    146a:	2300      	movs	r3, #0
    146c:	617b      	str	r3, [r7, #20]
    bool sut = true;
    146e:	2301      	movs	r3, #1
    1470:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	3b20      	subs	r3, #32
    1476:	b29b      	uxth	r3, r3
    1478:	4619      	mov	r1, r3
    147a:	4814      	ldr	r0, [pc, #80]	; (14cc <verify_step_SendCheckOneDataDma+0x74>)
    147c:	f7ff f834 	bl	4e8 <cm_printf>
    if(rt)
    1480:	78fb      	ldrb	r3, [r7, #3]
    1482:	2b00      	cmp	r3, #0
    1484:	d005      	beq.n	1492 <verify_step_SendCheckOneDataDma+0x3a>
        *reg = (val|0xff00);
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	f443 427f 	orr.w	r2, r3, #65280	; 0xff00
    148c:	68bb      	ldr	r3, [r7, #8]
    148e:	601a      	str	r2, [r3, #0]
    1490:	e002      	b.n	1498 <verify_step_SendCheckOneDataDma+0x40>
    else
        *reg = val;
    1492:	68bb      	ldr	r3, [r7, #8]
    1494:	687a      	ldr	r2, [r7, #4]
    1496:	601a      	str	r2, [r3, #0]
    
    Verify_messageSend(step,val);
    1498:	6879      	ldr	r1, [r7, #4]
    149a:	68f8      	ldr	r0, [r7, #12]
    149c:	f7ff fea4 	bl	11e8 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    14a0:	f107 0214 	add.w	r2, r7, #20
    14a4:	f107 0318 	add.w	r3, r7, #24
    14a8:	4611      	mov	r1, r2
    14aa:	4618      	mov	r0, r3
    14ac:	f7ff fec0 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    14b0:	69bb      	ldr	r3, [r7, #24]
    14b2:	68fa      	ldr	r2, [r7, #12]
    14b4:	429a      	cmp	r2, r3
    14b6:	d102      	bne.n	14be <verify_step_SendCheckOneDataDma+0x66>
    14b8:	697b      	ldr	r3, [r7, #20]
    14ba:	2b01      	cmp	r3, #1
    14bc:	d001      	beq.n	14c2 <verify_step_SendCheckOneDataDma+0x6a>
        sut =false;
    14be:	2300      	movs	r3, #0
    14c0:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    14c2:	7ffb      	ldrb	r3, [r7, #31]
}
    14c4:	4618      	mov	r0, r3
    14c6:	3720      	adds	r7, #32
    14c8:	46bd      	mov	sp, r7
    14ca:	bd80      	pop	{r7, pc}
    14cc:	000025e8 	.word	0x000025e8

000014d0 <verify_step_SendCheckOneDataLog>:

bool verify_step_SendCheckOneDataLog(uint32_t step,volatile uint32_t *reg,uint32_t val,bool log)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	b088      	sub	sp, #32
    14d4:	af00      	add	r7, sp, #0
    14d6:	60f8      	str	r0, [r7, #12]
    14d8:	60b9      	str	r1, [r7, #8]
    14da:	607a      	str	r2, [r7, #4]
    14dc:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    14de:	2300      	movs	r3, #0
    14e0:	61bb      	str	r3, [r7, #24]
    14e2:	2300      	movs	r3, #0
    14e4:	617b      	str	r3, [r7, #20]
    bool sut = true;
    14e6:	2301      	movs	r3, #1
    14e8:	77fb      	strb	r3, [r7, #31]
    
    if(log)
    14ea:	78fb      	ldrb	r3, [r7, #3]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d006      	beq.n	14fe <verify_step_SendCheckOneDataLog+0x2e>
        mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    14f0:	68fb      	ldr	r3, [r7, #12]
    14f2:	3b20      	subs	r3, #32
    14f4:	b29b      	uxth	r3, r3
    14f6:	4619      	mov	r1, r3
    14f8:	480f      	ldr	r0, [pc, #60]	; (1538 <verify_step_SendCheckOneDataLog+0x68>)
    14fa:	f7fe fff5 	bl	4e8 <cm_printf>
    *reg = val;
    14fe:	68bb      	ldr	r3, [r7, #8]
    1500:	687a      	ldr	r2, [r7, #4]
    1502:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    1504:	6879      	ldr	r1, [r7, #4]
    1506:	68f8      	ldr	r0, [r7, #12]
    1508:	f7ff fe6e 	bl	11e8 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    150c:	f107 0214 	add.w	r2, r7, #20
    1510:	f107 0318 	add.w	r3, r7, #24
    1514:	4611      	mov	r1, r2
    1516:	4618      	mov	r0, r3
    1518:	f7ff fe8a 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    151c:	69bb      	ldr	r3, [r7, #24]
    151e:	68fa      	ldr	r2, [r7, #12]
    1520:	429a      	cmp	r2, r3
    1522:	d102      	bne.n	152a <verify_step_SendCheckOneDataLog+0x5a>
    1524:	697b      	ldr	r3, [r7, #20]
    1526:	2b01      	cmp	r3, #1
    1528:	d001      	beq.n	152e <verify_step_SendCheckOneDataLog+0x5e>
        sut =false;
    152a:	2300      	movs	r3, #0
    152c:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    152e:	7ffb      	ldrb	r3, [r7, #31]
}
    1530:	4618      	mov	r0, r3
    1532:	3720      	adds	r7, #32
    1534:	46bd      	mov	sp, r7
    1536:	bd80      	pop	{r7, pc}
    1538:	000025e8 	.word	0x000025e8

0000153c <verify_step_ReceiveCheckData>:

/*
Step by step to verify, UVM Send and CPU Check
*/
bool verify_step_ReceiveCheckData(uint32_t step,func_handle func)
{
    153c:	b580      	push	{r7, lr}
    153e:	b086      	sub	sp, #24
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
    1544:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    1546:	2300      	movs	r3, #0
    1548:	613b      	str	r3, [r7, #16]
    154a:	2300      	movs	r3, #0
    154c:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    154e:	2301      	movs	r3, #1
    1550:	75fb      	strb	r3, [r7, #23]
    Verify_messageReceive(&cd,&va);
    1552:	f107 020c 	add.w	r2, r7, #12
    1556:	f107 0310 	add.w	r3, r7, #16
    155a:	4611      	mov	r1, r2
    155c:	4618      	mov	r0, r3
    155e:	f7ff fe67 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == 0))
    1562:	693b      	ldr	r3, [r7, #16]
    1564:	687a      	ldr	r2, [r7, #4]
    1566:	429a      	cmp	r2, r3
    1568:	d102      	bne.n	1570 <verify_step_ReceiveCheckData+0x34>
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	2b00      	cmp	r3, #0
    156e:	d002      	beq.n	1576 <verify_step_ReceiveCheckData+0x3a>
        sut =false;
    1570:	2300      	movs	r3, #0
    1572:	75fb      	strb	r3, [r7, #23]
    1574:	e009      	b.n	158a <verify_step_ReceiveCheckData+0x4e>
    else
    {
        if(!func())
    1576:	683b      	ldr	r3, [r7, #0]
    1578:	4798      	blx	r3
    157a:	4603      	mov	r3, r0
    157c:	f083 0301 	eor.w	r3, r3, #1
    1580:	b2db      	uxtb	r3, r3
    1582:	2b00      	cmp	r3, #0
    1584:	d001      	beq.n	158a <verify_step_ReceiveCheckData+0x4e>
            sut =false;
    1586:	2300      	movs	r3, #0
    1588:	75fb      	strb	r3, [r7, #23]
    }
    Verify_messageSend(step,sut);
    158a:	7dfb      	ldrb	r3, [r7, #23]
    158c:	4619      	mov	r1, r3
    158e:	6878      	ldr	r0, [r7, #4]
    1590:	f7ff fe2a 	bl	11e8 <Verify_messageSend>
    
    return sut;
    1594:	7dfb      	ldrb	r3, [r7, #23]
}
    1596:	4618      	mov	r0, r3
    1598:	3718      	adds	r7, #24
    159a:	46bd      	mov	sp, r7
    159c:	bd80      	pop	{r7, pc}

0000159e <verify_step_ReceiveCheckOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_ReceiveCheckOneData(uint32_t step,volatile uint32_t *reg)
{
    159e:	b580      	push	{r7, lr}
    15a0:	b086      	sub	sp, #24
    15a2:	af00      	add	r7, sp, #0
    15a4:	6078      	str	r0, [r7, #4]
    15a6:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    15a8:	2300      	movs	r3, #0
    15aa:	613b      	str	r3, [r7, #16]
    15ac:	2300      	movs	r3, #0
    15ae:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    15b0:	2301      	movs	r3, #1
    15b2:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	3b20      	subs	r3, #32
    15b8:	b29b      	uxth	r3, r3
    15ba:	4619      	mov	r1, r3
    15bc:	480f      	ldr	r0, [pc, #60]	; (15fc <verify_step_ReceiveCheckOneData+0x5e>)
    15be:	f7fe ff93 	bl	4e8 <cm_printf>
    Verify_messageReceive(&cd,&va);
    15c2:	f107 020c 	add.w	r2, r7, #12
    15c6:	f107 0310 	add.w	r3, r7, #16
    15ca:	4611      	mov	r1, r2
    15cc:	4618      	mov	r0, r3
    15ce:	f7ff fe2f 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    15d2:	693b      	ldr	r3, [r7, #16]
    15d4:	687a      	ldr	r2, [r7, #4]
    15d6:	429a      	cmp	r2, r3
    15d8:	d104      	bne.n	15e4 <verify_step_ReceiveCheckOneData+0x46>
    15da:	683b      	ldr	r3, [r7, #0]
    15dc:	681a      	ldr	r2, [r3, #0]
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	429a      	cmp	r2, r3
    15e2:	d001      	beq.n	15e8 <verify_step_ReceiveCheckOneData+0x4a>
        sut =false;
    15e4:	2300      	movs	r3, #0
    15e6:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    15e8:	7dfb      	ldrb	r3, [r7, #23]
    15ea:	4619      	mov	r1, r3
    15ec:	6878      	ldr	r0, [r7, #4]
    15ee:	f7ff fdfb 	bl	11e8 <Verify_messageSend>
    
    return sut;
    15f2:	7dfb      	ldrb	r3, [r7, #23]
}
    15f4:	4618      	mov	r0, r3
    15f6:	3718      	adds	r7, #24
    15f8:	46bd      	mov	sp, r7
    15fa:	bd80      	pop	{r7, pc}
    15fc:	000025f8 	.word	0x000025f8

00001600 <verify_step_ReceiveCheckOneDataLog>:
bool verify_step_ReceiveCheckOneDataLog(uint32_t step,volatile uint32_t *reg,bool log)
{
    1600:	b580      	push	{r7, lr}
    1602:	b088      	sub	sp, #32
    1604:	af00      	add	r7, sp, #0
    1606:	60f8      	str	r0, [r7, #12]
    1608:	60b9      	str	r1, [r7, #8]
    160a:	4613      	mov	r3, r2
    160c:	71fb      	strb	r3, [r7, #7]
    uint32_t cd=0,va=0;
    160e:	2300      	movs	r3, #0
    1610:	61bb      	str	r3, [r7, #24]
    1612:	2300      	movs	r3, #0
    1614:	617b      	str	r3, [r7, #20]
    bool sut = true;
    1616:	2301      	movs	r3, #1
    1618:	77fb      	strb	r3, [r7, #31]
    if(log)
    161a:	79fb      	ldrb	r3, [r7, #7]
    161c:	2b00      	cmp	r3, #0
    161e:	d006      	beq.n	162e <verify_step_ReceiveCheckOneDataLog+0x2e>
        mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    1620:	68fb      	ldr	r3, [r7, #12]
    1622:	3b20      	subs	r3, #32
    1624:	b29b      	uxth	r3, r3
    1626:	4619      	mov	r1, r3
    1628:	480f      	ldr	r0, [pc, #60]	; (1668 <verify_step_ReceiveCheckOneDataLog+0x68>)
    162a:	f7fe ff5d 	bl	4e8 <cm_printf>
    
    Verify_messageReceive(&cd,&va);
    162e:	f107 0214 	add.w	r2, r7, #20
    1632:	f107 0318 	add.w	r3, r7, #24
    1636:	4611      	mov	r1, r2
    1638:	4618      	mov	r0, r3
    163a:	f7ff fdf9 	bl	1230 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    163e:	69bb      	ldr	r3, [r7, #24]
    1640:	68fa      	ldr	r2, [r7, #12]
    1642:	429a      	cmp	r2, r3
    1644:	d104      	bne.n	1650 <verify_step_ReceiveCheckOneDataLog+0x50>
    1646:	68bb      	ldr	r3, [r7, #8]
    1648:	681a      	ldr	r2, [r3, #0]
    164a:	697b      	ldr	r3, [r7, #20]
    164c:	429a      	cmp	r2, r3
    164e:	d001      	beq.n	1654 <verify_step_ReceiveCheckOneDataLog+0x54>
        sut =false;
    1650:	2300      	movs	r3, #0
    1652:	77fb      	strb	r3, [r7, #31]
    Verify_messageSend(step,sut);
    1654:	7ffb      	ldrb	r3, [r7, #31]
    1656:	4619      	mov	r1, r3
    1658:	68f8      	ldr	r0, [r7, #12]
    165a:	f7ff fdc5 	bl	11e8 <Verify_messageSend>
    
    return sut;
    165e:	7ffb      	ldrb	r3, [r7, #31]
}
    1660:	4618      	mov	r0, r3
    1662:	3720      	adds	r7, #32
    1664:	46bd      	mov	sp, r7
    1666:	bd80      	pop	{r7, pc}
    1668:	000025f8 	.word	0x000025f8

0000166c <verify_step_CheckReceiveOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_CheckReceiveOneData(uint32_t step,uint32_t val,volatile uint32_t *reg)
{
    166c:	b580      	push	{r7, lr}
    166e:	b086      	sub	sp, #24
    1670:	af00      	add	r7, sp, #0
    1672:	60f8      	str	r0, [r7, #12]
    1674:	60b9      	str	r1, [r7, #8]
    1676:	607a      	str	r2, [r7, #4]
    bool sut = true;
    1678:	2301      	movs	r3, #1
    167a:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	3b20      	subs	r3, #32
    1680:	b29b      	uxth	r3, r3
    1682:	4619      	mov	r1, r3
    1684:	4809      	ldr	r0, [pc, #36]	; (16ac <verify_step_CheckReceiveOneData+0x40>)
    1686:	f7fe ff2f 	bl	4e8 <cm_printf>
    if(!(val == *reg))
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	681b      	ldr	r3, [r3, #0]
    168e:	68ba      	ldr	r2, [r7, #8]
    1690:	429a      	cmp	r2, r3
    1692:	d001      	beq.n	1698 <verify_step_CheckReceiveOneData+0x2c>
        sut =false;
    1694:	2300      	movs	r3, #0
    1696:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    1698:	7dfb      	ldrb	r3, [r7, #23]
    169a:	4619      	mov	r1, r3
    169c:	68f8      	ldr	r0, [r7, #12]
    169e:	f7ff fda3 	bl	11e8 <Verify_messageSend>
    return sut;
    16a2:	7dfb      	ldrb	r3, [r7, #23]
}
    16a4:	4618      	mov	r0, r3
    16a6:	3718      	adds	r7, #24
    16a8:	46bd      	mov	sp, r7
    16aa:	bd80      	pop	{r7, pc}
    16ac:	000025f8 	.word	0x000025f8

000016b0 <verify_step_CheckReceiveOneDataLog>:
bool verify_step_CheckReceiveOneDataLog(uint32_t step,uint32_t val,volatile uint32_t *reg,bool log)
{
    16b0:	b580      	push	{r7, lr}
    16b2:	b086      	sub	sp, #24
    16b4:	af00      	add	r7, sp, #0
    16b6:	60f8      	str	r0, [r7, #12]
    16b8:	60b9      	str	r1, [r7, #8]
    16ba:	607a      	str	r2, [r7, #4]
    16bc:	70fb      	strb	r3, [r7, #3]
    bool sut = true;
    16be:	2301      	movs	r3, #1
    16c0:	75fb      	strb	r3, [r7, #23]
    if(log)
    16c2:	78fb      	ldrb	r3, [r7, #3]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d008      	beq.n	16da <verify_step_CheckReceiveOneDataLog+0x2a>
        mgeprf("Setp %d Receive [%X]\r\n",(step-0x20)&0xffff,*reg);
    16c8:	68fb      	ldr	r3, [r7, #12]
    16ca:	3b20      	subs	r3, #32
    16cc:	b299      	uxth	r1, r3
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	681b      	ldr	r3, [r3, #0]
    16d2:	461a      	mov	r2, r3
    16d4:	4809      	ldr	r0, [pc, #36]	; (16fc <verify_step_CheckReceiveOneDataLog+0x4c>)
    16d6:	f7fe ff07 	bl	4e8 <cm_printf>
    
    if(!(val == *reg))
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	68ba      	ldr	r2, [r7, #8]
    16e0:	429a      	cmp	r2, r3
    16e2:	d001      	beq.n	16e8 <verify_step_CheckReceiveOneDataLog+0x38>
        sut =false;
    16e4:	2300      	movs	r3, #0
    16e6:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    16e8:	7dfb      	ldrb	r3, [r7, #23]
    16ea:	4619      	mov	r1, r3
    16ec:	68f8      	ldr	r0, [r7, #12]
    16ee:	f7ff fd7b 	bl	11e8 <Verify_messageSend>
    return sut;
    16f2:	7dfb      	ldrb	r3, [r7, #23]
}
    16f4:	4618      	mov	r0, r3
    16f6:	3718      	adds	r7, #24
    16f8:	46bd      	mov	sp, r7
    16fa:	bd80      	pop	{r7, pc}
    16fc:	0000260c 	.word	0x0000260c

00001700 <Verify_SendCResult>:

#ifndef ONLY_NO_UVM
/*Send Case Verify Result*/
bool Verify_SendCResult(uint32_t cmd, uint32_t val)
{
    1700:	b580      	push	{r7, lr}
    1702:	b086      	sub	sp, #24
    1704:	af00      	add	r7, sp, #0
    1706:	6078      	str	r0, [r7, #4]
    1708:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    170a:	2300      	movs	r3, #0
    170c:	613b      	str	r3, [r7, #16]
    170e:	2300      	movs	r3, #0
    1710:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    1712:	2301      	movs	r3, #1
    1714:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    1716:	6839      	ldr	r1, [r7, #0]
    1718:	6878      	ldr	r0, [r7, #4]
    171a:	f7ff fd65 	bl	11e8 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    171e:	f107 020c 	add.w	r2, r7, #12
    1722:	f107 0310 	add.w	r3, r7, #16
    1726:	4611      	mov	r1, r2
    1728:	4618      	mov	r0, r3
    172a:	f7ff fd81 	bl	1230 <Verify_messageReceive>
    if(!(cd == cmd && va == 1))
    172e:	693b      	ldr	r3, [r7, #16]
    1730:	687a      	ldr	r2, [r7, #4]
    1732:	429a      	cmp	r2, r3
    1734:	d102      	bne.n	173c <Verify_SendCResult+0x3c>
    1736:	68fb      	ldr	r3, [r7, #12]
    1738:	2b01      	cmp	r3, #1
    173a:	d001      	beq.n	1740 <Verify_SendCResult+0x40>
        sut =false;
    173c:	2300      	movs	r3, #0
    173e:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    1740:	693b      	ldr	r3, [r7, #16]
    1742:	2b03      	cmp	r3, #3
    1744:	d104      	bne.n	1750 <Verify_SendCResult+0x50>
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	2b01      	cmp	r3, #1
    174a:	d101      	bne.n	1750 <Verify_SendCResult+0x50>
        Verify_SendEndSimulation();
    174c:	f000 f850 	bl	17f0 <Verify_SendEndSimulation>
    
    return sut;
    1750:	7dfb      	ldrb	r3, [r7, #23]
}
    1752:	4618      	mov	r0, r3
    1754:	3718      	adds	r7, #24
    1756:	46bd      	mov	sp, r7
    1758:	bd80      	pop	{r7, pc}

0000175a <Verify_SendCResultBack>:
}

#endif

bool Verify_SendCResultBack(uint32_t cmd, uint32_t val)
{
    175a:	b580      	push	{r7, lr}
    175c:	b086      	sub	sp, #24
    175e:	af00      	add	r7, sp, #0
    1760:	6078      	str	r0, [r7, #4]
    1762:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    1764:	2300      	movs	r3, #0
    1766:	613b      	str	r3, [r7, #16]
    1768:	2300      	movs	r3, #0
    176a:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    176c:	2301      	movs	r3, #1
    176e:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    1770:	6839      	ldr	r1, [r7, #0]
    1772:	6878      	ldr	r0, [r7, #4]
    1774:	f7ff fd38 	bl	11e8 <Verify_messageSend>
	
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    1778:	e006      	b.n	1788 <Verify_SendCResultBack+0x2e>
		{
			mgeprf("SCU RCMD[%X] \n",SCU->READ_CMD);
    177a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1780:	4619      	mov	r1, r3
    1782:	4818      	ldr	r0, [pc, #96]	; (17e4 <Verify_SendCResultBack+0x8a>)
    1784:	f7fe feb0 	bl	4e8 <cm_printf>
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    1788:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    178e:	4b16      	ldr	r3, [pc, #88]	; (17e8 <Verify_SendCResultBack+0x8e>)
    1790:	681b      	ldr	r3, [r3, #0]
    1792:	429a      	cmp	r2, r3
    1794:	d0f1      	beq.n	177a <Verify_SendCResultBack+0x20>
		};
		cd   = SCU->READ_CMD;
    1796:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    179c:	613b      	str	r3, [r7, #16]
		va = SCU->READ_DATA;
    179e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    17a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    17a4:	60fb      	str	r3, [r7, #12]
		mgeprf("SCU cd:[%X],va[%X]\n",cd,va);
    17a6:	68fa      	ldr	r2, [r7, #12]
    17a8:	6939      	ldr	r1, [r7, #16]
    17aa:	4810      	ldr	r0, [pc, #64]	; (17ec <Verify_SendCResultBack+0x92>)
    17ac:	f7fe fe9c 	bl	4e8 <cm_printf>
		VERIFY_MESSGAE_CMD = cd;	
    17b0:	4a0d      	ldr	r2, [pc, #52]	; (17e8 <Verify_SendCResultBack+0x8e>)
    17b2:	693b      	ldr	r3, [r7, #16]
    17b4:	6013      	str	r3, [r2, #0]
    if(!(cd == cmd && va == 1))
    17b6:	693a      	ldr	r2, [r7, #16]
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	429a      	cmp	r2, r3
    17bc:	d102      	bne.n	17c4 <Verify_SendCResultBack+0x6a>
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	2b01      	cmp	r3, #1
    17c2:	d001      	beq.n	17c8 <Verify_SendCResultBack+0x6e>
        sut =false;
    17c4:	2300      	movs	r3, #0
    17c6:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	2b03      	cmp	r3, #3
    17cc:	d104      	bne.n	17d8 <Verify_SendCResultBack+0x7e>
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	2b01      	cmp	r3, #1
    17d2:	d101      	bne.n	17d8 <Verify_SendCResultBack+0x7e>
        Verify_SendEndSimulation();
    17d4:	f000 f80c 	bl	17f0 <Verify_SendEndSimulation>
    
    return sut;
    17d8:	7dfb      	ldrb	r3, [r7, #23]
}
    17da:	4618      	mov	r0, r3
    17dc:	3718      	adds	r7, #24
    17de:	46bd      	mov	sp, r7
    17e0:	bd80      	pop	{r7, pc}
    17e2:	bf00      	nop
    17e4:	00002624 	.word	0x00002624
    17e8:	200081f0 	.word	0x200081f0
    17ec:	00002634 	.word	0x00002634

000017f0 <Verify_SendEndSimulation>:


void Verify_SendEndSimulation(void)
{
    17f0:	b480      	push	{r7}
    17f2:	af00      	add	r7, sp, #0
    //UART_WriteByte(UART0,0x04);
    //while(1);
}
    17f4:	bf00      	nop
    17f6:	46bd      	mov	sp, r7
    17f8:	bc80      	pop	{r7}
    17fa:	4770      	bx	lr

000017fc <Verrify_SendPinConnect>:



void Verrify_SendPinConnect(MessagaConnectEn_Type Mce)
{
    17fc:	b480      	push	{r7}
    17fe:	b083      	sub	sp, #12
    1800:	af00      	add	r7, sp, #0
    1802:	4603      	mov	r3, r0
    1804:	80fb      	strh	r3, [r7, #6]
    SCU->SEND_DATA = Mce;
    1806:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    180a:	88fb      	ldrh	r3, [r7, #6]
    180c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    180e:	bf00      	nop
    1810:	370c      	adds	r7, #12
    1812:	46bd      	mov	sp, r7
    1814:	bc80      	pop	{r7}
    1816:	4770      	bx	lr

00001818 <Verrify_SendPinCon>:

void Verrify_SendPinCon(uint32_t xxx)
{
    1818:	b480      	push	{r7}
    181a:	b083      	sub	sp, #12
    181c:	af00      	add	r7, sp, #0
    181e:	6078      	str	r0, [r7, #4]
    SCU->SEND_DATA = xxx;
    1820:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    1828:	bf00      	nop
    182a:	370c      	adds	r7, #12
    182c:	46bd      	mov	sp, r7
    182e:	bc80      	pop	{r7}
    1830:	4770      	bx	lr

00001832 <MCU_GetTickCount>:

//##########################################################
static unsigned long g_u32TimerMsCnt = 0;

unsigned long MCU_GetTickCount(void)
{
    1832:	b480      	push	{r7}
    1834:	af00      	add	r7, sp, #0
    return g_u32TimerMsCnt;
    1836:	4b03      	ldr	r3, [pc, #12]	; (1844 <MCU_GetTickCount+0x12>)
    1838:	681b      	ldr	r3, [r3, #0]
}
    183a:	4618      	mov	r0, r3
    183c:	46bd      	mov	sp, r7
    183e:	bc80      	pop	{r7}
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	200081f8 	.word	0x200081f8

00001848 <SysTick_Handler>:
#ifndef BR_FPGA
void SysTick_Handler(void)
{
    1848:	b480      	push	{r7}
    184a:	af00      	add	r7, sp, #0
  g_u32TimerMsCnt++;
    184c:	4b04      	ldr	r3, [pc, #16]	; (1860 <SysTick_Handler+0x18>)
    184e:	681b      	ldr	r3, [r3, #0]
    1850:	3301      	adds	r3, #1
    1852:	4a03      	ldr	r2, [pc, #12]	; (1860 <SysTick_Handler+0x18>)
    1854:	6013      	str	r3, [r2, #0]
}
    1856:	bf00      	nop
    1858:	46bd      	mov	sp, r7
    185a:	bc80      	pop	{r7}
    185c:	4770      	bx	lr
    185e:	bf00      	nop
    1860:	200081f8 	.word	0x200081f8

00001864 <MCU_Sleep>:
#endif
void MCU_Sleep(unsigned int ms)
{
    1864:	b580      	push	{r7, lr}
    1866:	b084      	sub	sp, #16
    1868:	af00      	add	r7, sp, #0
    186a:	6078      	str	r0, [r7, #4]
#ifndef BR_FPGA
    unsigned long dest_time = ms + MCU_GetTickCount();
    186c:	f7ff ffe1 	bl	1832 <MCU_GetTickCount>
    1870:	4602      	mov	r2, r0
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	4413      	add	r3, r2
    1876:	60fb      	str	r3, [r7, #12]
    while (MCU_GetTickCount() <= dest_time);
    1878:	bf00      	nop
    187a:	f7ff ffda 	bl	1832 <MCU_GetTickCount>
    187e:	4602      	mov	r2, r0
    1880:	68fb      	ldr	r3, [r7, #12]
    1882:	4293      	cmp	r3, r2
    1884:	d2f9      	bcs.n	187a <MCU_Sleep+0x16>
#endif
}
    1886:	bf00      	nop
    1888:	3710      	adds	r7, #16
    188a:	46bd      	mov	sp, r7
    188c:	bd80      	pop	{r7, pc}

0000188e <sysTimeUpdataClk>:
void sysTimeUpdataClk(uint32_t clk)
{
    188e:	b580      	push	{r7, lr}
    1890:	b082      	sub	sp, #8
    1892:	af00      	add	r7, sp, #0
    1894:	6078      	str	r0, [r7, #4]
    #ifndef BR_FPGA
    SysTick_Config(clk/1000);
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	4a05      	ldr	r2, [pc, #20]	; (18b0 <sysTimeUpdataClk+0x22>)
    189a:	fba2 2303 	umull	r2, r3, r2, r3
    189e:	099b      	lsrs	r3, r3, #6
    18a0:	4618      	mov	r0, r3
    18a2:	f7ff fc51 	bl	1148 <SysTick_Config>
    #endif
}
    18a6:	bf00      	nop
    18a8:	3708      	adds	r7, #8
    18aa:	46bd      	mov	sp, r7
    18ac:	bd80      	pop	{r7, pc}
    18ae:	bf00      	nop
    18b0:	10624dd3 	.word	0x10624dd3

000018b4 <LOGUartSel>:
//#define logUart UART0
UART_TypeDef *logUart = UART0;


void  LOGUartSel(UART_TypeDef *Ux)
{
    18b4:	b480      	push	{r7}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    logUart = Ux;
    18bc:	4a03      	ldr	r2, [pc, #12]	; (18cc <LOGUartSel+0x18>)
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	6013      	str	r3, [r2, #0]
}
    18c2:	bf00      	nop
    18c4:	370c      	adds	r7, #12
    18c6:	46bd      	mov	sp, r7
    18c8:	bc80      	pop	{r7}
    18ca:	4770      	bx	lr
    18cc:	20008004 	.word	0x20008004

000018d0 <LOGUartInit>:

void LOGUartInit(void)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b086      	sub	sp, #24
    18d4:	af00      	add	r7, sp, #0
    UART_InitInfo_Type  UART_InitStru;
    PADConfig_Type      PAD_InitStru;
    
    memset(&PAD_InitStru, 0,sizeof(PADConfig_Type));
    18d6:	463b      	mov	r3, r7
    18d8:	2204      	movs	r2, #4
    18da:	2100      	movs	r1, #0
    18dc:	4618      	mov	r0, r3
    18de:	f000 fa4d 	bl	1d7c <memset>
    memset(&UART_InitStru,0,sizeof(UART_InitInfo_Type));
    18e2:	1d3b      	adds	r3, r7, #4
    18e4:	2214      	movs	r2, #20
    18e6:	2100      	movs	r1, #0
    18e8:	4618      	mov	r0, r3
    18ea:	f000 fa47 	bl	1d7c <memset>

    if(logUart == UART0) {
    18ee:	4b31      	ldr	r3, [pc, #196]	; (19b4 <LOGUartInit+0xe4>)
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	4a31      	ldr	r2, [pc, #196]	; (19b8 <LOGUartInit+0xe8>)
    18f4:	4293      	cmp	r3, r2
    18f6:	d104      	bne.n	1902 <LOGUartInit+0x32>
        SystemDevClockCtl(UART0_CKEn,true);
    18f8:	2101      	movs	r1, #1
    18fa:	2004      	movs	r0, #4
    18fc:	f7fe fd08 	bl	310 <SystemDevClockCtl>
    1900:	e003      	b.n	190a <LOGUartInit+0x3a>
#if defined(BR005)
        SystemDevClockCtl(UART0_SCKEn,true);
#endif
    }else{
        SystemDevClockCtl(UART1_CKEn,true);
    1902:	2101      	movs	r1, #1
    1904:	2005      	movs	r0, #5
    1906:	f7fe fd03 	bl	310 <SystemDevClockCtl>
    }
    if(logUart == UART0) {
    190a:	4b2a      	ldr	r3, [pc, #168]	; (19b4 <LOGUartInit+0xe4>)
    190c:	681b      	ldr	r3, [r3, #0]
    190e:	4a2a      	ldr	r2, [pc, #168]	; (19b8 <LOGUartInit+0xe8>)
    1910:	4293      	cmp	r3, r2
    1912:	d118      	bne.n	1946 <LOGUartInit+0x76>
        PAD_InitStru.pad_ctl = PAD_MODE0;
    1914:	783b      	ldrb	r3, [r7, #0]
    1916:	f36f 1306 	bfc	r3, #4, #3
    191a:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID0,&PAD_InitStru);
    191c:	463b      	mov	r3, r7
    191e:	4619      	mov	r1, r3
    1920:	2000      	movs	r0, #0
    1922:	f7fe fd31 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID1,&PAD_InitStru);
    1926:	463b      	mov	r3, r7
    1928:	4619      	mov	r1, r3
    192a:	2001      	movs	r0, #1
    192c:	f7fe fd2c 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID2,&PAD_InitStru);
    1930:	463b      	mov	r3, r7
    1932:	4619      	mov	r1, r3
    1934:	2002      	movs	r0, #2
    1936:	f7fe fd27 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID3,&PAD_InitStru);
    193a:	463b      	mov	r3, r7
    193c:	4619      	mov	r1, r3
    193e:	2003      	movs	r0, #3
    1940:	f7fe fd22 	bl	388 <SystemPADConfig>
    1944:	e018      	b.n	1978 <LOGUartInit+0xa8>
    }else{
        PAD_InitStru.pad_ctl = PAD_MODE1;
    1946:	783b      	ldrb	r3, [r7, #0]
    1948:	2201      	movs	r2, #1
    194a:	f362 1306 	bfi	r3, r2, #4, #3
    194e:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID15,&PAD_InitStru);
    1950:	463b      	mov	r3, r7
    1952:	4619      	mov	r1, r3
    1954:	200f      	movs	r0, #15
    1956:	f7fe fd17 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID16,&PAD_InitStru);
    195a:	463b      	mov	r3, r7
    195c:	4619      	mov	r1, r3
    195e:	2010      	movs	r0, #16
    1960:	f7fe fd12 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID27,&PAD_InitStru);
    1964:	463b      	mov	r3, r7
    1966:	4619      	mov	r1, r3
    1968:	201b      	movs	r0, #27
    196a:	f7fe fd0d 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID28,&PAD_InitStru);
    196e:	463b      	mov	r3, r7
    1970:	4619      	mov	r1, r3
    1972:	201c      	movs	r0, #28
    1974:	f7fe fd08 	bl	388 <SystemPADConfig>

    }

    UART_InitStru.UART_BaudRate             = 921600;
    1978:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
    197c:	607b      	str	r3, [r7, #4]
    UART_InitStru.UART_WordLength           = UART_WL_8BITS;
    197e:	2303      	movs	r3, #3
    1980:	813b      	strh	r3, [r7, #8]
    UART_InitStru.UART_StopBits             = UART_SB_1BIT;
    1982:	2300      	movs	r3, #0
    1984:	817b      	strh	r3, [r7, #10]
    UART_InitStru.UART_ParityMode           = UART_PM_NONE;
    1986:	2300      	movs	r3, #0
    1988:	81bb      	strh	r3, [r7, #12]
    UART_InitStru.UART_HardwareFlowControl  = UART_FC_NONE;
    198a:	2300      	movs	r3, #0
    198c:	81fb      	strh	r3, [r7, #14]
    UART_InitStru.UART_FIFOMode             = UART_FM_ENABLE;
    198e:	2301      	movs	r3, #1
    1990:	827b      	strh	r3, [r7, #18]
    UART_InitStru.UART_DMAMode              = UART_DM_MODE_0;
    1992:	2300      	movs	r3, #0
    1994:	823b      	strh	r3, [r7, #16]
    UART_InitStru.UART_TX_FIFOTriggerMode   = UART_TT_EMPTY;
    1996:	2300      	movs	r3, #0
    1998:	82bb      	strh	r3, [r7, #20]
    UART_InitStru.UART_RX_FIFOTriggerMode   = UART_RT_1_CHARACTER; 
    199a:	2300      	movs	r3, #0
    199c:	82fb      	strh	r3, [r7, #22]
    UART_Init(logUart, &UART_InitStru); 
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <LOGUartInit+0xe4>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	1d3a      	adds	r2, r7, #4
    19a4:	4611      	mov	r1, r2
    19a6:	4618      	mov	r0, r3
    19a8:	f7fe fe20 	bl	5ec <UART_Init>
}
    19ac:	bf00      	nop
    19ae:	3718      	adds	r7, #24
    19b0:	46bd      	mov	sp, r7
    19b2:	bd80      	pop	{r7, pc}
    19b4:	20008004 	.word	0x20008004
    19b8:	90002000 	.word	0x90002000

000019bc <c_printf>:

int c_printf(const char *fmt, ...)
{
    19bc:	b40f      	push	{r0, r1, r2, r3}
    19be:	b580      	push	{r7, lr}
    19c0:	b082      	sub	sp, #8
    19c2:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
    19c4:	f107 0314 	add.w	r3, r7, #20
    19c8:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
    19ca:	683a      	ldr	r2, [r7, #0]
    19cc:	6939      	ldr	r1, [r7, #16]
    19ce:	480a      	ldr	r0, [pc, #40]	; (19f8 <c_printf+0x3c>)
    19d0:	f000 f9f2 	bl	1db8 <vsiprintf>
    19d4:	6078      	str	r0, [r7, #4]
    UART_WriteData(logUart, s_tmp_buf, r);
    19d6:	4b09      	ldr	r3, [pc, #36]	; (19fc <c_printf+0x40>)
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	687a      	ldr	r2, [r7, #4]
    19dc:	b292      	uxth	r2, r2
    19de:	4906      	ldr	r1, [pc, #24]	; (19f8 <c_printf+0x3c>)
    19e0:	4618      	mov	r0, r3
    19e2:	f7fe ff1b 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
    19e6:	687b      	ldr	r3, [r7, #4]
}
    19e8:	4618      	mov	r0, r3
    19ea:	3708      	adds	r7, #8
    19ec:	46bd      	mov	sp, r7
    19ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    19f2:	b004      	add	sp, #16
    19f4:	4770      	bx	lr
    19f6:	bf00      	nop
    19f8:	200081fc 	.word	0x200081fc
    19fc:	20008004 	.word	0x20008004

00001a00 <SimulationEnd>:

void  SimulationEnd(void)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	af00      	add	r7, sp, #0
    while(!UART_LSRCheckBits(logUart,UART_LSR_BIT_THRE));
    1a04:	bf00      	nop
    1a06:	4b08      	ldr	r3, [pc, #32]	; (1a28 <SimulationEnd+0x28>)
    1a08:	681b      	ldr	r3, [r3, #0]
    1a0a:	2120      	movs	r1, #32
    1a0c:	4618      	mov	r0, r3
    1a0e:	f7fe ff83 	bl	918 <UART_LSRCheckBits>
    1a12:	4603      	mov	r3, r0
    1a14:	2b00      	cmp	r3, #0
    1a16:	d0f6      	beq.n	1a06 <SimulationEnd+0x6>
    UART_WriteByte(logUart,0x04);
    1a18:	4b03      	ldr	r3, [pc, #12]	; (1a28 <SimulationEnd+0x28>)
    1a1a:	681b      	ldr	r3, [r3, #0]
    1a1c:	2104      	movs	r1, #4
    1a1e:	4618      	mov	r0, r3
    1a20:	f7fe feee 	bl	800 <UART_WriteByte>
}
    1a24:	bf00      	nop
    1a26:	bd80      	pop	{r7, pc}
    1a28:	20008004 	.word	0x20008004

00001a2c <NVIC_EnableIRQ>:
{
    1a2c:	b480      	push	{r7}
    1a2e:	b083      	sub	sp, #12
    1a30:	af00      	add	r7, sp, #0
    1a32:	4603      	mov	r3, r0
    1a34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1a36:	79fb      	ldrb	r3, [r7, #7]
    1a38:	f003 031f 	and.w	r3, r3, #31
    1a3c:	2201      	movs	r2, #1
    1a3e:	fa02 f103 	lsl.w	r1, r2, r3
    1a42:	4a05      	ldr	r2, [pc, #20]	; (1a58 <NVIC_EnableIRQ+0x2c>)
    1a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1a48:	095b      	lsrs	r3, r3, #5
    1a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    1a4e:	bf00      	nop
    1a50:	370c      	adds	r7, #12
    1a52:	46bd      	mov	sp, r7
    1a54:	bc80      	pop	{r7}
    1a56:	4770      	bx	lr
    1a58:	e000e100 	.word	0xe000e100

00001a5c <i2sm_SendData>:




void i2sm_SendData(void)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b084      	sub	sp, #16
    1a60:	af00      	add	r7, sp, #0
    uint32_t data   = 0xaaaaaaa0;
    1a62:	4b19      	ldr	r3, [pc, #100]	; (1ac8 <i2sm_SendData+0x6c>)
    1a64:	60fb      	str	r3, [r7, #12]
    uint32_t data1  = 0x55555550;
    1a66:	4b19      	ldr	r3, [pc, #100]	; (1acc <i2sm_SendData+0x70>)
    1a68:	60bb      	str	r3, [r7, #8]
    while(0== I2S_GetInterruptStatus(I2SM,I2S_TX_FIFO_OVERRUN))
    1a6a:	e00d      	b.n	1a88 <i2sm_SendData+0x2c>
    {
        data++;
    1a6c:	68fb      	ldr	r3, [r7, #12]
    1a6e:	3301      	adds	r3, #1
    1a70:	60fb      	str	r3, [r7, #12]
        data1++;
    1a72:	68bb      	ldr	r3, [r7, #8]
    1a74:	3301      	adds	r3, #1
    1a76:	60bb      	str	r3, [r7, #8]
        I2S_SetLeftTransmitData(I2SM,data);
    1a78:	68f9      	ldr	r1, [r7, #12]
    1a7a:	4815      	ldr	r0, [pc, #84]	; (1ad0 <i2sm_SendData+0x74>)
    1a7c:	f7ff f9bc 	bl	df8 <I2S_SetLeftTransmitData>
        I2S_SetRightTransmitData(I2SM,data1);
    1a80:	68b9      	ldr	r1, [r7, #8]
    1a82:	4813      	ldr	r0, [pc, #76]	; (1ad0 <i2sm_SendData+0x74>)
    1a84:	f7ff f9c7 	bl	e16 <I2S_SetRightTransmitData>
    while(0== I2S_GetInterruptStatus(I2SM,I2S_TX_FIFO_OVERRUN))
    1a88:	2103      	movs	r1, #3
    1a8a:	4811      	ldr	r0, [pc, #68]	; (1ad0 <i2sm_SendData+0x74>)
    1a8c:	f7ff fa87 	bl	f9e <I2S_GetInterruptStatus>
    1a90:	4603      	mov	r3, r0
    1a92:	f083 0301 	eor.w	r3, r3, #1
    1a96:	b2db      	uxtb	r3, r3
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d1e7      	bne.n	1a6c <i2sm_SendData+0x10>
    }
    {
        I2S_IntCtlMask  IntCtlMask;
        IntCtlMask.rx_dma_available_interrupt_mask    =  false;
    1a9c:	2300      	movs	r3, #0
    1a9e:	71fb      	strb	r3, [r7, #7]
        IntCtlMask.rx_fifo_overrun_interrupt_mask     =  false;
    1aa0:	2300      	movs	r3, #0
    1aa2:	71bb      	strb	r3, [r7, #6]
        IntCtlMask.tx_fifo_empty_interrupt_mask       =  false;
    1aa4:	2300      	movs	r3, #0
    1aa6:	717b      	strb	r3, [r7, #5]
        IntCtlMask.tx_fifo_overrun_interrupt_mask     =  false;
    1aa8:	2300      	movs	r3, #0
    1aaa:	713b      	strb	r3, [r7, #4]
        I2S_SetInterruptMask(I2SM ,&IntCtlMask);
    1aac:	1d3b      	adds	r3, r7, #4
    1aae:	4619      	mov	r1, r3
    1ab0:	4807      	ldr	r0, [pc, #28]	; (1ad0 <i2sm_SendData+0x74>)
    1ab2:	f7ff f9f0 	bl	e96 <I2S_SetInterruptMask>
    }

    I2S_GeneratrClock(I2SM,true);
    1ab6:	2101      	movs	r1, #1
    1ab8:	4805      	ldr	r0, [pc, #20]	; (1ad0 <i2sm_SendData+0x74>)
    1aba:	f7ff f9d7 	bl	e6c <I2S_GeneratrClock>
    
}
    1abe:	bf00      	nop
    1ac0:	3710      	adds	r7, #16
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bd80      	pop	{r7, pc}
    1ac6:	bf00      	nop
    1ac8:	aaaaaaa0 	.word	0xaaaaaaa0
    1acc:	55555550 	.word	0x55555550
    1ad0:	90007000 	.word	0x90007000

00001ad4 <i2ss_SendData>:

void i2ss_SendData(void)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b084      	sub	sp, #16
    1ad8:	af00      	add	r7, sp, #0
    uint32_t data   = 0x66666660;
    1ada:	4b17      	ldr	r3, [pc, #92]	; (1b38 <i2ss_SendData+0x64>)
    1adc:	60fb      	str	r3, [r7, #12]
    uint32_t data1  = 0x99999990;
    1ade:	4b17      	ldr	r3, [pc, #92]	; (1b3c <i2ss_SendData+0x68>)
    1ae0:	60bb      	str	r3, [r7, #8]
    while(0== I2S_GetInterruptStatus(I2SS,I2S_TX_FIFO_OVERRUN))
    1ae2:	e00d      	b.n	1b00 <i2ss_SendData+0x2c>
    {
        data++;
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	3301      	adds	r3, #1
    1ae8:	60fb      	str	r3, [r7, #12]
        data1++;
    1aea:	68bb      	ldr	r3, [r7, #8]
    1aec:	3301      	adds	r3, #1
    1aee:	60bb      	str	r3, [r7, #8]
        I2S_SetLeftTransmitData(I2SS,data);
    1af0:	68f9      	ldr	r1, [r7, #12]
    1af2:	4813      	ldr	r0, [pc, #76]	; (1b40 <i2ss_SendData+0x6c>)
    1af4:	f7ff f980 	bl	df8 <I2S_SetLeftTransmitData>
        I2S_SetRightTransmitData(I2SS,data1);
    1af8:	68b9      	ldr	r1, [r7, #8]
    1afa:	4811      	ldr	r0, [pc, #68]	; (1b40 <i2ss_SendData+0x6c>)
    1afc:	f7ff f98b 	bl	e16 <I2S_SetRightTransmitData>
    while(0== I2S_GetInterruptStatus(I2SS,I2S_TX_FIFO_OVERRUN))
    1b00:	2103      	movs	r1, #3
    1b02:	480f      	ldr	r0, [pc, #60]	; (1b40 <i2ss_SendData+0x6c>)
    1b04:	f7ff fa4b 	bl	f9e <I2S_GetInterruptStatus>
    1b08:	4603      	mov	r3, r0
    1b0a:	f083 0301 	eor.w	r3, r3, #1
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	2b00      	cmp	r3, #0
    1b12:	d1e7      	bne.n	1ae4 <i2ss_SendData+0x10>
    }
    {
        I2S_IntCtlMask  IntCtlMask;
        IntCtlMask.rx_dma_available_interrupt_mask    =  false;
    1b14:	2300      	movs	r3, #0
    1b16:	71fb      	strb	r3, [r7, #7]
        IntCtlMask.rx_fifo_overrun_interrupt_mask     =  false;
    1b18:	2300      	movs	r3, #0
    1b1a:	71bb      	strb	r3, [r7, #6]
        IntCtlMask.tx_fifo_empty_interrupt_mask       =  false;
    1b1c:	2300      	movs	r3, #0
    1b1e:	717b      	strb	r3, [r7, #5]
        IntCtlMask.tx_fifo_overrun_interrupt_mask     =  false;
    1b20:	2300      	movs	r3, #0
    1b22:	713b      	strb	r3, [r7, #4]
        I2S_SetInterruptMask(I2SS ,&IntCtlMask);
    1b24:	1d3b      	adds	r3, r7, #4
    1b26:	4619      	mov	r1, r3
    1b28:	4805      	ldr	r0, [pc, #20]	; (1b40 <i2ss_SendData+0x6c>)
    1b2a:	f7ff f9b4 	bl	e96 <I2S_SetInterruptMask>
    }
}
    1b2e:	bf00      	nop
    1b30:	3710      	adds	r7, #16
    1b32:	46bd      	mov	sp, r7
    1b34:	bd80      	pop	{r7, pc}
    1b36:	bf00      	nop
    1b38:	66666660 	.word	0x66666660
    1b3c:	99999990 	.word	0x99999990
    1b40:	90007800 	.word	0x90007800

00001b44 <main>:



int main (void)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b084      	sub	sp, #16
    1b48:	af00      	add	r7, sp, #0
    // LOG UART INIT
    sysTimeUpdataClk(SystemCoreClock);
    1b4a:	4b45      	ldr	r3, [pc, #276]	; (1c60 <main+0x11c>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	4618      	mov	r0, r3
    1b50:	f7ff fe9d 	bl	188e <sysTimeUpdataClk>
    Verrify_SendPinConnect(UART0_OUTPUT);
    1b54:	f24a 0002 	movw	r0, #40962	; 0xa002
    1b58:	f7ff fe50 	bl	17fc <Verrify_SendPinConnect>
    LOGUartInit();
    1b5c:	f7ff feb8 	bl	18d0 <LOGUartInit>
    c_printf("s_1_771_i2sm_i2sm_tx case \r\n");
    1b60:	4840      	ldr	r0, [pc, #256]	; (1c64 <main+0x120>)
    1b62:	f7ff ff2b 	bl	19bc <c_printf>
    {

        I2S_InitInof_Type   I2S_InitStru;
        PADConfig_Type      PAG_InitStru;

        memset(&PAG_InitStru,0,sizeof(PADConfig_Type));
    1b66:	463b      	mov	r3, r7
    1b68:	2204      	movs	r2, #4
    1b6a:	2100      	movs	r1, #0
    1b6c:	4618      	mov	r0, r3
    1b6e:	f000 f905 	bl	1d7c <memset>
        PAG_InitStru.set        = 0;
    1b72:	783b      	ldrb	r3, [r7, #0]
    1b74:	f36f 0300 	bfc	r3, #0, #1
    1b78:	703b      	strb	r3, [r7, #0]
       
        PAG_InitStru.pad_ctl    = PAD_MODE2;
    1b7a:	783b      	ldrb	r3, [r7, #0]
    1b7c:	2202      	movs	r2, #2
    1b7e:	f362 1306 	bfi	r3, r2, #4, #3
    1b82:	703b      	strb	r3, [r7, #0]
        PAG_InitStru.pad_ctl    = PAD_MODE0;
    1b84:	783b      	ldrb	r3, [r7, #0]
    1b86:	f36f 1306 	bfc	r3, #4, #3
    1b8a:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID19,&PAG_InitStru); //interface 1
    1b8c:	463b      	mov	r3, r7
    1b8e:	4619      	mov	r1, r3
    1b90:	2013      	movs	r0, #19
    1b92:	f7fe fbf9 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID20,&PAG_InitStru);
    1b96:	463b      	mov	r3, r7
    1b98:	4619      	mov	r1, r3
    1b9a:	2014      	movs	r0, #20
    1b9c:	f7fe fbf4 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID21,&PAG_InitStru);
    1ba0:	463b      	mov	r3, r7
    1ba2:	4619      	mov	r1, r3
    1ba4:	2015      	movs	r0, #21
    1ba6:	f7fe fbef 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID22,&PAG_InitStru);
    1baa:	463b      	mov	r3, r7
    1bac:	4619      	mov	r1, r3
    1bae:	2016      	movs	r0, #22
    1bb0:	f7fe fbea 	bl	388 <SystemPADConfig>
        
        PAG_InitStru.pad_ctl    = PAD_MODE3;
    1bb4:	783b      	ldrb	r3, [r7, #0]
    1bb6:	2203      	movs	r2, #3
    1bb8:	f362 1306 	bfi	r3, r2, #4, #3
    1bbc:	703b      	strb	r3, [r7, #0]
       // PAG_InitStru.pad_ctl    = PAD_MODE0;
        SystemPADConfig(PADID23,&PAG_InitStru); //interface 2
    1bbe:	463b      	mov	r3, r7
    1bc0:	4619      	mov	r1, r3
    1bc2:	2017      	movs	r0, #23
    1bc4:	f7fe fbe0 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID24,&PAG_InitStru);
    1bc8:	463b      	mov	r3, r7
    1bca:	4619      	mov	r1, r3
    1bcc:	2018      	movs	r0, #24
    1bce:	f7fe fbdb 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID25,&PAG_InitStru);
    1bd2:	463b      	mov	r3, r7
    1bd4:	4619      	mov	r1, r3
    1bd6:	2019      	movs	r0, #25
    1bd8:	f7fe fbd6 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID26,&PAG_InitStru);
    1bdc:	463b      	mov	r3, r7
    1bde:	4619      	mov	r1, r3
    1be0:	201a      	movs	r0, #26
    1be2:	f7fe fbd1 	bl	388 <SystemPADConfig>
        
        SCU_I2SDiv(10);
    1be6:	200a      	movs	r0, #10
    1be8:	f7ff f87e 	bl	ce8 <SCU_I2SDiv>
        I2S_InitStru.dirct_type= DATA_TX;
    1bec:	2302      	movs	r3, #2
    1bee:	713b      	strb	r3, [r7, #4]
        
        I2S_InitStru.clock_gating_type  =  NO_CLOCK_GATING;
    1bf0:	2300      	movs	r3, #0
    1bf2:	71bb      	strb	r3, [r7, #6]
        I2S_InitStru.clock_type         =  CLOCK_CYCLES_32;
    1bf4:	2302      	movs	r3, #2
    1bf6:	717b      	strb	r3, [r7, #5]
        I2S_InitStru.data_resl_type     =  RESOLUTION_32_BIT;
    1bf8:	2305      	movs	r3, #5
    1bfa:	71fb      	strb	r3, [r7, #7]
        SCU->IO_CONFIG |=0x10;
    1bfc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c02:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1c06:	f043 0310 	orr.w	r3, r3, #16
    1c0a:	6293      	str	r3, [r2, #40]	; 0x28
        SCU->IO_CONFIG |=0x20;
    1c0c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c12:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1c16:	f043 0320 	orr.w	r3, r3, #32
    1c1a:	6293      	str	r3, [r2, #40]	; 0x28
        I2S_InitStru.interrupt_level    = TRIGGER_LEVEL_1;
    1c1c:	2300      	movs	r3, #0
    1c1e:	723b      	strb	r3, [r7, #8]
        I2S_InitStru.IntCtlMask.rx_dma_available_interrupt_mask     =  true;
    1c20:	2301      	movs	r3, #1
    1c22:	733b      	strb	r3, [r7, #12]
        I2S_InitStru.IntCtlMask.rx_fifo_overrun_interrupt_mask      =  true;
    1c24:	2301      	movs	r3, #1
    1c26:	72fb      	strb	r3, [r7, #11]
        I2S_InitStru.IntCtlMask.tx_fifo_empty_interrupt_mask        =  true;
    1c28:	2301      	movs	r3, #1
    1c2a:	72bb      	strb	r3, [r7, #10]
        I2S_InitStru.IntCtlMask.tx_fifo_overrun_interrupt_mask      =  true;
    1c2c:	2301      	movs	r3, #1
    1c2e:	727b      	strb	r3, [r7, #9]

        SystemDevClockCtl(I2SM_CKEn,true);
    1c30:	2101      	movs	r1, #1
    1c32:	2008      	movs	r0, #8
    1c34:	f7fe fb6c 	bl	310 <SystemDevClockCtl>

        I2S_Init(I2SM, &I2S_InitStru);
    1c38:	1d3b      	adds	r3, r7, #4
    1c3a:	4619      	mov	r1, r3
    1c3c:	480a      	ldr	r0, [pc, #40]	; (1c68 <main+0x124>)
    1c3e:	f7ff f949 	bl	ed4 <I2S_Init>
        NVIC_EnableIRQ(I2SM_IRQn);
    1c42:	2008      	movs	r0, #8
    1c44:	f7ff fef2 	bl	1a2c <NVIC_EnableIRQ>
        i2sm_SendData();    
    1c48:	f7ff ff08 	bl	1a5c <i2sm_SendData>


    }
    c_printf("s_1_771_i2sm_i2sm_tx case completed \r\n");
    1c4c:	4807      	ldr	r0, [pc, #28]	; (1c6c <main+0x128>)
    1c4e:	f7ff feb5 	bl	19bc <c_printf>
	MCU_Sleep(3);
    1c52:	2003      	movs	r0, #3
    1c54:	f7ff fe06 	bl	1864 <MCU_Sleep>
    SimulationEnd();
    1c58:	f7ff fed2 	bl	1a00 <SimulationEnd>
    while(1){     
    1c5c:	e7fe      	b.n	1c5c <main+0x118>
    1c5e:	bf00      	nop
    1c60:	20008000 	.word	0x20008000
    1c64:	00002648 	.word	0x00002648
    1c68:	90007000 	.word	0x90007000
    1c6c:	00002668 	.word	0x00002668

00001c70 <I2SM_IRQHandler>:
}



void I2SM_IRQHandler(void)      
{     
    1c70:	b590      	push	{r4, r7, lr}
    1c72:	b083      	sub	sp, #12
    1c74:	af00      	add	r7, sp, #0
    c_printf("I2SM_IRQ\n"); 
    1c76:	482a      	ldr	r0, [pc, #168]	; (1d20 <I2SM_IRQHandler+0xb0>)
    1c78:	f7ff fea0 	bl	19bc <c_printf>
    if( I2S_GetInterruptStatus(I2SM,I2S_RX_AVAILABLE_DAM))
    1c7c:	2100      	movs	r1, #0
    1c7e:	4829      	ldr	r0, [pc, #164]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1c80:	f7ff f98d 	bl	f9e <I2S_GetInterruptStatus>
    1c84:	4603      	mov	r3, r0
    1c86:	2b00      	cmp	r3, #0
    1c88:	d00c      	beq.n	1ca4 <I2SM_IRQHandler+0x34>
    {
        c_printf("MRX_ADAM r[%X],l[%X]\n",\
    1c8a:	4826      	ldr	r0, [pc, #152]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1c8c:	f7ff f8a7 	bl	dde <I2S_GetRightReceiveData>
    1c90:	4604      	mov	r4, r0
    1c92:	4824      	ldr	r0, [pc, #144]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1c94:	f7ff f896 	bl	dc4 <I2S_GetLeftReceiveData>
    1c98:	4603      	mov	r3, r0
    1c9a:	461a      	mov	r2, r3
    1c9c:	4621      	mov	r1, r4
    1c9e:	4822      	ldr	r0, [pc, #136]	; (1d28 <I2SM_IRQHandler+0xb8>)
    1ca0:	f7ff fe8c 	bl	19bc <c_printf>
            I2S_GetRightReceiveData(I2SM),\
            I2S_GetLeftReceiveData(I2SM));
    }
    if( I2S_GetInterruptStatus(I2SM,I2S_RX_FIFO_OVERRUN))
    1ca4:	2101      	movs	r1, #1
    1ca6:	481f      	ldr	r0, [pc, #124]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1ca8:	f7ff f979 	bl	f9e <I2S_GetInterruptStatus>
    1cac:	4603      	mov	r3, r0
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d005      	beq.n	1cbe <I2SM_IRQHandler+0x4e>
    {
        I2S_ClearRxOverrunInterrupt(I2SM);
    1cb2:	481c      	ldr	r0, [pc, #112]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1cb4:	f7ff f9c4 	bl	1040 <I2S_ClearRxOverrunInterrupt>
        c_printf("RX_OVERRUN\r\n");
    1cb8:	481c      	ldr	r0, [pc, #112]	; (1d2c <I2SM_IRQHandler+0xbc>)
    1cba:	f7ff fe7f 	bl	19bc <c_printf>
    }
    if( I2S_GetInterruptStatus(I2SM,I2S_TX_FIFO_EMPTY))
    1cbe:	2102      	movs	r1, #2
    1cc0:	4818      	ldr	r0, [pc, #96]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1cc2:	f7ff f96c 	bl	f9e <I2S_GetInterruptStatus>
    1cc6:	4603      	mov	r3, r0
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d013      	beq.n	1cf4 <I2SM_IRQHandler+0x84>
    {
        {
            I2S_IntCtlMask  IntCtlMask;

            IntCtlMask.rx_dma_available_interrupt_mask    =  false;
    1ccc:	2300      	movs	r3, #0
    1cce:	71fb      	strb	r3, [r7, #7]
            IntCtlMask.rx_fifo_overrun_interrupt_mask     =  true;
    1cd0:	2301      	movs	r3, #1
    1cd2:	71bb      	strb	r3, [r7, #6]
            IntCtlMask.tx_fifo_empty_interrupt_mask       =  true;
    1cd4:	2301      	movs	r3, #1
    1cd6:	717b      	strb	r3, [r7, #5]
            IntCtlMask.tx_fifo_overrun_interrupt_mask     =  true;
    1cd8:	2301      	movs	r3, #1
    1cda:	713b      	strb	r3, [r7, #4]
            I2S_SetInterruptMask(I2SM,&IntCtlMask);
    1cdc:	1d3b      	adds	r3, r7, #4
    1cde:	4619      	mov	r1, r3
    1ce0:	4810      	ldr	r0, [pc, #64]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1ce2:	f7ff f8d8 	bl	e96 <I2S_SetInterruptMask>

        }
        I2S_GeneratrClock(I2SM,false);
    1ce6:	2100      	movs	r1, #0
    1ce8:	480e      	ldr	r0, [pc, #56]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1cea:	f7ff f8bf 	bl	e6c <I2S_GeneratrClock>
        //i2sm_SendData();
        c_printf("TX_EMPTY\r\n");
    1cee:	4810      	ldr	r0, [pc, #64]	; (1d30 <I2SM_IRQHandler+0xc0>)
    1cf0:	f7ff fe64 	bl	19bc <c_printf>
    }
    if( I2S_GetInterruptStatus(I2SM,I2S_TX_FIFO_OVERRUN))
    1cf4:	2103      	movs	r1, #3
    1cf6:	480b      	ldr	r0, [pc, #44]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1cf8:	f7ff f951 	bl	f9e <I2S_GetInterruptStatus>
    1cfc:	4603      	mov	r3, r0
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d009      	beq.n	1d16 <I2SM_IRQHandler+0xa6>
    {
        I2S_ClearTxOverrunInterrupt(I2SM);
    1d02:	4808      	ldr	r0, [pc, #32]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1d04:	f7ff f9b0 	bl	1068 <I2S_ClearTxOverrunInterrupt>
        c_printf("TX_OVERRUN\r\n");
    1d08:	480a      	ldr	r0, [pc, #40]	; (1d34 <I2SM_IRQHandler+0xc4>)
    1d0a:	f7ff fe57 	bl	19bc <c_printf>
        I2S_GeneratrClock(I2SM,false);
    1d0e:	2100      	movs	r1, #0
    1d10:	4804      	ldr	r0, [pc, #16]	; (1d24 <I2SM_IRQHandler+0xb4>)
    1d12:	f7ff f8ab 	bl	e6c <I2S_GeneratrClock>
    }
}    
    1d16:	bf00      	nop
    1d18:	370c      	adds	r7, #12
    1d1a:	46bd      	mov	sp, r7
    1d1c:	bd90      	pop	{r4, r7, pc}
    1d1e:	bf00      	nop
    1d20:	00002690 	.word	0x00002690
    1d24:	90007000 	.word	0x90007000
    1d28:	0000269c 	.word	0x0000269c
    1d2c:	000026b4 	.word	0x000026b4
    1d30:	000026c4 	.word	0x000026c4
    1d34:	000026d0 	.word	0x000026d0

00001d38 <exit>:
    1d38:	b508      	push	{r3, lr}
    1d3a:	4b07      	ldr	r3, [pc, #28]	; (1d58 <exit+0x20>)
    1d3c:	4604      	mov	r4, r0
    1d3e:	b113      	cbz	r3, 1d46 <exit+0xe>
    1d40:	2100      	movs	r1, #0
    1d42:	f3af 8000 	nop.w
    1d46:	4b05      	ldr	r3, [pc, #20]	; (1d5c <exit+0x24>)
    1d48:	6818      	ldr	r0, [r3, #0]
    1d4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1d4c:	b103      	cbz	r3, 1d50 <exit+0x18>
    1d4e:	4798      	blx	r3
    1d50:	4620      	mov	r0, r4
    1d52:	f000 fc43 	bl	25dc <_exit>
    1d56:	bf00      	nop
    1d58:	00000000 	.word	0x00000000
    1d5c:	000026e0 	.word	0x000026e0

00001d60 <memcpy>:
    1d60:	440a      	add	r2, r1
    1d62:	4291      	cmp	r1, r2
    1d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1d68:	d100      	bne.n	1d6c <memcpy+0xc>
    1d6a:	4770      	bx	lr
    1d6c:	b510      	push	{r4, lr}
    1d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1d72:	4291      	cmp	r1, r2
    1d74:	f803 4f01 	strb.w	r4, [r3, #1]!
    1d78:	d1f9      	bne.n	1d6e <memcpy+0xe>
    1d7a:	bd10      	pop	{r4, pc}

00001d7c <memset>:
    1d7c:	4603      	mov	r3, r0
    1d7e:	4402      	add	r2, r0
    1d80:	4293      	cmp	r3, r2
    1d82:	d100      	bne.n	1d86 <memset+0xa>
    1d84:	4770      	bx	lr
    1d86:	f803 1b01 	strb.w	r1, [r3], #1
    1d8a:	e7f9      	b.n	1d80 <memset+0x4>

00001d8c <_vsiprintf_r>:
    1d8c:	b500      	push	{lr}
    1d8e:	b09b      	sub	sp, #108	; 0x6c
    1d90:	9100      	str	r1, [sp, #0]
    1d92:	9104      	str	r1, [sp, #16]
    1d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1d98:	9105      	str	r1, [sp, #20]
    1d9a:	9102      	str	r1, [sp, #8]
    1d9c:	4905      	ldr	r1, [pc, #20]	; (1db4 <_vsiprintf_r+0x28>)
    1d9e:	9103      	str	r1, [sp, #12]
    1da0:	4669      	mov	r1, sp
    1da2:	f000 f86f 	bl	1e84 <_svfiprintf_r>
    1da6:	2200      	movs	r2, #0
    1da8:	9b00      	ldr	r3, [sp, #0]
    1daa:	701a      	strb	r2, [r3, #0]
    1dac:	b01b      	add	sp, #108	; 0x6c
    1dae:	f85d fb04 	ldr.w	pc, [sp], #4
    1db2:	bf00      	nop
    1db4:	ffff0208 	.word	0xffff0208

00001db8 <vsiprintf>:
    1db8:	4613      	mov	r3, r2
    1dba:	460a      	mov	r2, r1
    1dbc:	4601      	mov	r1, r0
    1dbe:	4802      	ldr	r0, [pc, #8]	; (1dc8 <vsiprintf+0x10>)
    1dc0:	6800      	ldr	r0, [r0, #0]
    1dc2:	f7ff bfe3 	b.w	1d8c <_vsiprintf_r>
    1dc6:	bf00      	nop
    1dc8:	20008008 	.word	0x20008008

00001dcc <__ssputs_r>:
    1dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dd0:	688e      	ldr	r6, [r1, #8]
    1dd2:	4682      	mov	sl, r0
    1dd4:	429e      	cmp	r6, r3
    1dd6:	460c      	mov	r4, r1
    1dd8:	4691      	mov	r9, r2
    1dda:	4698      	mov	r8, r3
    1ddc:	d838      	bhi.n	1e50 <__ssputs_r+0x84>
    1dde:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    1de2:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    1de6:	d031      	beq.n	1e4c <__ssputs_r+0x80>
    1de8:	6962      	ldr	r2, [r4, #20]
    1dea:	6825      	ldr	r5, [r4, #0]
    1dec:	6909      	ldr	r1, [r1, #16]
    1dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1df2:	1a6f      	subs	r7, r5, r1
    1df4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    1df8:	3301      	adds	r3, #1
    1dfa:	1055      	asrs	r5, r2, #1
    1dfc:	443b      	add	r3, r7
    1dfe:	429d      	cmp	r5, r3
    1e00:	bf38      	it	cc
    1e02:	461d      	movcc	r5, r3
    1e04:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    1e08:	d030      	beq.n	1e6c <__ssputs_r+0xa0>
    1e0a:	4629      	mov	r1, r5
    1e0c:	f000 fb32 	bl	2474 <_malloc_r>
    1e10:	4606      	mov	r6, r0
    1e12:	b950      	cbnz	r0, 1e2a <__ssputs_r+0x5e>
    1e14:	230c      	movs	r3, #12
    1e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e1a:	f8ca 3000 	str.w	r3, [sl]
    1e1e:	89a3      	ldrh	r3, [r4, #12]
    1e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e24:	81a3      	strh	r3, [r4, #12]
    1e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e2a:	463a      	mov	r2, r7
    1e2c:	6921      	ldr	r1, [r4, #16]
    1e2e:	f7ff ff97 	bl	1d60 <memcpy>
    1e32:	89a3      	ldrh	r3, [r4, #12]
    1e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1e3c:	81a3      	strh	r3, [r4, #12]
    1e3e:	6126      	str	r6, [r4, #16]
    1e40:	443e      	add	r6, r7
    1e42:	6026      	str	r6, [r4, #0]
    1e44:	4646      	mov	r6, r8
    1e46:	6165      	str	r5, [r4, #20]
    1e48:	1bed      	subs	r5, r5, r7
    1e4a:	60a5      	str	r5, [r4, #8]
    1e4c:	4546      	cmp	r6, r8
    1e4e:	d900      	bls.n	1e52 <__ssputs_r+0x86>
    1e50:	4646      	mov	r6, r8
    1e52:	4632      	mov	r2, r6
    1e54:	4649      	mov	r1, r9
    1e56:	6820      	ldr	r0, [r4, #0]
    1e58:	f000 faa6 	bl	23a8 <memmove>
    1e5c:	68a3      	ldr	r3, [r4, #8]
    1e5e:	2000      	movs	r0, #0
    1e60:	1b9b      	subs	r3, r3, r6
    1e62:	60a3      	str	r3, [r4, #8]
    1e64:	6823      	ldr	r3, [r4, #0]
    1e66:	441e      	add	r6, r3
    1e68:	6026      	str	r6, [r4, #0]
    1e6a:	e7dc      	b.n	1e26 <__ssputs_r+0x5a>
    1e6c:	462a      	mov	r2, r5
    1e6e:	f000 fb5b 	bl	2528 <_realloc_r>
    1e72:	4606      	mov	r6, r0
    1e74:	2800      	cmp	r0, #0
    1e76:	d1e2      	bne.n	1e3e <__ssputs_r+0x72>
    1e78:	6921      	ldr	r1, [r4, #16]
    1e7a:	4650      	mov	r0, sl
    1e7c:	f000 faae 	bl	23dc <_free_r>
    1e80:	e7c8      	b.n	1e14 <__ssputs_r+0x48>
	...

00001e84 <_svfiprintf_r>:
    1e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e88:	461e      	mov	r6, r3
    1e8a:	898b      	ldrh	r3, [r1, #12]
    1e8c:	b09d      	sub	sp, #116	; 0x74
    1e8e:	061b      	lsls	r3, r3, #24
    1e90:	4607      	mov	r7, r0
    1e92:	460d      	mov	r5, r1
    1e94:	4614      	mov	r4, r2
    1e96:	d50e      	bpl.n	1eb6 <_svfiprintf_r+0x32>
    1e98:	690b      	ldr	r3, [r1, #16]
    1e9a:	b963      	cbnz	r3, 1eb6 <_svfiprintf_r+0x32>
    1e9c:	2140      	movs	r1, #64	; 0x40
    1e9e:	f000 fae9 	bl	2474 <_malloc_r>
    1ea2:	6028      	str	r0, [r5, #0]
    1ea4:	6128      	str	r0, [r5, #16]
    1ea6:	b920      	cbnz	r0, 1eb2 <_svfiprintf_r+0x2e>
    1ea8:	230c      	movs	r3, #12
    1eaa:	603b      	str	r3, [r7, #0]
    1eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1eb0:	e0c9      	b.n	2046 <Heap_Size+0x46>
    1eb2:	2340      	movs	r3, #64	; 0x40
    1eb4:	616b      	str	r3, [r5, #20]
    1eb6:	2300      	movs	r3, #0
    1eb8:	9309      	str	r3, [sp, #36]	; 0x24
    1eba:	2320      	movs	r3, #32
    1ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1ec0:	2330      	movs	r3, #48	; 0x30
    1ec2:	f04f 0a01 	mov.w	sl, #1
    1ec6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 2060 <Heap_Size+0x60>
    1eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1ece:	9603      	str	r6, [sp, #12]
    1ed0:	4623      	mov	r3, r4
    1ed2:	461e      	mov	r6, r3
    1ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
    1ed8:	b10a      	cbz	r2, 1ede <_svfiprintf_r+0x5a>
    1eda:	2a25      	cmp	r2, #37	; 0x25
    1edc:	d1f9      	bne.n	1ed2 <_svfiprintf_r+0x4e>
    1ede:	ebb6 0b04 	subs.w	fp, r6, r4
    1ee2:	d00b      	beq.n	1efc <_svfiprintf_r+0x78>
    1ee4:	465b      	mov	r3, fp
    1ee6:	4622      	mov	r2, r4
    1ee8:	4629      	mov	r1, r5
    1eea:	4638      	mov	r0, r7
    1eec:	f7ff ff6e 	bl	1dcc <__ssputs_r>
    1ef0:	3001      	adds	r0, #1
    1ef2:	f000 80a3 	beq.w	203c <Heap_Size+0x3c>
    1ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ef8:	445b      	add	r3, fp
    1efa:	9309      	str	r3, [sp, #36]	; 0x24
    1efc:	7833      	ldrb	r3, [r6, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	f000 809c 	beq.w	203c <Heap_Size+0x3c>
    1f04:	2300      	movs	r3, #0
    1f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1f0e:	3601      	adds	r6, #1
    1f10:	9304      	str	r3, [sp, #16]
    1f12:	9307      	str	r3, [sp, #28]
    1f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1f18:	931a      	str	r3, [sp, #104]	; 0x68
    1f1a:	4634      	mov	r4, r6
    1f1c:	2205      	movs	r2, #5
    1f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
    1f22:	484f      	ldr	r0, [pc, #316]	; (2060 <Heap_Size+0x60>)
    1f24:	f000 fa32 	bl	238c <memchr>
    1f28:	9b04      	ldr	r3, [sp, #16]
    1f2a:	b9c0      	cbnz	r0, 1f5e <_svfiprintf_r+0xda>
    1f2c:	06d9      	lsls	r1, r3, #27
    1f2e:	bf44      	itt	mi
    1f30:	2220      	movmi	r2, #32
    1f32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1f36:	071a      	lsls	r2, r3, #28
    1f38:	bf44      	itt	mi
    1f3a:	222b      	movmi	r2, #43	; 0x2b
    1f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1f40:	7832      	ldrb	r2, [r6, #0]
    1f42:	2a2a      	cmp	r2, #42	; 0x2a
    1f44:	d013      	beq.n	1f6e <_svfiprintf_r+0xea>
    1f46:	4634      	mov	r4, r6
    1f48:	2000      	movs	r0, #0
    1f4a:	260a      	movs	r6, #10
    1f4c:	9a07      	ldr	r2, [sp, #28]
    1f4e:	4621      	mov	r1, r4
    1f50:	f811 3b01 	ldrb.w	r3, [r1], #1
    1f54:	3b30      	subs	r3, #48	; 0x30
    1f56:	2b09      	cmp	r3, #9
    1f58:	d94b      	bls.n	1ff2 <_svfiprintf_r+0x16e>
    1f5a:	b970      	cbnz	r0, 1f7a <_svfiprintf_r+0xf6>
    1f5c:	e014      	b.n	1f88 <_svfiprintf_r+0x104>
    1f5e:	eba0 0009 	sub.w	r0, r0, r9
    1f62:	fa0a f000 	lsl.w	r0, sl, r0
    1f66:	4318      	orrs	r0, r3
    1f68:	9004      	str	r0, [sp, #16]
    1f6a:	4626      	mov	r6, r4
    1f6c:	e7d5      	b.n	1f1a <_svfiprintf_r+0x96>
    1f6e:	9a03      	ldr	r2, [sp, #12]
    1f70:	1d11      	adds	r1, r2, #4
    1f72:	6812      	ldr	r2, [r2, #0]
    1f74:	9103      	str	r1, [sp, #12]
    1f76:	2a00      	cmp	r2, #0
    1f78:	db01      	blt.n	1f7e <_svfiprintf_r+0xfa>
    1f7a:	9207      	str	r2, [sp, #28]
    1f7c:	e004      	b.n	1f88 <_svfiprintf_r+0x104>
    1f7e:	4252      	negs	r2, r2
    1f80:	f043 0302 	orr.w	r3, r3, #2
    1f84:	9207      	str	r2, [sp, #28]
    1f86:	9304      	str	r3, [sp, #16]
    1f88:	7823      	ldrb	r3, [r4, #0]
    1f8a:	2b2e      	cmp	r3, #46	; 0x2e
    1f8c:	d10c      	bne.n	1fa8 <_svfiprintf_r+0x124>
    1f8e:	7863      	ldrb	r3, [r4, #1]
    1f90:	2b2a      	cmp	r3, #42	; 0x2a
    1f92:	d133      	bne.n	1ffc <_svfiprintf_r+0x178>
    1f94:	9b03      	ldr	r3, [sp, #12]
    1f96:	3402      	adds	r4, #2
    1f98:	1d1a      	adds	r2, r3, #4
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	9203      	str	r2, [sp, #12]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	bfb8      	it	lt
    1fa2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1fa6:	9305      	str	r3, [sp, #20]
    1fa8:	4e2e      	ldr	r6, [pc, #184]	; (2064 <Heap_Size+0x64>)
    1faa:	2203      	movs	r2, #3
    1fac:	7821      	ldrb	r1, [r4, #0]
    1fae:	4630      	mov	r0, r6
    1fb0:	f000 f9ec 	bl	238c <memchr>
    1fb4:	b138      	cbz	r0, 1fc6 <_svfiprintf_r+0x142>
    1fb6:	2340      	movs	r3, #64	; 0x40
    1fb8:	1b80      	subs	r0, r0, r6
    1fba:	fa03 f000 	lsl.w	r0, r3, r0
    1fbe:	9b04      	ldr	r3, [sp, #16]
    1fc0:	3401      	adds	r4, #1
    1fc2:	4303      	orrs	r3, r0
    1fc4:	9304      	str	r3, [sp, #16]
    1fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
    1fca:	2206      	movs	r2, #6
    1fcc:	4826      	ldr	r0, [pc, #152]	; (2068 <Heap_Size+0x68>)
    1fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1fd2:	f000 f9db 	bl	238c <memchr>
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d038      	beq.n	204c <Heap_Size+0x4c>
    1fda:	4b24      	ldr	r3, [pc, #144]	; (206c <Heap_Size+0x6c>)
    1fdc:	bb13      	cbnz	r3, 2024 <Heap_Size+0x24>
    1fde:	9b03      	ldr	r3, [sp, #12]
    1fe0:	3307      	adds	r3, #7
    1fe2:	f023 0307 	bic.w	r3, r3, #7
    1fe6:	3308      	adds	r3, #8
    1fe8:	9303      	str	r3, [sp, #12]
    1fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fec:	4443      	add	r3, r8
    1fee:	9309      	str	r3, [sp, #36]	; 0x24
    1ff0:	e76e      	b.n	1ed0 <_svfiprintf_r+0x4c>
    1ff2:	fb06 3202 	mla	r2, r6, r2, r3
    1ff6:	2001      	movs	r0, #1
    1ff8:	460c      	mov	r4, r1
    1ffa:	e7a8      	b.n	1f4e <_svfiprintf_r+0xca>
    1ffc:	2300      	movs	r3, #0
    1ffe:	260a      	movs	r6, #10
    2000:	4619      	mov	r1, r3
    2002:	3401      	adds	r4, #1
    2004:	9305      	str	r3, [sp, #20]
    2006:	4620      	mov	r0, r4
    2008:	f810 2b01 	ldrb.w	r2, [r0], #1
    200c:	3a30      	subs	r2, #48	; 0x30
    200e:	2a09      	cmp	r2, #9
    2010:	d903      	bls.n	201a <Heap_Size+0x1a>
    2012:	2b00      	cmp	r3, #0
    2014:	d0c8      	beq.n	1fa8 <_svfiprintf_r+0x124>
    2016:	9105      	str	r1, [sp, #20]
    2018:	e7c6      	b.n	1fa8 <_svfiprintf_r+0x124>
    201a:	fb06 2101 	mla	r1, r6, r1, r2
    201e:	2301      	movs	r3, #1
    2020:	4604      	mov	r4, r0
    2022:	e7f0      	b.n	2006 <Heap_Size+0x6>
    2024:	ab03      	add	r3, sp, #12
    2026:	9300      	str	r3, [sp, #0]
    2028:	462a      	mov	r2, r5
    202a:	4b11      	ldr	r3, [pc, #68]	; (2070 <Heap_Size+0x70>)
    202c:	a904      	add	r1, sp, #16
    202e:	4638      	mov	r0, r7
    2030:	f3af 8000 	nop.w
    2034:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2038:	4680      	mov	r8, r0
    203a:	d1d6      	bne.n	1fea <_svfiprintf_r+0x166>
    203c:	89ab      	ldrh	r3, [r5, #12]
    203e:	065b      	lsls	r3, r3, #25
    2040:	f53f af34 	bmi.w	1eac <_svfiprintf_r+0x28>
    2044:	9809      	ldr	r0, [sp, #36]	; 0x24
    2046:	b01d      	add	sp, #116	; 0x74
    2048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    204c:	ab03      	add	r3, sp, #12
    204e:	9300      	str	r3, [sp, #0]
    2050:	462a      	mov	r2, r5
    2052:	4b07      	ldr	r3, [pc, #28]	; (2070 <Heap_Size+0x70>)
    2054:	a904      	add	r1, sp, #16
    2056:	4638      	mov	r0, r7
    2058:	f000 f882 	bl	2160 <_printf_i>
    205c:	e7ea      	b.n	2034 <Heap_Size+0x34>
    205e:	bf00      	nop
    2060:	000026e4 	.word	0x000026e4
    2064:	000026ea 	.word	0x000026ea
    2068:	000026ee 	.word	0x000026ee
    206c:	00000000 	.word	0x00000000
    2070:	00001dcd 	.word	0x00001dcd

00002074 <_printf_common>:
    2074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2078:	4691      	mov	r9, r2
    207a:	461f      	mov	r7, r3
    207c:	688a      	ldr	r2, [r1, #8]
    207e:	690b      	ldr	r3, [r1, #16]
    2080:	4606      	mov	r6, r0
    2082:	4293      	cmp	r3, r2
    2084:	bfb8      	it	lt
    2086:	4613      	movlt	r3, r2
    2088:	f8c9 3000 	str.w	r3, [r9]
    208c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2090:	460c      	mov	r4, r1
    2092:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2096:	b112      	cbz	r2, 209e <_printf_common+0x2a>
    2098:	3301      	adds	r3, #1
    209a:	f8c9 3000 	str.w	r3, [r9]
    209e:	6823      	ldr	r3, [r4, #0]
    20a0:	0699      	lsls	r1, r3, #26
    20a2:	bf42      	ittt	mi
    20a4:	f8d9 3000 	ldrmi.w	r3, [r9]
    20a8:	3302      	addmi	r3, #2
    20aa:	f8c9 3000 	strmi.w	r3, [r9]
    20ae:	6825      	ldr	r5, [r4, #0]
    20b0:	f015 0506 	ands.w	r5, r5, #6
    20b4:	d107      	bne.n	20c6 <_printf_common+0x52>
    20b6:	f104 0a19 	add.w	sl, r4, #25
    20ba:	68e3      	ldr	r3, [r4, #12]
    20bc:	f8d9 2000 	ldr.w	r2, [r9]
    20c0:	1a9b      	subs	r3, r3, r2
    20c2:	42ab      	cmp	r3, r5
    20c4:	dc29      	bgt.n	211a <_printf_common+0xa6>
    20c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    20ca:	6822      	ldr	r2, [r4, #0]
    20cc:	3300      	adds	r3, #0
    20ce:	bf18      	it	ne
    20d0:	2301      	movne	r3, #1
    20d2:	0692      	lsls	r2, r2, #26
    20d4:	d42e      	bmi.n	2134 <_printf_common+0xc0>
    20d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    20da:	4639      	mov	r1, r7
    20dc:	4630      	mov	r0, r6
    20de:	47c0      	blx	r8
    20e0:	3001      	adds	r0, #1
    20e2:	d021      	beq.n	2128 <_printf_common+0xb4>
    20e4:	6823      	ldr	r3, [r4, #0]
    20e6:	68e5      	ldr	r5, [r4, #12]
    20e8:	f003 0306 	and.w	r3, r3, #6
    20ec:	2b04      	cmp	r3, #4
    20ee:	bf18      	it	ne
    20f0:	2500      	movne	r5, #0
    20f2:	f8d9 2000 	ldr.w	r2, [r9]
    20f6:	f04f 0900 	mov.w	r9, #0
    20fa:	bf08      	it	eq
    20fc:	1aad      	subeq	r5, r5, r2
    20fe:	68a3      	ldr	r3, [r4, #8]
    2100:	6922      	ldr	r2, [r4, #16]
    2102:	bf08      	it	eq
    2104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2108:	4293      	cmp	r3, r2
    210a:	bfc4      	itt	gt
    210c:	1a9b      	subgt	r3, r3, r2
    210e:	18ed      	addgt	r5, r5, r3
    2110:	341a      	adds	r4, #26
    2112:	454d      	cmp	r5, r9
    2114:	d11a      	bne.n	214c <_printf_common+0xd8>
    2116:	2000      	movs	r0, #0
    2118:	e008      	b.n	212c <_printf_common+0xb8>
    211a:	2301      	movs	r3, #1
    211c:	4652      	mov	r2, sl
    211e:	4639      	mov	r1, r7
    2120:	4630      	mov	r0, r6
    2122:	47c0      	blx	r8
    2124:	3001      	adds	r0, #1
    2126:	d103      	bne.n	2130 <_printf_common+0xbc>
    2128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    212c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2130:	3501      	adds	r5, #1
    2132:	e7c2      	b.n	20ba <_printf_common+0x46>
    2134:	2030      	movs	r0, #48	; 0x30
    2136:	18e1      	adds	r1, r4, r3
    2138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    213c:	1c5a      	adds	r2, r3, #1
    213e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2142:	4422      	add	r2, r4
    2144:	3302      	adds	r3, #2
    2146:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    214a:	e7c4      	b.n	20d6 <_printf_common+0x62>
    214c:	2301      	movs	r3, #1
    214e:	4622      	mov	r2, r4
    2150:	4639      	mov	r1, r7
    2152:	4630      	mov	r0, r6
    2154:	47c0      	blx	r8
    2156:	3001      	adds	r0, #1
    2158:	d0e6      	beq.n	2128 <_printf_common+0xb4>
    215a:	f109 0901 	add.w	r9, r9, #1
    215e:	e7d8      	b.n	2112 <_printf_common+0x9e>

00002160 <_printf_i>:
    2160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2164:	4606      	mov	r6, r0
    2166:	460c      	mov	r4, r1
    2168:	f101 0043 	add.w	r0, r1, #67	; 0x43
    216c:	7e09      	ldrb	r1, [r1, #24]
    216e:	b085      	sub	sp, #20
    2170:	296e      	cmp	r1, #110	; 0x6e
    2172:	4698      	mov	r8, r3
    2174:	4617      	mov	r7, r2
    2176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2178:	f000 80bb 	beq.w	22f2 <_printf_i+0x192>
    217c:	d824      	bhi.n	21c8 <_printf_i+0x68>
    217e:	2963      	cmp	r1, #99	; 0x63
    2180:	d039      	beq.n	21f6 <_printf_i+0x96>
    2182:	d80a      	bhi.n	219a <_printf_i+0x3a>
    2184:	2900      	cmp	r1, #0
    2186:	f000 80c4 	beq.w	2312 <_printf_i+0x1b2>
    218a:	2958      	cmp	r1, #88	; 0x58
    218c:	f000 8092 	beq.w	22b4 <_printf_i+0x154>
    2190:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2198:	e035      	b.n	2206 <_printf_i+0xa6>
    219a:	2964      	cmp	r1, #100	; 0x64
    219c:	d001      	beq.n	21a2 <_printf_i+0x42>
    219e:	2969      	cmp	r1, #105	; 0x69
    21a0:	d1f6      	bne.n	2190 <_printf_i+0x30>
    21a2:	6825      	ldr	r5, [r4, #0]
    21a4:	681a      	ldr	r2, [r3, #0]
    21a6:	f015 0f80 	tst.w	r5, #128	; 0x80
    21aa:	f102 0104 	add.w	r1, r2, #4
    21ae:	d02c      	beq.n	220a <_printf_i+0xaa>
    21b0:	6812      	ldr	r2, [r2, #0]
    21b2:	6019      	str	r1, [r3, #0]
    21b4:	2a00      	cmp	r2, #0
    21b6:	da03      	bge.n	21c0 <_printf_i+0x60>
    21b8:	232d      	movs	r3, #45	; 0x2d
    21ba:	4252      	negs	r2, r2
    21bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    21c0:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 2384 <_printf_i+0x224>
    21c4:	230a      	movs	r3, #10
    21c6:	e03f      	b.n	2248 <_printf_i+0xe8>
    21c8:	2973      	cmp	r1, #115	; 0x73
    21ca:	f000 80a6 	beq.w	231a <_printf_i+0x1ba>
    21ce:	d808      	bhi.n	21e2 <_printf_i+0x82>
    21d0:	296f      	cmp	r1, #111	; 0x6f
    21d2:	d021      	beq.n	2218 <_printf_i+0xb8>
    21d4:	2970      	cmp	r1, #112	; 0x70
    21d6:	d1db      	bne.n	2190 <_printf_i+0x30>
    21d8:	6822      	ldr	r2, [r4, #0]
    21da:	f042 0220 	orr.w	r2, r2, #32
    21de:	6022      	str	r2, [r4, #0]
    21e0:	e003      	b.n	21ea <_printf_i+0x8a>
    21e2:	2975      	cmp	r1, #117	; 0x75
    21e4:	d018      	beq.n	2218 <_printf_i+0xb8>
    21e6:	2978      	cmp	r1, #120	; 0x78
    21e8:	d1d2      	bne.n	2190 <_printf_i+0x30>
    21ea:	2278      	movs	r2, #120	; 0x78
    21ec:	f8df c198 	ldr.w	ip, [pc, #408]	; 2388 <_printf_i+0x228>
    21f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    21f4:	e062      	b.n	22bc <_printf_i+0x15c>
    21f6:	681a      	ldr	r2, [r3, #0]
    21f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    21fc:	1d11      	adds	r1, r2, #4
    21fe:	6019      	str	r1, [r3, #0]
    2200:	6813      	ldr	r3, [r2, #0]
    2202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2206:	2301      	movs	r3, #1
    2208:	e094      	b.n	2334 <_printf_i+0x1d4>
    220a:	6812      	ldr	r2, [r2, #0]
    220c:	f015 0f40 	tst.w	r5, #64	; 0x40
    2210:	6019      	str	r1, [r3, #0]
    2212:	bf18      	it	ne
    2214:	b212      	sxthne	r2, r2
    2216:	e7cd      	b.n	21b4 <_printf_i+0x54>
    2218:	f8d4 c000 	ldr.w	ip, [r4]
    221c:	681a      	ldr	r2, [r3, #0]
    221e:	f01c 0f80 	tst.w	ip, #128	; 0x80
    2222:	f102 0504 	add.w	r5, r2, #4
    2226:	601d      	str	r5, [r3, #0]
    2228:	d001      	beq.n	222e <_printf_i+0xce>
    222a:	6812      	ldr	r2, [r2, #0]
    222c:	e003      	b.n	2236 <_printf_i+0xd6>
    222e:	f01c 0f40 	tst.w	ip, #64	; 0x40
    2232:	d0fa      	beq.n	222a <_printf_i+0xca>
    2234:	8812      	ldrh	r2, [r2, #0]
    2236:	296f      	cmp	r1, #111	; 0x6f
    2238:	bf0c      	ite	eq
    223a:	2308      	moveq	r3, #8
    223c:	230a      	movne	r3, #10
    223e:	f8df c144 	ldr.w	ip, [pc, #324]	; 2384 <_printf_i+0x224>
    2242:	2100      	movs	r1, #0
    2244:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    2248:	6865      	ldr	r5, [r4, #4]
    224a:	2d00      	cmp	r5, #0
    224c:	bfa8      	it	ge
    224e:	6821      	ldrge	r1, [r4, #0]
    2250:	60a5      	str	r5, [r4, #8]
    2252:	bfa4      	itt	ge
    2254:	f021 0104 	bicge.w	r1, r1, #4
    2258:	6021      	strge	r1, [r4, #0]
    225a:	b90a      	cbnz	r2, 2260 <_printf_i+0x100>
    225c:	2d00      	cmp	r5, #0
    225e:	d046      	beq.n	22ee <_printf_i+0x18e>
    2260:	4605      	mov	r5, r0
    2262:	fbb2 f1f3 	udiv	r1, r2, r3
    2266:	fb03 2e11 	mls	lr, r3, r1, r2
    226a:	f81c e00e 	ldrb.w	lr, [ip, lr]
    226e:	4293      	cmp	r3, r2
    2270:	f805 ed01 	strb.w	lr, [r5, #-1]!
    2274:	d939      	bls.n	22ea <_printf_i+0x18a>
    2276:	2b08      	cmp	r3, #8
    2278:	d10b      	bne.n	2292 <_printf_i+0x132>
    227a:	6823      	ldr	r3, [r4, #0]
    227c:	07da      	lsls	r2, r3, #31
    227e:	d508      	bpl.n	2292 <_printf_i+0x132>
    2280:	6923      	ldr	r3, [r4, #16]
    2282:	6862      	ldr	r2, [r4, #4]
    2284:	429a      	cmp	r2, r3
    2286:	bfde      	ittt	le
    2288:	2330      	movle	r3, #48	; 0x30
    228a:	f805 3c01 	strble.w	r3, [r5, #-1]
    228e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    2292:	1b40      	subs	r0, r0, r5
    2294:	6120      	str	r0, [r4, #16]
    2296:	f8cd 8000 	str.w	r8, [sp]
    229a:	463b      	mov	r3, r7
    229c:	aa03      	add	r2, sp, #12
    229e:	4621      	mov	r1, r4
    22a0:	4630      	mov	r0, r6
    22a2:	f7ff fee7 	bl	2074 <_printf_common>
    22a6:	3001      	adds	r0, #1
    22a8:	d149      	bne.n	233e <_printf_i+0x1de>
    22aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22ae:	b005      	add	sp, #20
    22b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22b4:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 2384 <_printf_i+0x224>
    22b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    22bc:	681d      	ldr	r5, [r3, #0]
    22be:	6821      	ldr	r1, [r4, #0]
    22c0:	f855 2b04 	ldr.w	r2, [r5], #4
    22c4:	601d      	str	r5, [r3, #0]
    22c6:	060d      	lsls	r5, r1, #24
    22c8:	d50b      	bpl.n	22e2 <_printf_i+0x182>
    22ca:	07cd      	lsls	r5, r1, #31
    22cc:	bf44      	itt	mi
    22ce:	f041 0120 	orrmi.w	r1, r1, #32
    22d2:	6021      	strmi	r1, [r4, #0]
    22d4:	b91a      	cbnz	r2, 22de <_printf_i+0x17e>
    22d6:	6823      	ldr	r3, [r4, #0]
    22d8:	f023 0320 	bic.w	r3, r3, #32
    22dc:	6023      	str	r3, [r4, #0]
    22de:	2310      	movs	r3, #16
    22e0:	e7af      	b.n	2242 <_printf_i+0xe2>
    22e2:	064b      	lsls	r3, r1, #25
    22e4:	bf48      	it	mi
    22e6:	b292      	uxthmi	r2, r2
    22e8:	e7ef      	b.n	22ca <_printf_i+0x16a>
    22ea:	460a      	mov	r2, r1
    22ec:	e7b9      	b.n	2262 <_printf_i+0x102>
    22ee:	4605      	mov	r5, r0
    22f0:	e7c1      	b.n	2276 <_printf_i+0x116>
    22f2:	681a      	ldr	r2, [r3, #0]
    22f4:	f8d4 c000 	ldr.w	ip, [r4]
    22f8:	1d15      	adds	r5, r2, #4
    22fa:	6961      	ldr	r1, [r4, #20]
    22fc:	f01c 0f80 	tst.w	ip, #128	; 0x80
    2300:	601d      	str	r5, [r3, #0]
    2302:	6813      	ldr	r3, [r2, #0]
    2304:	d001      	beq.n	230a <_printf_i+0x1aa>
    2306:	6019      	str	r1, [r3, #0]
    2308:	e003      	b.n	2312 <_printf_i+0x1b2>
    230a:	f01c 0f40 	tst.w	ip, #64	; 0x40
    230e:	d0fa      	beq.n	2306 <_printf_i+0x1a6>
    2310:	8019      	strh	r1, [r3, #0]
    2312:	2300      	movs	r3, #0
    2314:	4605      	mov	r5, r0
    2316:	6123      	str	r3, [r4, #16]
    2318:	e7bd      	b.n	2296 <_printf_i+0x136>
    231a:	681a      	ldr	r2, [r3, #0]
    231c:	1d11      	adds	r1, r2, #4
    231e:	6019      	str	r1, [r3, #0]
    2320:	6815      	ldr	r5, [r2, #0]
    2322:	2100      	movs	r1, #0
    2324:	6862      	ldr	r2, [r4, #4]
    2326:	4628      	mov	r0, r5
    2328:	f000 f830 	bl	238c <memchr>
    232c:	b108      	cbz	r0, 2332 <_printf_i+0x1d2>
    232e:	1b40      	subs	r0, r0, r5
    2330:	6060      	str	r0, [r4, #4]
    2332:	6863      	ldr	r3, [r4, #4]
    2334:	6123      	str	r3, [r4, #16]
    2336:	2300      	movs	r3, #0
    2338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    233c:	e7ab      	b.n	2296 <_printf_i+0x136>
    233e:	6923      	ldr	r3, [r4, #16]
    2340:	462a      	mov	r2, r5
    2342:	4639      	mov	r1, r7
    2344:	4630      	mov	r0, r6
    2346:	47c0      	blx	r8
    2348:	3001      	adds	r0, #1
    234a:	d0ae      	beq.n	22aa <_printf_i+0x14a>
    234c:	6823      	ldr	r3, [r4, #0]
    234e:	079b      	lsls	r3, r3, #30
    2350:	d413      	bmi.n	237a <_printf_i+0x21a>
    2352:	68e0      	ldr	r0, [r4, #12]
    2354:	9b03      	ldr	r3, [sp, #12]
    2356:	4298      	cmp	r0, r3
    2358:	bfb8      	it	lt
    235a:	4618      	movlt	r0, r3
    235c:	e7a7      	b.n	22ae <_printf_i+0x14e>
    235e:	2301      	movs	r3, #1
    2360:	464a      	mov	r2, r9
    2362:	4639      	mov	r1, r7
    2364:	4630      	mov	r0, r6
    2366:	47c0      	blx	r8
    2368:	3001      	adds	r0, #1
    236a:	d09e      	beq.n	22aa <_printf_i+0x14a>
    236c:	3501      	adds	r5, #1
    236e:	68e3      	ldr	r3, [r4, #12]
    2370:	9a03      	ldr	r2, [sp, #12]
    2372:	1a9b      	subs	r3, r3, r2
    2374:	42ab      	cmp	r3, r5
    2376:	dcf2      	bgt.n	235e <_printf_i+0x1fe>
    2378:	e7eb      	b.n	2352 <_printf_i+0x1f2>
    237a:	2500      	movs	r5, #0
    237c:	f104 0919 	add.w	r9, r4, #25
    2380:	e7f5      	b.n	236e <_printf_i+0x20e>
    2382:	bf00      	nop
    2384:	000026f5 	.word	0x000026f5
    2388:	00002706 	.word	0x00002706

0000238c <memchr>:
    238c:	b510      	push	{r4, lr}
    238e:	b2c9      	uxtb	r1, r1
    2390:	4402      	add	r2, r0
    2392:	4290      	cmp	r0, r2
    2394:	4603      	mov	r3, r0
    2396:	d101      	bne.n	239c <memchr+0x10>
    2398:	2300      	movs	r3, #0
    239a:	e003      	b.n	23a4 <memchr+0x18>
    239c:	781c      	ldrb	r4, [r3, #0]
    239e:	3001      	adds	r0, #1
    23a0:	428c      	cmp	r4, r1
    23a2:	d1f6      	bne.n	2392 <memchr+0x6>
    23a4:	4618      	mov	r0, r3
    23a6:	bd10      	pop	{r4, pc}

000023a8 <memmove>:
    23a8:	4288      	cmp	r0, r1
    23aa:	b510      	push	{r4, lr}
    23ac:	eb01 0302 	add.w	r3, r1, r2
    23b0:	d902      	bls.n	23b8 <memmove+0x10>
    23b2:	4283      	cmp	r3, r0
    23b4:	461c      	mov	r4, r3
    23b6:	d807      	bhi.n	23c8 <memmove+0x20>
    23b8:	1e42      	subs	r2, r0, #1
    23ba:	4299      	cmp	r1, r3
    23bc:	d008      	beq.n	23d0 <memmove+0x28>
    23be:	f811 4b01 	ldrb.w	r4, [r1], #1
    23c2:	f802 4f01 	strb.w	r4, [r2, #1]!
    23c6:	e7f8      	b.n	23ba <memmove+0x12>
    23c8:	1883      	adds	r3, r0, r2
    23ca:	1a9a      	subs	r2, r3, r2
    23cc:	429a      	cmp	r2, r3
    23ce:	d100      	bne.n	23d2 <memmove+0x2a>
    23d0:	bd10      	pop	{r4, pc}
    23d2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    23d6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    23da:	e7f7      	b.n	23cc <memmove+0x24>

000023dc <_free_r>:
    23dc:	b538      	push	{r3, r4, r5, lr}
    23de:	4605      	mov	r5, r0
    23e0:	2900      	cmp	r1, #0
    23e2:	d043      	beq.n	246c <_free_r+0x90>
    23e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    23e8:	1f0c      	subs	r4, r1, #4
    23ea:	2b00      	cmp	r3, #0
    23ec:	bfb8      	it	lt
    23ee:	18e4      	addlt	r4, r4, r3
    23f0:	f000 f8d0 	bl	2594 <__malloc_lock>
    23f4:	4a1e      	ldr	r2, [pc, #120]	; (2470 <_free_r+0x94>)
    23f6:	6813      	ldr	r3, [r2, #0]
    23f8:	4610      	mov	r0, r2
    23fa:	b933      	cbnz	r3, 240a <_free_r+0x2e>
    23fc:	6063      	str	r3, [r4, #4]
    23fe:	6014      	str	r4, [r2, #0]
    2400:	4628      	mov	r0, r5
    2402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2406:	f000 b8cb 	b.w	25a0 <__malloc_unlock>
    240a:	42a3      	cmp	r3, r4
    240c:	d90b      	bls.n	2426 <_free_r+0x4a>
    240e:	6821      	ldr	r1, [r4, #0]
    2410:	1862      	adds	r2, r4, r1
    2412:	4293      	cmp	r3, r2
    2414:	bf01      	itttt	eq
    2416:	681a      	ldreq	r2, [r3, #0]
    2418:	685b      	ldreq	r3, [r3, #4]
    241a:	1852      	addeq	r2, r2, r1
    241c:	6022      	streq	r2, [r4, #0]
    241e:	6063      	str	r3, [r4, #4]
    2420:	6004      	str	r4, [r0, #0]
    2422:	e7ed      	b.n	2400 <_free_r+0x24>
    2424:	4613      	mov	r3, r2
    2426:	685a      	ldr	r2, [r3, #4]
    2428:	b10a      	cbz	r2, 242e <_free_r+0x52>
    242a:	42a2      	cmp	r2, r4
    242c:	d9fa      	bls.n	2424 <_free_r+0x48>
    242e:	6819      	ldr	r1, [r3, #0]
    2430:	1858      	adds	r0, r3, r1
    2432:	42a0      	cmp	r0, r4
    2434:	d10b      	bne.n	244e <_free_r+0x72>
    2436:	6820      	ldr	r0, [r4, #0]
    2438:	4401      	add	r1, r0
    243a:	1858      	adds	r0, r3, r1
    243c:	4282      	cmp	r2, r0
    243e:	6019      	str	r1, [r3, #0]
    2440:	d1de      	bne.n	2400 <_free_r+0x24>
    2442:	6810      	ldr	r0, [r2, #0]
    2444:	6852      	ldr	r2, [r2, #4]
    2446:	4401      	add	r1, r0
    2448:	6019      	str	r1, [r3, #0]
    244a:	605a      	str	r2, [r3, #4]
    244c:	e7d8      	b.n	2400 <_free_r+0x24>
    244e:	d902      	bls.n	2456 <_free_r+0x7a>
    2450:	230c      	movs	r3, #12
    2452:	602b      	str	r3, [r5, #0]
    2454:	e7d4      	b.n	2400 <_free_r+0x24>
    2456:	6820      	ldr	r0, [r4, #0]
    2458:	1821      	adds	r1, r4, r0
    245a:	428a      	cmp	r2, r1
    245c:	bf01      	itttt	eq
    245e:	6811      	ldreq	r1, [r2, #0]
    2460:	6852      	ldreq	r2, [r2, #4]
    2462:	1809      	addeq	r1, r1, r0
    2464:	6021      	streq	r1, [r4, #0]
    2466:	6062      	str	r2, [r4, #4]
    2468:	605c      	str	r4, [r3, #4]
    246a:	e7c9      	b.n	2400 <_free_r+0x24>
    246c:	bd38      	pop	{r3, r4, r5, pc}
    246e:	bf00      	nop
    2470:	2000827c 	.word	0x2000827c

00002474 <_malloc_r>:
    2474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2476:	1ccd      	adds	r5, r1, #3
    2478:	f025 0503 	bic.w	r5, r5, #3
    247c:	3508      	adds	r5, #8
    247e:	2d0c      	cmp	r5, #12
    2480:	bf38      	it	cc
    2482:	250c      	movcc	r5, #12
    2484:	2d00      	cmp	r5, #0
    2486:	4606      	mov	r6, r0
    2488:	db01      	blt.n	248e <_malloc_r+0x1a>
    248a:	42a9      	cmp	r1, r5
    248c:	d903      	bls.n	2496 <_malloc_r+0x22>
    248e:	230c      	movs	r3, #12
    2490:	6033      	str	r3, [r6, #0]
    2492:	2000      	movs	r0, #0
    2494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2496:	f000 f87d 	bl	2594 <__malloc_lock>
    249a:	4921      	ldr	r1, [pc, #132]	; (2520 <_malloc_r+0xac>)
    249c:	680a      	ldr	r2, [r1, #0]
    249e:	4614      	mov	r4, r2
    24a0:	b99c      	cbnz	r4, 24ca <_malloc_r+0x56>
    24a2:	4f20      	ldr	r7, [pc, #128]	; (2524 <_malloc_r+0xb0>)
    24a4:	683b      	ldr	r3, [r7, #0]
    24a6:	b923      	cbnz	r3, 24b2 <_malloc_r+0x3e>
    24a8:	4621      	mov	r1, r4
    24aa:	4630      	mov	r0, r6
    24ac:	f000 f862 	bl	2574 <_sbrk_r>
    24b0:	6038      	str	r0, [r7, #0]
    24b2:	4629      	mov	r1, r5
    24b4:	4630      	mov	r0, r6
    24b6:	f000 f85d 	bl	2574 <_sbrk_r>
    24ba:	1c43      	adds	r3, r0, #1
    24bc:	d123      	bne.n	2506 <_malloc_r+0x92>
    24be:	230c      	movs	r3, #12
    24c0:	4630      	mov	r0, r6
    24c2:	6033      	str	r3, [r6, #0]
    24c4:	f000 f86c 	bl	25a0 <__malloc_unlock>
    24c8:	e7e3      	b.n	2492 <_malloc_r+0x1e>
    24ca:	6823      	ldr	r3, [r4, #0]
    24cc:	1b5b      	subs	r3, r3, r5
    24ce:	d417      	bmi.n	2500 <_malloc_r+0x8c>
    24d0:	2b0b      	cmp	r3, #11
    24d2:	d903      	bls.n	24dc <_malloc_r+0x68>
    24d4:	6023      	str	r3, [r4, #0]
    24d6:	441c      	add	r4, r3
    24d8:	6025      	str	r5, [r4, #0]
    24da:	e004      	b.n	24e6 <_malloc_r+0x72>
    24dc:	6863      	ldr	r3, [r4, #4]
    24de:	42a2      	cmp	r2, r4
    24e0:	bf0c      	ite	eq
    24e2:	600b      	streq	r3, [r1, #0]
    24e4:	6053      	strne	r3, [r2, #4]
    24e6:	4630      	mov	r0, r6
    24e8:	f000 f85a 	bl	25a0 <__malloc_unlock>
    24ec:	f104 000b 	add.w	r0, r4, #11
    24f0:	1d23      	adds	r3, r4, #4
    24f2:	f020 0007 	bic.w	r0, r0, #7
    24f6:	1ac2      	subs	r2, r0, r3
    24f8:	d0cc      	beq.n	2494 <_malloc_r+0x20>
    24fa:	1a1b      	subs	r3, r3, r0
    24fc:	50a3      	str	r3, [r4, r2]
    24fe:	e7c9      	b.n	2494 <_malloc_r+0x20>
    2500:	4622      	mov	r2, r4
    2502:	6864      	ldr	r4, [r4, #4]
    2504:	e7cc      	b.n	24a0 <_malloc_r+0x2c>
    2506:	1cc4      	adds	r4, r0, #3
    2508:	f024 0403 	bic.w	r4, r4, #3
    250c:	42a0      	cmp	r0, r4
    250e:	d0e3      	beq.n	24d8 <_malloc_r+0x64>
    2510:	1a21      	subs	r1, r4, r0
    2512:	4630      	mov	r0, r6
    2514:	f000 f82e 	bl	2574 <_sbrk_r>
    2518:	3001      	adds	r0, #1
    251a:	d1dd      	bne.n	24d8 <_malloc_r+0x64>
    251c:	e7cf      	b.n	24be <_malloc_r+0x4a>
    251e:	bf00      	nop
    2520:	2000827c 	.word	0x2000827c
    2524:	20008280 	.word	0x20008280

00002528 <_realloc_r>:
    2528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252a:	4607      	mov	r7, r0
    252c:	4614      	mov	r4, r2
    252e:	460e      	mov	r6, r1
    2530:	b921      	cbnz	r1, 253c <_realloc_r+0x14>
    2532:	4611      	mov	r1, r2
    2534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2538:	f7ff bf9c 	b.w	2474 <_malloc_r>
    253c:	b922      	cbnz	r2, 2548 <_realloc_r+0x20>
    253e:	f7ff ff4d 	bl	23dc <_free_r>
    2542:	4625      	mov	r5, r4
    2544:	4628      	mov	r0, r5
    2546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2548:	f000 f830 	bl	25ac <_malloc_usable_size_r>
    254c:	42a0      	cmp	r0, r4
    254e:	d20f      	bcs.n	2570 <_realloc_r+0x48>
    2550:	4621      	mov	r1, r4
    2552:	4638      	mov	r0, r7
    2554:	f7ff ff8e 	bl	2474 <_malloc_r>
    2558:	4605      	mov	r5, r0
    255a:	2800      	cmp	r0, #0
    255c:	d0f2      	beq.n	2544 <_realloc_r+0x1c>
    255e:	4631      	mov	r1, r6
    2560:	4622      	mov	r2, r4
    2562:	f7ff fbfd 	bl	1d60 <memcpy>
    2566:	4631      	mov	r1, r6
    2568:	4638      	mov	r0, r7
    256a:	f7ff ff37 	bl	23dc <_free_r>
    256e:	e7e9      	b.n	2544 <_realloc_r+0x1c>
    2570:	4635      	mov	r5, r6
    2572:	e7e7      	b.n	2544 <_realloc_r+0x1c>

00002574 <_sbrk_r>:
    2574:	b538      	push	{r3, r4, r5, lr}
    2576:	2300      	movs	r3, #0
    2578:	4c05      	ldr	r4, [pc, #20]	; (2590 <_sbrk_r+0x1c>)
    257a:	4605      	mov	r5, r0
    257c:	4608      	mov	r0, r1
    257e:	6023      	str	r3, [r4, #0]
    2580:	f000 f81e 	bl	25c0 <_sbrk>
    2584:	1c43      	adds	r3, r0, #1
    2586:	d102      	bne.n	258e <_sbrk_r+0x1a>
    2588:	6823      	ldr	r3, [r4, #0]
    258a:	b103      	cbz	r3, 258e <_sbrk_r+0x1a>
    258c:	602b      	str	r3, [r5, #0]
    258e:	bd38      	pop	{r3, r4, r5, pc}
    2590:	2000828c 	.word	0x2000828c

00002594 <__malloc_lock>:
    2594:	4801      	ldr	r0, [pc, #4]	; (259c <__malloc_lock+0x8>)
    2596:	f000 b811 	b.w	25bc <__retarget_lock_acquire_recursive>
    259a:	bf00      	nop
    259c:	20008294 	.word	0x20008294

000025a0 <__malloc_unlock>:
    25a0:	4801      	ldr	r0, [pc, #4]	; (25a8 <__malloc_unlock+0x8>)
    25a2:	f000 b80c 	b.w	25be <__retarget_lock_release_recursive>
    25a6:	bf00      	nop
    25a8:	20008294 	.word	0x20008294

000025ac <_malloc_usable_size_r>:
    25ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
    25b0:	1f18      	subs	r0, r3, #4
    25b2:	2b00      	cmp	r3, #0
    25b4:	bfbc      	itt	lt
    25b6:	580b      	ldrlt	r3, [r1, r0]
    25b8:	18c0      	addlt	r0, r0, r3
    25ba:	4770      	bx	lr

000025bc <__retarget_lock_acquire_recursive>:
    25bc:	4770      	bx	lr

000025be <__retarget_lock_release_recursive>:
    25be:	4770      	bx	lr

000025c0 <_sbrk>:
    25c0:	4a04      	ldr	r2, [pc, #16]	; (25d4 <_sbrk+0x14>)
    25c2:	4905      	ldr	r1, [pc, #20]	; (25d8 <_sbrk+0x18>)
    25c4:	6813      	ldr	r3, [r2, #0]
    25c6:	2b00      	cmp	r3, #0
    25c8:	bf08      	it	eq
    25ca:	460b      	moveq	r3, r1
    25cc:	4418      	add	r0, r3
    25ce:	6010      	str	r0, [r2, #0]
    25d0:	4618      	mov	r0, r3
    25d2:	4770      	bx	lr
    25d4:	20008284 	.word	0x20008284
    25d8:	200082a0 	.word	0x200082a0

000025dc <_exit>:
    25dc:	e7fe      	b.n	25dc <_exit>
    25de:	bf00      	nop

000025e0 <_init>:
    25e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25e2:	bf00      	nop

000025e4 <_fini>:
    25e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25e6:	bf00      	nop
    25e8:	70746553 	.word	0x70746553
    25ec:	20642520 	.word	0x20642520
    25f0:	646e6553 	.word	0x646e6553
    25f4:	000a0d20 	.word	0x000a0d20
    25f8:	70746553 	.word	0x70746553
    25fc:	20642520 	.word	0x20642520
    2600:	65636552 	.word	0x65636552
    2604:	0d657669 	.word	0x0d657669
    2608:	0000000a 	.word	0x0000000a
    260c:	70746553 	.word	0x70746553
    2610:	20642520 	.word	0x20642520
    2614:	65636552 	.word	0x65636552
    2618:	20657669 	.word	0x20657669
    261c:	5d58255b 	.word	0x5d58255b
    2620:	00000a0d 	.word	0x00000a0d
    2624:	20554353 	.word	0x20554353
    2628:	444d4352 	.word	0x444d4352
    262c:	5d58255b 	.word	0x5d58255b
    2630:	00000a20 	.word	0x00000a20
    2634:	20554353 	.word	0x20554353
    2638:	5b3a6463 	.word	0x5b3a6463
    263c:	2c5d5825 	.word	0x2c5d5825
    2640:	255b6176 	.word	0x255b6176
    2644:	000a5d58 	.word	0x000a5d58
    2648:	5f315f73 	.word	0x5f315f73
    264c:	5f313737 	.word	0x5f313737
    2650:	6d733269 	.word	0x6d733269
    2654:	7332695f 	.word	0x7332695f
    2658:	78745f6d 	.word	0x78745f6d
    265c:	73616320 	.word	0x73616320
    2660:	0a0d2065 	.word	0x0a0d2065
    2664:	00000000 	.word	0x00000000
    2668:	5f315f73 	.word	0x5f315f73
    266c:	5f313737 	.word	0x5f313737
    2670:	6d733269 	.word	0x6d733269
    2674:	7332695f 	.word	0x7332695f
    2678:	78745f6d 	.word	0x78745f6d
    267c:	73616320 	.word	0x73616320
    2680:	6f632065 	.word	0x6f632065
    2684:	656c706d 	.word	0x656c706d
    2688:	20646574 	.word	0x20646574
    268c:	00000a0d 	.word	0x00000a0d
    2690:	4d533249 	.word	0x4d533249
    2694:	5152495f 	.word	0x5152495f
    2698:	0000000a 	.word	0x0000000a
    269c:	5f58524d 	.word	0x5f58524d
    26a0:	4d414441 	.word	0x4d414441
    26a4:	255b7220 	.word	0x255b7220
    26a8:	6c2c5d58 	.word	0x6c2c5d58
    26ac:	5d58255b 	.word	0x5d58255b
    26b0:	0000000a 	.word	0x0000000a
    26b4:	4f5f5852 	.word	0x4f5f5852
    26b8:	52524556 	.word	0x52524556
    26bc:	0a0d4e55 	.word	0x0a0d4e55
    26c0:	00000000 	.word	0x00000000
    26c4:	455f5854 	.word	0x455f5854
    26c8:	5954504d 	.word	0x5954504d
    26cc:	00000a0d 	.word	0x00000a0d
    26d0:	4f5f5854 	.word	0x4f5f5854
    26d4:	52524556 	.word	0x52524556
    26d8:	0a0d4e55 	.word	0x0a0d4e55
    26dc:	00000000 	.word	0x00000000

000026e0 <_global_impure_ptr>:
    26e0:	2000800c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    26f0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2700:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2710:	64636261                                 abcdef.
