
.//s_1_723_spim0_spim0_xip_quid.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20010000 	.word	0x20010000
       4:	00000201 	.word	0x00000201
       8:	00000249 	.word	0x00000249
       c:	0000024b 	.word	0x0000024b
      10:	0000024d 	.word	0x0000024d
      14:	0000024f 	.word	0x0000024f
      18:	00000251 	.word	0x00000251
	...
      2c:	00000253 	.word	0x00000253
      30:	00000255 	.word	0x00000255
      34:	00000000 	.word	0x00000000
      38:	00000257 	.word	0x00000257
      3c:	00002441 	.word	0x00002441
      40:	0000025b 	.word	0x0000025b
      44:	0000025d 	.word	0x0000025d
      48:	0000025f 	.word	0x0000025f
      4c:	00000261 	.word	0x00000261
      50:	00000263 	.word	0x00000263
      54:	00000265 	.word	0x00000265
      58:	00000267 	.word	0x00000267
      5c:	00000269 	.word	0x00000269
      60:	0000026b 	.word	0x0000026b
      64:	0000026d 	.word	0x0000026d
      68:	0000026f 	.word	0x0000026f
      6c:	00000271 	.word	0x00000271
      70:	00000273 	.word	0x00000273
      74:	00000275 	.word	0x00000275
      78:	00000277 	.word	0x00000277
      7c:	00000279 	.word	0x00000279
      80:	0000027b 	.word	0x0000027b
      84:	0000027d 	.word	0x0000027d
      88:	0000027f 	.word	0x0000027f
      8c:	00000281 	.word	0x00000281
      90:	00000283 	.word	0x00000283
      94:	00000285 	.word	0x00000285
      98:	00000287 	.word	0x00000287
      9c:	00000289 	.word	0x00000289
      a0:	0000028b 	.word	0x0000028b
      a4:	0000028d 	.word	0x0000028d
      a8:	0000028f 	.word	0x0000028f
      ac:	00000291 	.word	0x00000291
      b0:	00000293 	.word	0x00000293
      b4:	00000295 	.word	0x00000295
      b8:	00000297 	.word	0x00000297
      bc:	00000299 	.word	0x00000299
      c0:	0000029b 	.word	0x0000029b
      c4:	0000029d 	.word	0x0000029d
      c8:	0000029f 	.word	0x0000029f
      cc:	000002a1 	.word	0x000002a1
      d0:	000002a3 	.word	0x000002a3
      d4:	000002a5 	.word	0x000002a5
      d8:	000002a7 	.word	0x000002a7
      dc:	000002a9 	.word	0x000002a9
      e0:	000002ab 	.word	0x000002ab
      e4:	000002ad 	.word	0x000002ad
      e8:	000002af 	.word	0x000002af
      ec:	000002b1 	.word	0x000002b1
      f0:	000002b3 	.word	0x000002b3
      f4:	000002b5 	.word	0x000002b5
      f8:	000002b7 	.word	0x000002b7
      fc:	000002b9 	.word	0x000002b9
     100:	000002bb 	.word	0x000002bb
     104:	000002bd 	.word	0x000002bd
     108:	000002bf 	.word	0x000002bf
     10c:	000002c1 	.word	0x000002c1
     110:	000002c3 	.word	0x000002c3
     114:	000002c5 	.word	0x000002c5
     118:	000002c7 	.word	0x000002c7
     11c:	000002c9 	.word	0x000002c9
     120:	000002cb 	.word	0x000002cb
     124:	000002cd 	.word	0x000002cd
     128:	000002cf 	.word	0x000002cf
     12c:	000002d1 	.word	0x000002d1
     130:	000002d3 	.word	0x000002d3
     134:	000002d5 	.word	0x000002d5
     138:	000002d7 	.word	0x000002d7

0000013c <boot_flag>:
     13c:	52554e58 	.word	0x52554e58

00000140 <program_size>:
     140:	00000000 	.word	0x00000000

00000144 <ram_addr>:
     144:	00000000 	.word	0x00000000

00000148 <copy_unit_size>:
     148:	00000000 	.word	0x00000000

0000014c <cpu_clk_type>:
     14c:	03d09000 	.word	0x03d09000

00000150 <qspi_clk_type>:
     150:	03d09000 	.word	0x03d09000

00000154 <cache_cfg>:
     154:	00000061 	.word	0x00000061

00000158 <clock_divider>:
     158:	00000002 	.word	0x00000002

0000015c <frame_format_size>:
     15c:	0000001f 	.word	0x0000001f

00000160 <ssi_frame_format>:
     160:	00000000 	.word	0x00000000

00000164 <clock_phase>:
     164:	00000000 	.word	0x00000000

00000168 <clock_polarity>:
     168:	00000000 	.word	0x00000000

0000016c <transfer_mode>:
     16c:	00000003 	.word	0x00000003

00000170 <slave_output_enable>:
     170:	00000000 	.word	0x00000000

00000174 <operation_mode>:
     174:	00000000 	.word	0x00000000

00000178 <slave_select_toggle_en>:
     178:	00000000 	.word	0x00000000

0000017c <control_farme_size>:
     17c:	00000000 	.word	0x00000000

00000180 <spi_frame_format>:
     180:	00000001 	.word	0x00000001

00000184 <spi_hyperbus_en>:
     184:	00000000 	.word	0x00000000

00000188 <data_frames_number>:
     188:	00000000 	.word	0x00000000

0000018c <slaves_select>:
     18c:	00000001 	.word	0x00000001

00000190 <tx_fifo_threshold_level>:
     190:	00000000 	.word	0x00000000

00000194 <tx_fifo_start_fifo_level>:
     194:	00000000 	.word	0x00000000

00000198 <rx_fifo_threshold_level>:
     198:	00000000 	.word	0x00000000

0000019c <dma_rx_data_level>:
     19c:	00000000 	.word	0x00000000

000001a0 <dma_tx_data_level>:
     1a0:	00000000 	.word	0x00000000

000001a4 <unmask_interrupt>:
     1a4:	00000000 	.word	0x00000000

000001a8 <xip_spi_frame_format>:
     1a8:	00000001 	.word	0x00000001

000001ac <transfer_type>:
     1ac:	00000000 	.word	0x00000000

000001b0 <address_length>:
     1b0:	00000006 	.word	0x00000006

000001b4 <instruction_length>:
     1b4:	00000002 	.word	0x00000002

000001b8 <xip_mode_bit_en>:
     1b8:	00000000 	.word	0x00000000

000001bc <wait_cycles>:
     1bc:	00000008 	.word	0x00000008

000001c0 <xip_dfs_hsize_hburst_en>:
     1c0:	00000000 	.word	0x00000000

000001c4 <xip_spi_ddr_en>:
     1c4:	00000000 	.word	0x00000000

000001c8 <instruction_ddr_enable>:
     1c8:	00000000 	.word	0x00000000

000001cc <read_data_strobe_enable>:
     1cc:	00000000 	.word	0x00000000

000001d0 <xip_instruction_enable>:
     1d0:	00000001 	.word	0x00000001

000001d4 <xip_continuous_transfer_enable>:
     1d4:	00000000 	.word	0x00000000

000001d8 <xip_spi_hyerbus_format_enable>:
     1d8:	00000000 	.word	0x00000000

000001dc <xip_rxds_signaling_enable>:
     1dc:	00000000 	.word	0x00000000

000001e0 <xip_mode_bit_length>:
     1e0:	00000000 	.word	0x00000000

000001e4 <xip_pre_fetch_enable>:
     1e4:	00000000 	.word	0x00000000

000001e8 <xip_inst_transfer_opcode>:
     1e8:	0000003b 	.word	0x0000003b

000001ec <xip_wrap_transfer_opcode>:
     1ec:	00000000 	.word	0x00000000

000001f0 <slaves_enbale_mask>:
     1f0:	00000001 	.word	0x00000001

000001f4 <spi_clk_stretch_en>:
     1f4:	00000000 	.word	0x00000000

000001f8 <spi_data_mask_en>:
     1f8:	00000000 	.word	0x00000000

000001fc <xip_time_out>:
     1fc:	00000032 	.word	0x00000032

00000200 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     200:	490b      	ldr	r1, [pc, #44]	; (230 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     202:	4a0c      	ldr	r2, [pc, #48]	; (234 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     204:	4b0c      	ldr	r3, [pc, #48]	; (238 <Reset_Handler+0x38>)

    subs    r3, r2
     206:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     208:	dd03      	ble.n	212 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     20a:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     20c:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     20e:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     210:	dcfb      	bgt.n	20a <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     212:	490a      	ldr	r1, [pc, #40]	; (23c <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     214:	4a0a      	ldr	r2, [pc, #40]	; (240 <Reset_Handler+0x40>)

    movs    r0, 0
     216:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     218:	4291      	cmp	r1, r2
    itt    lt
     21a:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     21c:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     220:	e7fa      	blt.n	218 <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     222:	4808      	ldr	r0, [pc, #32]	; (244 <Reset_Handler+0x44>)
    blx     r0
     224:	4780      	blx	r0
#endif

    bl    main
     226:	f002 f9fd 	bl	2624 <main>
    bl    exit
     22a:	f002 fcb3 	bl	2b94 <exit>
     22e:	0000      	.short	0x0000
    ldr    r1, =__etext
     230:	000035df 	.word	0x000035df
    ldr    r2, =__data_start__
     234:	20008000 	.word	0x20008000
    ldr    r3, =__data_end__
     238:	20008070 	.word	0x20008070
    ldr r1, =__bss_start__
     23c:	20008070 	.word	0x20008070
    ldr r2, =__bss_end__
     240:	200083a4 	.word	0x200083a4
    ldr     r0,=SystemInit
     244:	000002f5 	.word	0x000002f5

00000248 <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     248:	e7fe      	b.n	248 <NMI_Handler>

0000024a <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     24a:	e7fe      	b.n	24a <HardFault_Handler>

0000024c <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     24c:	e7fe      	b.n	24c <MemManage_Handler>

0000024e <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     24e:	e7fe      	b.n	24e <BusFault_Handler>

00000250 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     250:	e7fe      	b.n	250 <UsageFault_Handler>

00000252 <SVC_Handler>:
    def_default_handler    SVC_Handler
     252:	e7fe      	b.n	252 <SVC_Handler>

00000254 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     254:	e7fe      	b.n	254 <DebugMon_Handler>

00000256 <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     256:	e7fe      	b.n	256 <PendSV_Handler>
    def_default_handler    SysTick_Handler
     258:	e7fe      	b.n	258 <PendSV_Handler+0x2>

0000025a <UART0_IRQHandler>:

/* IRQ Handlers */

    def_default_handler     UART0_IRQHandler 
     25a:	e7fe      	b.n	25a <UART0_IRQHandler>

0000025c <UART1_IRQHandler>:
    def_default_handler     UART1_IRQHandler        
     25c:	e7fe      	b.n	25c <UART1_IRQHandler>

0000025e <DMA_IRQHandler>:
    def_default_handler     DMA_IRQHandler          
     25e:	e7fe      	b.n	25e <DMA_IRQHandler>

00000260 <SPIM0_IRQHandler>:
    def_default_handler     SPIM0_IRQHandler        
     260:	e7fe      	b.n	260 <SPIM0_IRQHandler>

00000262 <SPIM1_IRQHandler>:
    def_default_handler     SPIM1_IRQHandler        
     262:	e7fe      	b.n	262 <SPIM1_IRQHandler>

00000264 <SPIS1_IRQHandler>:
    def_default_handler     SPIS1_IRQHandler        
     264:	e7fe      	b.n	264 <SPIS1_IRQHandler>

00000266 <I2C0_IRQHandler>:
    def_default_handler     I2C0_IRQHandler         
     266:	e7fe      	b.n	266 <I2C0_IRQHandler>

00000268 <I2C1_IRQHandler>:
    def_default_handler     I2C1_IRQHandler         
     268:	e7fe      	b.n	268 <I2C1_IRQHandler>

0000026a <I2SM_IRQHandler>:
    def_default_handler     I2SM_IRQHandler         
     26a:	e7fe      	b.n	26a <I2SM_IRQHandler>

0000026c <I2SS_IRQHandler>:
    def_default_handler     I2SS_IRQHandler         
     26c:	e7fe      	b.n	26c <I2SS_IRQHandler>

0000026e <RTC_IRQHandler>:
    def_default_handler     RTC_IRQHandler          
     26e:	e7fe      	b.n	26e <RTC_IRQHandler>

00000270 <QDEC_IRQHandler>:
    def_default_handler     QDEC_IRQHandler         
     270:	e7fe      	b.n	270 <QDEC_IRQHandler>

00000272 <TIMER0_IRQHandler>:
    def_default_handler     TIMER0_IRQHandler       
     272:	e7fe      	b.n	272 <TIMER0_IRQHandler>

00000274 <TIMER1_IRQHandler>:
    def_default_handler     TIMER1_IRQHandler       
     274:	e7fe      	b.n	274 <TIMER1_IRQHandler>

00000276 <TIMER2_IRQHandler>:
    def_default_handler     TIMER2_IRQHandler       
     276:	e7fe      	b.n	276 <TIMER2_IRQHandler>

00000278 <TIMER3_IRQHandler>:
    def_default_handler     TIMER3_IRQHandler       
     278:	e7fe      	b.n	278 <TIMER3_IRQHandler>

0000027a <TIMER4_IRQHandler>:
    def_default_handler     TIMER4_IRQHandler       
     27a:	e7fe      	b.n	27a <TIMER4_IRQHandler>

0000027c <TIMER5_IRQHandler>:
    def_default_handler     TIMER5_IRQHandler       
     27c:	e7fe      	b.n	27c <TIMER5_IRQHandler>

0000027e <TIMER6_IRQHandler>:
    def_default_handler     TIMER6_IRQHandler       
     27e:	e7fe      	b.n	27e <TIMER6_IRQHandler>

00000280 <TIMER7_IRQHandler>:
    def_default_handler     TIMER7_IRQHandler       
     280:	e7fe      	b.n	280 <TIMER7_IRQHandler>

00000282 <GPIO0_IRQHandler>:
    def_default_handler     GPIO0_IRQHandler        
     282:	e7fe      	b.n	282 <GPIO0_IRQHandler>

00000284 <GPIO1_IRQHandler>:
    def_default_handler     GPIO1_IRQHandler        
     284:	e7fe      	b.n	284 <GPIO1_IRQHandler>

00000286 <GPIO2_IRQHandler>:
    def_default_handler     GPIO2_IRQHandler        
     286:	e7fe      	b.n	286 <GPIO2_IRQHandler>

00000288 <GPIO3_IRQHandler>:
    def_default_handler     GPIO3_IRQHandler        
     288:	e7fe      	b.n	288 <GPIO3_IRQHandler>

0000028a <GPIO4_IRQHandler>:
    def_default_handler     GPIO4_IRQHandler        
     28a:	e7fe      	b.n	28a <GPIO4_IRQHandler>

0000028c <GPIO5_IRQHandler>:
    def_default_handler     GPIO5_IRQHandler        
     28c:	e7fe      	b.n	28c <GPIO5_IRQHandler>

0000028e <GPIO6_IRQHandler>:
    def_default_handler     GPIO6_IRQHandler        
     28e:	e7fe      	b.n	28e <GPIO6_IRQHandler>

00000290 <GPIO7_IRQHandler>:
    def_default_handler     GPIO7_IRQHandler        
     290:	e7fe      	b.n	290 <GPIO7_IRQHandler>

00000292 <GPIO8_IRQHandler>:
    def_default_handler     GPIO8_IRQHandler        
     292:	e7fe      	b.n	292 <GPIO8_IRQHandler>

00000294 <GPIO9_IRQHandler>:
    def_default_handler     GPIO9_IRQHandler        
     294:	e7fe      	b.n	294 <GPIO9_IRQHandler>

00000296 <GPIO10_IRQHandler>:
    def_default_handler     GPIO10_IRQHandler        
     296:	e7fe      	b.n	296 <GPIO10_IRQHandler>

00000298 <GPIO11_IRQHandler>:
    def_default_handler     GPIO11_IRQHandler       
     298:	e7fe      	b.n	298 <GPIO11_IRQHandler>

0000029a <GPIO12_IRQHandler>:
    def_default_handler     GPIO12_IRQHandler       
     29a:	e7fe      	b.n	29a <GPIO12_IRQHandler>

0000029c <GPIO13_IRQHandler>:
    def_default_handler     GPIO13_IRQHandler       
     29c:	e7fe      	b.n	29c <GPIO13_IRQHandler>

0000029e <GPIO14_IRQHandler>:
    def_default_handler     GPIO14_IRQHandler       
     29e:	e7fe      	b.n	29e <GPIO14_IRQHandler>

000002a0 <GPIO15_IRQHandler>:
    def_default_handler     GPIO15_IRQHandler       
     2a0:	e7fe      	b.n	2a0 <GPIO15_IRQHandler>

000002a2 <GPIO16_IRQHandler>:
    def_default_handler     GPIO16_IRQHandler       
     2a2:	e7fe      	b.n	2a2 <GPIO16_IRQHandler>

000002a4 <GPIO17_IRQHandler>:
    def_default_handler     GPIO17_IRQHandler       
     2a4:	e7fe      	b.n	2a4 <GPIO17_IRQHandler>

000002a6 <GPIO18_IRQHandler>:
    def_default_handler     GPIO18_IRQHandler       
     2a6:	e7fe      	b.n	2a6 <GPIO18_IRQHandler>

000002a8 <GPIO19_IRQHandler>:
    def_default_handler     GPIO19_IRQHandler       
     2a8:	e7fe      	b.n	2a8 <GPIO19_IRQHandler>

000002aa <GPIO20_IRQHandler>:
    def_default_handler     GPIO20_IRQHandler       
     2aa:	e7fe      	b.n	2aa <GPIO20_IRQHandler>

000002ac <GPIO21_IRQHandler>:
    def_default_handler     GPIO21_IRQHandler       
     2ac:	e7fe      	b.n	2ac <GPIO21_IRQHandler>

000002ae <GPIO22_IRQHandler>:
    def_default_handler     GPIO22_IRQHandler       
     2ae:	e7fe      	b.n	2ae <GPIO22_IRQHandler>

000002b0 <GPIO23_IRQHandler>:
    def_default_handler     GPIO23_IRQHandler       
     2b0:	e7fe      	b.n	2b0 <GPIO23_IRQHandler>

000002b2 <GPIO24_IRQHandler>:
    def_default_handler     GPIO24_IRQHandler       
     2b2:	e7fe      	b.n	2b2 <GPIO24_IRQHandler>

000002b4 <GPIO25_IRQHandler>:
    def_default_handler     GPIO25_IRQHandler       
     2b4:	e7fe      	b.n	2b4 <GPIO25_IRQHandler>

000002b6 <GPIO26_IRQHandler>:
    def_default_handler     GPIO26_IRQHandler       
     2b6:	e7fe      	b.n	2b6 <GPIO26_IRQHandler>

000002b8 <GPIO27_IRQHandler>:
    def_default_handler     GPIO27_IRQHandler       
     2b8:	e7fe      	b.n	2b8 <GPIO27_IRQHandler>

000002ba <GPIO28_IRQHandler>:
    def_default_handler     GPIO28_IRQHandler       
     2ba:	e7fe      	b.n	2ba <GPIO28_IRQHandler>

000002bc <GPIO29_IRQHandler>:
    def_default_handler     GPIO29_IRQHandler       
     2bc:	e7fe      	b.n	2bc <GPIO29_IRQHandler>

000002be <GPIO30_IRQHandler>:
    def_default_handler     GPIO30_IRQHandler       
     2be:	e7fe      	b.n	2be <GPIO30_IRQHandler>

000002c0 <GPIO31_IRQHandler>:
    def_default_handler     GPIO31_IRQHandler       
     2c0:	e7fe      	b.n	2c0 <GPIO31_IRQHandler>

000002c2 <rwbt_isr>:
    def_default_handler     rwbt_isr   			   
     2c2:	e7fe      	b.n	2c2 <rwbt_isr>

000002c4 <rwble_isr>:
    def_default_handler     rwble_isr   			   
     2c4:	e7fe      	b.n	2c4 <rwble_isr>

000002c6 <rwip_isr>:
    def_default_handler     rwip_isr				   
     2c6:	e7fe      	b.n	2c6 <rwip_isr>

000002c8 <pcm_isr>:
    def_default_handler     pcm_isr				   
     2c8:	e7fe      	b.n	2c8 <pcm_isr>

000002ca <apb2dpv_isr>:
    def_default_handler     apb2dpv_isr			   
     2ca:	e7fe      	b.n	2ca <apb2dpv_isr>

000002cc <bboscen_isr>:
    def_default_handler     bboscen_isr			   
     2cc:	e7fe      	b.n	2cc <bboscen_isr>

000002ce <RF_IRQHandler>:
    def_default_handler     RF_IRQHandler           
     2ce:	e7fe      	b.n	2ce <RF_IRQHandler>

000002d0 <USBSRT_IRQHandler>:
    def_default_handler     USBSRT_IRQHandler       
     2d0:	e7fe      	b.n	2d0 <USBSRT_IRQHandler>

000002d2 <USBSTO_IRQHandler>:
    def_default_handler     USBSTO_IRQHandler	   
     2d2:	e7fe      	b.n	2d2 <USBSTO_IRQHandler>

000002d4 <USB_IRQHandler>:
    def_default_handler     USB_IRQHandler          
     2d4:	e7fe      	b.n	2d4 <USB_IRQHandler>

000002d6 <info_init_get>:
    def_default_handler     info_init_get           
     2d6:	e7fe      	b.n	2d6 <info_init_get>

000002d8 <SystemCoreClockUpdate>:
  System Core Clock Variable
 *----------------------------------------------------------------------------*/
unsigned long int SystemCoreClock = SYSTEM_CLOCK;  /* System Core Clock Frequency      */

void SystemCoreClockUpdate(unsigned long int clock)
{
     2d8:	b480      	push	{r7}
     2da:	b083      	sub	sp, #12
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
    SystemCoreClock = clock;
     2e0:	4a03      	ldr	r2, [pc, #12]	; (2f0 <SystemCoreClockUpdate+0x18>)
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	6013      	str	r3, [r2, #0]
}
     2e6:	bf00      	nop
     2e8:	370c      	adds	r7, #12
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	20008000 	.word	0x20008000

000002f4 <SystemInit>:

void SystemInit (void)
{
     2f4:	b480      	push	{r7}
     2f6:	af00      	add	r7, sp, #0
    SystemCoreClock = SYSTEM_CLOCK;
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <SystemInit+0x14>)
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <SystemInit+0x18>)
     2fc:	601a      	str	r2, [r3, #0]
}
     2fe:	bf00      	nop
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20008000 	.word	0x20008000
     30c:	016e3600 	.word	0x016e3600

00000310 <SystemDevClockCtl>:

void SystemDevClockCtl(CKEnId_Type id, uint8_t enable)
{
     310:	b480      	push	{r7}
     312:	b083      	sub	sp, #12
     314:	af00      	add	r7, sp, #0
     316:	4603      	mov	r3, r0
     318:	460a      	mov	r2, r1
     31a:	71fb      	strb	r3, [r7, #7]
     31c:	4613      	mov	r3, r2
     31e:	71bb      	strb	r3, [r7, #6]
   if (enable) {
     320:	79bb      	ldrb	r3, [r7, #6]
     322:	2b00      	cmp	r3, #0
     324:	d00b      	beq.n	33e <SystemDevClockCtl+0x2e>
       SCU->CLK_EN |= 0x01ul << id;
     326:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	79fb      	ldrb	r3, [r7, #7]
     32e:	2101      	movs	r1, #1
     330:	fa01 f303 	lsl.w	r3, r1, r3
     334:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     338:	4313      	orrs	r3, r2
     33a:	600b      	str	r3, [r1, #0]
   }
   else {
       SCU->CLK_EN &= ~(0x01ul << id);
   }
}
     33c:	e00b      	b.n	356 <SystemDevClockCtl+0x46>
       SCU->CLK_EN &= ~(0x01ul << id);
     33e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     342:	681a      	ldr	r2, [r3, #0]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	2101      	movs	r1, #1
     348:	fa01 f303 	lsl.w	r3, r1, r3
     34c:	43db      	mvns	r3, r3
     34e:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     352:	4013      	ands	r3, r2
     354:	600b      	str	r3, [r1, #0]
}
     356:	bf00      	nop
     358:	370c      	adds	r7, #12
     35a:	46bd      	mov	sp, r7
     35c:	bc80      	pop	{r7}
     35e:	4770      	bx	lr

00000360 <SystemDevRstCtl>:

void SystemDevRstCtl(SwRstId_Type id)
{
     360:	b480      	push	{r7}
     362:	b083      	sub	sp, #12
     364:	af00      	add	r7, sp, #0
     366:	4603      	mov	r3, r0
     368:	71fb      	strb	r3, [r7, #7]
    SCU->SW_RST = 1 << id;
     36a:	79fb      	ldrb	r3, [r7, #7]
     36c:	2201      	movs	r2, #1
     36e:	409a      	lsls	r2, r3
     370:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     374:	605a      	str	r2, [r3, #4]
    /* The SoC need us set it to zero when reset request is triggered! */
    SCU->SW_RST = 0 << id;
     376:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     37a:	2200      	movs	r2, #0
     37c:	605a      	str	r2, [r3, #4]
}
     37e:	bf00      	nop
     380:	370c      	adds	r7, #12
     382:	46bd      	mov	sp, r7
     384:	bc80      	pop	{r7}
     386:	4770      	bx	lr

00000388 <SystemPADConfig>:

void SystemPADConfig(PADId_Type pad_id, PADConfig_Type *config)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	4603      	mov	r3, r0
     390:	6039      	str	r1, [r7, #0]
     392:	71fb      	strb	r3, [r7, #7]
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     394:	683b      	ldr	r3, [r7, #0]
     396:	781b      	ldrb	r3, [r3, #0]
     398:	f3c3 0300 	ubfx	r3, r3, #0, #1
     39c:	b2db      	uxtb	r3, r3
     39e:	f003 0201 	and.w	r2, r3, #1
                            (config->ie     &0x01) << 1 | 
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
     3aa:	b2db      	uxtb	r3, r3
     3ac:	005b      	lsls	r3, r3, #1
     3ae:	f003 0302 	and.w	r3, r3, #2
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3b2:	431a      	orrs	r2, r3
                            (config->oen    &0x01) << 2 | 
     3b4:	683b      	ldr	r3, [r7, #0]
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
     3bc:	b2db      	uxtb	r3, r3
     3be:	009b      	lsls	r3, r3, #2
     3c0:	f003 0304 	and.w	r3, r3, #4
                            (config->ie     &0x01) << 1 | 
     3c4:	431a      	orrs	r2, r3
                            (config->ren    &0x01) << 3 | 
     3c6:	683b      	ldr	r3, [r7, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     3ce:	b2db      	uxtb	r3, r3
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0308 	and.w	r3, r3, #8
                            (config->oen    &0x01) << 2 | 
     3d6:	431a      	orrs	r2, r3
                            (config->pad_ctl&0x07) << 4 );
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
     3e0:	b2db      	uxtb	r3, r3
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
                            (config->ren    &0x01) << 3 | 
     3e8:	ea42 0103 	orr.w	r1, r2, r3
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3ec:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	331c      	adds	r3, #28
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	4413      	add	r3, r2
     3f8:	6059      	str	r1, [r3, #4]
}
     3fa:	bf00      	nop
     3fc:	370c      	adds	r7, #12
     3fe:	46bd      	mov	sp, r7
     400:	bc80      	pop	{r7}
     402:	4770      	bx	lr

00000404 <SystemIOConfigQspi>:


void SystemIOConfigQspi(IOConfig_Type *config)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
    uint32_t cfg = SCU->IO_CONFIG ;
     40c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     412:	60fb      	str	r3, [r7, #12]
    cfg  &=~(0x07ul<<8|0x07ul<<11|0x07ul<<14|0x07ul<<17);
     414:	68fb      	ldr	r3, [r7, #12]
     416:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
     41a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
     41e:	60fb      	str	r3, [r7, #12]
    cfg  |= (	(config->d0&0x07) << 8  | 
     420:	687b      	ldr	r3, [r7, #4]
     422:	781b      	ldrb	r3, [r3, #0]
     424:	f3c3 0302 	ubfx	r3, r3, #0, #3
     428:	b2db      	uxtb	r3, r3
     42a:	021b      	lsls	r3, r3, #8
     42c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
                (config->d1&0x07) << 11 | 
     430:	687b      	ldr	r3, [r7, #4]
     432:	781b      	ldrb	r3, [r3, #0]
     434:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     438:	b2db      	uxtb	r3, r3
     43a:	02db      	lsls	r3, r3, #11
     43c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    cfg  |= (	(config->d0&0x07) << 8  | 
     440:	431a      	orrs	r2, r3
                (config->d2&0x07) << 14 | 
     442:	687b      	ldr	r3, [r7, #4]
     444:	881b      	ldrh	r3, [r3, #0]
     446:	f3c3 1382 	ubfx	r3, r3, #6, #3
     44a:	b2db      	uxtb	r3, r3
     44c:	039b      	lsls	r3, r3, #14
     44e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
                (config->d1&0x07) << 11 | 
     452:	431a      	orrs	r2, r3
                (config->d3&0x07) << 17 );	
     454:	687b      	ldr	r3, [r7, #4]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	f3c3 0342 	ubfx	r3, r3, #1, #3
     45c:	b2db      	uxtb	r3, r3
     45e:	045b      	lsls	r3, r3, #17
     460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
                (config->d2&0x07) << 14 | 
     464:	4313      	orrs	r3, r2
     466:	461a      	mov	r2, r3
    cfg  |= (	(config->d0&0x07) << 8  | 
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	4313      	orrs	r3, r2
     46c:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     46e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     472:	68fb      	ldr	r3, [r7, #12]
     474:	6293      	str	r3, [r2, #40]	; 0x28
}
     476:	bf00      	nop
     478:	3714      	adds	r7, #20
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <SystemIOConfigQspiOne>:


void SystemIOConfigQspiOne(uint32_t config,PadIoConfig_Type io)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	460b      	mov	r3, r1
     48a:	70fb      	strb	r3, [r7, #3]
    uint32_t cfg = SCU->IO_CONFIG ;
     48c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     492:	60fb      	str	r3, [r7, #12]
    if(io>3 || config >5)
     494:	78fb      	ldrb	r3, [r7, #3]
     496:	2b03      	cmp	r3, #3
     498:	d820      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2b05      	cmp	r3, #5
     49e:	d81d      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
        return ;
        
    cfg &=~(0x7ul<<(8 + 3*io));
     4a0:	78fa      	ldrb	r2, [r7, #3]
     4a2:	4613      	mov	r3, r2
     4a4:	005b      	lsls	r3, r3, #1
     4a6:	4413      	add	r3, r2
     4a8:	3308      	adds	r3, #8
     4aa:	2207      	movs	r2, #7
     4ac:	fa02 f303 	lsl.w	r3, r2, r3
     4b0:	43db      	mvns	r3, r3
     4b2:	68fa      	ldr	r2, [r7, #12]
     4b4:	4013      	ands	r3, r2
     4b6:	60fb      	str	r3, [r7, #12]
    cfg  |= ((config&0x07) << (8 + 3*io));	
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	f003 0107 	and.w	r1, r3, #7
     4be:	78fa      	ldrb	r2, [r7, #3]
     4c0:	4613      	mov	r3, r2
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	4413      	add	r3, r2
     4c6:	3308      	adds	r3, #8
     4c8:	fa01 f303 	lsl.w	r3, r1, r3
     4cc:	68fa      	ldr	r2, [r7, #12]
     4ce:	4313      	orrs	r3, r2
     4d0:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     4d2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     4d6:	68fb      	ldr	r3, [r7, #12]
     4d8:	6293      	str	r3, [r2, #40]	; 0x28
     4da:	e000      	b.n	4de <SystemIOConfigQspiOne+0x5e>
        return ;
     4dc:	bf00      	nop
}
     4de:	3714      	adds	r7, #20
     4e0:	46bd      	mov	sp, r7
     4e2:	bc80      	pop	{r7}
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop

000004e8 <cm_printf>:
//    return ch;
//}


int cm_printf(const char *fmt, ...)
{
     4e8:	b40f      	push	{r0, r1, r2, r3}
     4ea:	b580      	push	{r7, lr}
     4ec:	b082      	sub	sp, #8
     4ee:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
     4f0:	f107 0314 	add.w	r3, r7, #20
     4f4:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
     4f6:	683a      	ldr	r2, [r7, #0]
     4f8:	6939      	ldr	r1, [r7, #16]
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <cm_printf+0x38>)
     4fc:	f002 fb8a 	bl	2c14 <vsiprintf>
     500:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_tmp_buf, r);
     502:	687b      	ldr	r3, [r7, #4]
     504:	b29b      	uxth	r3, r3
     506:	461a      	mov	r2, r3
     508:	4905      	ldr	r1, [pc, #20]	; (520 <cm_printf+0x38>)
     50a:	4806      	ldr	r0, [pc, #24]	; (524 <cm_printf+0x3c>)
     50c:	f000 f9f6 	bl	8fc <UART_WriteData>
    va_end(arglist);
    
    return r;
     510:	687b      	ldr	r3, [r7, #4]
}
     512:	4618      	mov	r0, r3
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     51c:	b004      	add	sp, #16
     51e:	4770      	bx	lr
     520:	20008070 	.word	0x20008070
     524:	90002000 	.word	0x90002000

00000528 <at_eventInd>:

int at_eventInd(const char *fmt, ...)
{
     528:	b40f      	push	{r0, r1, r2, r3}
     52a:	b580      	push	{r7, lr}
     52c:	b082      	sub	sp, #8
     52e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     530:	f107 0314 	add.w	r3, r7, #20
     534:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     536:	683a      	ldr	r2, [r7, #0]
     538:	6939      	ldr	r1, [r7, #16]
     53a:	4809      	ldr	r0, [pc, #36]	; (560 <at_eventInd+0x38>)
     53c:	f002 fb6a 	bl	2c14 <vsiprintf>
     540:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_dbg_tmp_buf, r);
     542:	687b      	ldr	r3, [r7, #4]
     544:	b29b      	uxth	r3, r3
     546:	461a      	mov	r2, r3
     548:	4905      	ldr	r1, [pc, #20]	; (560 <at_eventInd+0x38>)
     54a:	4806      	ldr	r0, [pc, #24]	; (564 <at_eventInd+0x3c>)
     54c:	f000 f9d6 	bl	8fc <UART_WriteData>
    va_end(arglist);
    return r;
     550:	687b      	ldr	r3, [r7, #4]
}
     552:	4618      	mov	r0, r3
     554:	3708      	adds	r7, #8
     556:	46bd      	mov	sp, r7
     558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     55c:	b004      	add	sp, #16
     55e:	4770      	bx	lr
     560:	200080f0 	.word	0x200080f0
     564:	90002000 	.word	0x90002000

00000568 <cm_printf_Uart1>:

int cm_printf_Uart1(const char *fmt, ...)
{
     568:	b40f      	push	{r0, r1, r2, r3}
     56a:	b580      	push	{r7, lr}
     56c:	b082      	sub	sp, #8
     56e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     570:	f107 0314 	add.w	r3, r7, #20
     574:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     576:	683a      	ldr	r2, [r7, #0]
     578:	6939      	ldr	r1, [r7, #16]
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <cm_printf_Uart1+0x38>)
     57c:	f002 fb4a 	bl	2c14 <vsiprintf>
     580:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART1, s_dbg_tmp_buf, r);
     582:	687b      	ldr	r3, [r7, #4]
     584:	b29b      	uxth	r3, r3
     586:	461a      	mov	r2, r3
     588:	4905      	ldr	r1, [pc, #20]	; (5a0 <cm_printf_Uart1+0x38>)
     58a:	4806      	ldr	r0, [pc, #24]	; (5a4 <cm_printf_Uart1+0x3c>)
     58c:	f000 f9b6 	bl	8fc <UART_WriteData>
    va_end(arglist);
    return r;
     590:	687b      	ldr	r3, [r7, #4]
}
     592:	4618      	mov	r0, r3
     594:	3708      	adds	r7, #8
     596:	46bd      	mov	sp, r7
     598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     59c:	b004      	add	sp, #16
     59e:	4770      	bx	lr
     5a0:	20008170 	.word	0x20008170
     5a4:	90002800 	.word	0x90002800

000005a8 <SCUQspiConfig>:
#ifdef BR_CONFIG_TB
#include "verify_message.h"
#endif

bool SCUQspiConfig(QspiPin_Type pin,QspiPinConfig_Type tp)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b086      	sub	sp, #24
     5ac:	af00      	add	r7, sp, #0
     5ae:	4603      	mov	r3, r0
     5b0:	460a      	mov	r2, r1
     5b2:	71fb      	strb	r3, [r7, #7]
     5b4:	4613      	mov	r3, r2
     5b6:	71bb      	strb	r3, [r7, #6]
    PADConfig_Type  PAG_InitStru;
    uint16_t  funt=0, MAX=6;
     5b8:	2300      	movs	r3, #0
     5ba:	82fb      	strh	r3, [r7, #22]
     5bc:	2306      	movs	r3, #6
     5be:	82bb      	strh	r3, [r7, #20]
#ifdef BR003
    uint16_t  pib= pin-QSPI_PIN29;
     5c0:	79fb      	ldrb	r3, [r7, #7]
     5c2:	b29b      	uxth	r3, r3
     5c4:	3b1d      	subs	r3, #29
     5c6:	827b      	strh	r3, [r7, #18]
#else
    uint16_t  pib= pin-QSPI_PIN27;
#endif
    memset(&PAG_InitStru,0,sizeof(PADConfig_Type));
     5c8:	f107 030c 	add.w	r3, r7, #12
     5cc:	2204      	movs	r2, #4
     5ce:	2100      	movs	r1, #0
     5d0:	4618      	mov	r0, r3
     5d2:	f002 fb01 	bl	2bd8 <memset>
    //Check parameter
    if(pin < QSPI_PIN27 || pin > QSPI_PIN_END || tp >=QSPI_END)
     5d6:	79fb      	ldrb	r3, [r7, #7]
     5d8:	2b1a      	cmp	r3, #26
     5da:	d905      	bls.n	5e8 <SCUQspiConfig+0x40>
     5dc:	79fb      	ldrb	r3, [r7, #7]
     5de:	2b23      	cmp	r3, #35	; 0x23
     5e0:	d802      	bhi.n	5e8 <SCUQspiConfig+0x40>
     5e2:	79bb      	ldrb	r3, [r7, #6]
     5e4:	2b05      	cmp	r3, #5
     5e6:	d901      	bls.n	5ec <SCUQspiConfig+0x44>
        return false; 
     5e8:	2300      	movs	r3, #0
     5ea:	e049      	b.n	680 <SCUQspiConfig+0xd8>
    //Get Pad_ctl and IO Config
    funt = (tp + pib )>= MAX ? (tp + pib -MAX ): (tp + pib);
     5ec:	79ba      	ldrb	r2, [r7, #6]
     5ee:	8a7b      	ldrh	r3, [r7, #18]
     5f0:	441a      	add	r2, r3
     5f2:	8abb      	ldrh	r3, [r7, #20]
     5f4:	429a      	cmp	r2, r3
     5f6:	db08      	blt.n	60a <SCUQspiConfig+0x62>
     5f8:	79bb      	ldrb	r3, [r7, #6]
     5fa:	b29a      	uxth	r2, r3
     5fc:	8a7b      	ldrh	r3, [r7, #18]
     5fe:	4413      	add	r3, r2
     600:	b29a      	uxth	r2, r3
     602:	8abb      	ldrh	r3, [r7, #20]
     604:	1ad3      	subs	r3, r2, r3
     606:	b29b      	uxth	r3, r3
     608:	e004      	b.n	614 <SCUQspiConfig+0x6c>
     60a:	79bb      	ldrb	r3, [r7, #6]
     60c:	b29a      	uxth	r2, r3
     60e:	8a7b      	ldrh	r3, [r7, #18]
     610:	4413      	add	r3, r2
     612:	b29b      	uxth	r3, r3
     614:	82fb      	strh	r3, [r7, #22]

    PAG_InitStru.pad_ctl    = (PAD_CTL_MODE_type)funt;
     616:	8afb      	ldrh	r3, [r7, #22]
     618:	f003 0307 	and.w	r3, r3, #7
     61c:	b2da      	uxtb	r2, r3
     61e:	7b3b      	ldrb	r3, [r7, #12]
     620:	f362 1306 	bfi	r3, r2, #4, #3
     624:	733b      	strb	r3, [r7, #12]
    SystemPADConfig((PADId_Type)(pin),&PAG_InitStru);
     626:	f107 020c 	add.w	r2, r7, #12
     62a:	79fb      	ldrb	r3, [r7, #7]
     62c:	4611      	mov	r1, r2
     62e:	4618      	mov	r0, r3
     630:	f7ff feaa 	bl	388 <SystemPADConfig>

#ifdef BR_CONFIG_TB   //Config TB 
    tp = tp==2?0:tp==0?1:tp==1?2:tp==5?3:tp==4?4:5;
     634:	79bb      	ldrb	r3, [r7, #6]
     636:	2b02      	cmp	r3, #2
     638:	d015      	beq.n	666 <SCUQspiConfig+0xbe>
     63a:	79bb      	ldrb	r3, [r7, #6]
     63c:	2b00      	cmp	r3, #0
     63e:	d010      	beq.n	662 <SCUQspiConfig+0xba>
     640:	79bb      	ldrb	r3, [r7, #6]
     642:	2b01      	cmp	r3, #1
     644:	d00b      	beq.n	65e <SCUQspiConfig+0xb6>
     646:	79bb      	ldrb	r3, [r7, #6]
     648:	2b05      	cmp	r3, #5
     64a:	d006      	beq.n	65a <SCUQspiConfig+0xb2>
     64c:	79bb      	ldrb	r3, [r7, #6]
     64e:	2b04      	cmp	r3, #4
     650:	d101      	bne.n	656 <SCUQspiConfig+0xae>
     652:	2304      	movs	r3, #4
     654:	e008      	b.n	668 <SCUQspiConfig+0xc0>
     656:	2305      	movs	r3, #5
     658:	e006      	b.n	668 <SCUQspiConfig+0xc0>
     65a:	2303      	movs	r3, #3
     65c:	e004      	b.n	668 <SCUQspiConfig+0xc0>
     65e:	2302      	movs	r3, #2
     660:	e002      	b.n	668 <SCUQspiConfig+0xc0>
     662:	2301      	movs	r3, #1
     664:	e000      	b.n	668 <SCUQspiConfig+0xc0>
     666:	2300      	movs	r3, #0
     668:	71bb      	strb	r3, [r7, #6]
    Verrify_SendPinCon(0xE101 + tp*0x100 + pib);
     66a:	79bb      	ldrb	r3, [r7, #6]
     66c:	021b      	lsls	r3, r3, #8
     66e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     672:	3301      	adds	r3, #1
     674:	8a7a      	ldrh	r2, [r7, #18]
     676:	4413      	add	r3, r2
     678:	4618      	mov	r0, r3
     67a:	f001 fec9 	bl	2410 <Verrify_SendPinCon>
#endif
    return true;
     67e:	2301      	movs	r3, #1
}
     680:	4618      	mov	r0, r3
     682:	3718      	adds	r7, #24
     684:	46bd      	mov	sp, r7
     686:	bd80      	pop	{r7, pc}

00000688 <UART_DeInit>:

UART_write_handle  UWrite_handle;


void UART_DeInit(UART_TypeDef *UARTx)
{
     688:	b580      	push	{r7, lr}
     68a:	b082      	sub	sp, #8
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
    #if  defined(BR002)||defined(BR003)
    if (UARTx == UART0) {
     690:	687b      	ldr	r3, [r7, #4]
     692:	4a0c      	ldr	r2, [pc, #48]	; (6c4 <UART_DeInit+0x3c>)
     694:	4293      	cmp	r3, r2
     696:	d108      	bne.n	6aa <UART_DeInit+0x22>
        SystemDevRstCtl(UART0_SwRst);
     698:	2004      	movs	r0, #4
     69a:	f7ff fe61 	bl	360 <SystemDevRstCtl>
        memset(UART0,0,sizeof(UART_TypeDef));
     69e:	22d0      	movs	r2, #208	; 0xd0
     6a0:	2100      	movs	r1, #0
     6a2:	4808      	ldr	r0, [pc, #32]	; (6c4 <UART_DeInit+0x3c>)
     6a4:	f002 fa98 	bl	2bd8 <memset>
    else {
        SystemDevRstCtl(UART1_PCLK_SwRst);
        memset(UART1,0,sizeof(UART_TypeDef));
    }
    #endif
}
     6a8:	e007      	b.n	6ba <UART_DeInit+0x32>
        SystemDevRstCtl(UART1_SwRst);
     6aa:	2005      	movs	r0, #5
     6ac:	f7ff fe58 	bl	360 <SystemDevRstCtl>
        memset(UART1,0,sizeof(UART_TypeDef));
     6b0:	22d0      	movs	r2, #208	; 0xd0
     6b2:	2100      	movs	r1, #0
     6b4:	4804      	ldr	r0, [pc, #16]	; (6c8 <UART_DeInit+0x40>)
     6b6:	f002 fa8f 	bl	2bd8 <memset>
}
     6ba:	bf00      	nop
     6bc:	3708      	adds	r7, #8
     6be:	46bd      	mov	sp, r7
     6c0:	bd80      	pop	{r7, pc}
     6c2:	bf00      	nop
     6c4:	90002000 	.word	0x90002000
     6c8:	90002800 	.word	0x90002800

000006cc <UART_Init>:

void UART_Init(UART_TypeDef *UARTx, UART_InitInfo_Type *UART_InitStruct)
{
     6cc:	b480      	push	{r7}
     6ce:	b085      	sub	sp, #20
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	6039      	str	r1, [r7, #0]
    uint32_t BR_div;
    uint32_t fcr_cfg = 0;
     6d6:	2300      	movs	r3, #0
     6d8:	60fb      	str	r3, [r7, #12]
    
    if (UARTx->USR & 0x01) {
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     6de:	f003 0301 	and.w	r3, r3, #1
     6e2:	2b00      	cmp	r3, #0
     6e4:	f040 80dc 	bne.w	8a0 <UART_Init+0x1d4>
        //UART is busy now, we can init it!
        return;
    }
    UARTx->IER &= ~(0xFF);
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	685b      	ldr	r3, [r3, #4]
     6ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	605a      	str	r2, [r3, #4]
    UARTx->LCR |= 0x01 << 7; //Enable the DLL/DLH to writable
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	68db      	ldr	r3, [r3, #12]
     6f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	60da      	str	r2, [r3, #12]
    BR_div = (SystemCoreClock/UART_InitStruct->UART_BaudRate);
     700:	4b6a      	ldr	r3, [pc, #424]	; (8ac <UART_Init+0x1e0>)
     702:	681a      	ldr	r2, [r3, #0]
     704:	683b      	ldr	r3, [r7, #0]
     706:	681b      	ldr	r3, [r3, #0]
     708:	fbb2 f3f3 	udiv	r3, r2, r3
     70c:	60bb      	str	r3, [r7, #8]

    UARTx->DLL =  ((BR_div>>4 ) & 0xFF);
     70e:	68bb      	ldr	r3, [r7, #8]
     710:	091b      	lsrs	r3, r3, #4
     712:	b2da      	uxtb	r2, r3
     714:	687b      	ldr	r3, [r7, #4]
     716:	601a      	str	r2, [r3, #0]
    UARTx->DLH =  ((BR_div>>12) & 0xFF);
     718:	68bb      	ldr	r3, [r7, #8]
     71a:	0b1b      	lsrs	r3, r3, #12
     71c:	b2da      	uxtb	r2, r3
     71e:	687b      	ldr	r3, [r7, #4]
     720:	605a      	str	r2, [r3, #4]
    UARTx->DLF =  ((BR_div) & 0xf);
     722:	68bb      	ldr	r3, [r7, #8]
     724:	f003 020f 	and.w	r2, r3, #15
     728:	687b      	ldr	r3, [r7, #4]
     72a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable
     72e:	687b      	ldr	r3, [r7, #4]
     730:	68db      	ldr	r3, [r3, #12]
     732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
     736:	687b      	ldr	r3, [r7, #4]
     738:	60da      	str	r2, [r3, #12]
    UARTx->LCR &= ~(0xFF);
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	68db      	ldr	r3, [r3, #12]
     73e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     742:	687b      	ldr	r3, [r7, #4]
     744:	60da      	str	r2, [r3, #12]
    UARTx->LCR_EXT &= ~(0xFF);
     746:	687b      	ldr	r3, [r7, #4]
     748:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
     74c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     750:	687b      	ldr	r3, [r7, #4]
     752:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if (UART_InitStruct->UART_WordLength == UART_WL_9BITS) {
     756:	683b      	ldr	r3, [r7, #0]
     758:	889b      	ldrh	r3, [r3, #4]
     75a:	2b04      	cmp	r3, #4
     75c:	d006      	beq.n	76c <UART_Init+0xa0>
        //Supported  ???
        //UARTx->LCR_EXT |= 0x01 << 0;
    }
    else {
        UARTx->LCR |= UART_InitStruct->UART_WordLength;
     75e:	687b      	ldr	r3, [r7, #4]
     760:	68db      	ldr	r3, [r3, #12]
     762:	683a      	ldr	r2, [r7, #0]
     764:	8892      	ldrh	r2, [r2, #4]
     766:	431a      	orrs	r2, r3
     768:	687b      	ldr	r3, [r7, #4]
     76a:	60da      	str	r2, [r3, #12]
    }
    UARTx->LCR |= UART_InitStruct->UART_StopBits << 2;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	68db      	ldr	r3, [r3, #12]
     770:	683a      	ldr	r2, [r7, #0]
     772:	88d2      	ldrh	r2, [r2, #6]
     774:	0092      	lsls	r2, r2, #2
     776:	431a      	orrs	r2, r3
     778:	687b      	ldr	r3, [r7, #4]
     77a:	60da      	str	r2, [r3, #12]
    if (UART_InitStruct->UART_ParityMode != UART_PM_NONE) {
     77c:	683b      	ldr	r3, [r7, #0]
     77e:	891b      	ldrh	r3, [r3, #8]
     780:	2b00      	cmp	r3, #0
     782:	d025      	beq.n	7d0 <UART_Init+0x104>
        UARTx->LCR |= 0x01 << 3;
     784:	687b      	ldr	r3, [r7, #4]
     786:	68db      	ldr	r3, [r3, #12]
     788:	f043 0208 	orr.w	r2, r3, #8
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	60da      	str	r2, [r3, #12]
        //For ODD parity mode, the EPS/Stick Parity have be cleard.
        if (UART_InitStruct->UART_ParityMode == UART_PM_EVEN) {
     790:	683b      	ldr	r3, [r7, #0]
     792:	891b      	ldrh	r3, [r3, #8]
     794:	2b02      	cmp	r3, #2
     796:	d106      	bne.n	7a6 <UART_Init+0xda>
            UARTx->LCR |= 0x01 << 4;
     798:	687b      	ldr	r3, [r7, #4]
     79a:	68db      	ldr	r3, [r3, #12]
     79c:	f043 0210 	orr.w	r2, r3, #16
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	60da      	str	r2, [r3, #12]
     7a4:	e014      	b.n	7d0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG0) {
     7a6:	683b      	ldr	r3, [r7, #0]
     7a8:	891b      	ldrh	r3, [r3, #8]
     7aa:	2b03      	cmp	r3, #3
     7ac:	d106      	bne.n	7bc <UART_Init+0xf0>
            UARTx->LCR |= 0x03 << 4;
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	68db      	ldr	r3, [r3, #12]
     7b2:	f043 0230 	orr.w	r2, r3, #48	; 0x30
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	60da      	str	r2, [r3, #12]
     7ba:	e009      	b.n	7d0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG1) {
     7bc:	683b      	ldr	r3, [r7, #0]
     7be:	891b      	ldrh	r3, [r3, #8]
     7c0:	2b04      	cmp	r3, #4
     7c2:	d105      	bne.n	7d0 <UART_Init+0x104>
            UARTx->LCR |= 0x02 << 4;
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	68db      	ldr	r3, [r3, #12]
     7c8:	f043 0220 	orr.w	r2, r3, #32
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	60da      	str	r2, [r3, #12]
        }
    }
    UARTx->MCR &= ~(0xFF);
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	691b      	ldr	r3, [r3, #16]
     7d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	611a      	str	r2, [r3, #16]
    if (UART_InitStruct->UART_HardwareFlowControl      == UART_FC_DTRDSR) 
     7dc:	683b      	ldr	r3, [r7, #0]
     7de:	895b      	ldrh	r3, [r3, #10]
     7e0:	2b01      	cmp	r3, #1
     7e2:	d106      	bne.n	7f2 <UART_Init+0x126>
         UARTx->MCR |= 0x01;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	691b      	ldr	r3, [r3, #16]
     7e8:	f043 0201 	orr.w	r2, r3, #1
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	611a      	str	r2, [r3, #16]
     7f0:	e02a      	b.n	848 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS) 
     7f2:	683b      	ldr	r3, [r7, #0]
     7f4:	895b      	ldrh	r3, [r3, #10]
     7f6:	2b02      	cmp	r3, #2
     7f8:	d106      	bne.n	808 <UART_Init+0x13c>
         UARTx->MCR |= 0x02;
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	691b      	ldr	r3, [r3, #16]
     7fe:	f043 0202 	orr.w	r2, r3, #2
     802:	687b      	ldr	r3, [r7, #4]
     804:	611a      	str	r2, [r3, #16]
     806:	e01f      	b.n	848 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS) 
     808:	683b      	ldr	r3, [r7, #0]
     80a:	895b      	ldrh	r3, [r3, #10]
     80c:	2b03      	cmp	r3, #3
     80e:	d106      	bne.n	81e <UART_Init+0x152>
        UARTx->MCR  |= 0x22;
     810:	687b      	ldr	r3, [r7, #4]
     812:	691b      	ldr	r3, [r3, #16]
     814:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     818:	687b      	ldr	r3, [r7, #4]
     81a:	611a      	str	r2, [r3, #16]
     81c:	e014      	b.n	848 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS_DTRDSR) 
     81e:	683b      	ldr	r3, [r7, #0]
     820:	895b      	ldrh	r3, [r3, #10]
     822:	2b04      	cmp	r3, #4
     824:	d106      	bne.n	834 <UART_Init+0x168>
        UARTx->MCR  |= 0x3;
     826:	687b      	ldr	r3, [r7, #4]
     828:	691b      	ldr	r3, [r3, #16]
     82a:	f043 0203 	orr.w	r2, r3, #3
     82e:	687b      	ldr	r3, [r7, #4]
     830:	611a      	str	r2, [r3, #16]
     832:	e009      	b.n	848 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS_DTRDSR) 
     834:	683b      	ldr	r3, [r7, #0]
     836:	895b      	ldrh	r3, [r3, #10]
     838:	2b05      	cmp	r3, #5
     83a:	d105      	bne.n	848 <UART_Init+0x17c>
        UARTx->MCR  |= 0x23;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	691b      	ldr	r3, [r3, #16]
     840:	f043 0223 	orr.w	r2, r3, #35	; 0x23
     844:	687b      	ldr	r3, [r7, #4]
     846:	611a      	str	r2, [r3, #16]
    
    UARTx->FCR &= ~(0xFF);
     848:	687b      	ldr	r3, [r7, #4]
     84a:	689b      	ldr	r3, [r3, #8]
     84c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     850:	687b      	ldr	r3, [r7, #4]
     852:	609a      	str	r2, [r3, #8]
    if (UART_InitStruct->UART_DMAMode == UART_DM_MODE_1) 
     854:	683b      	ldr	r3, [r7, #0]
     856:	899b      	ldrh	r3, [r3, #12]
     858:	2b01      	cmp	r3, #1
     85a:	d103      	bne.n	864 <UART_Init+0x198>
        fcr_cfg |= 0x01 << 3;
     85c:	68fb      	ldr	r3, [r7, #12]
     85e:	f043 0308 	orr.w	r3, r3, #8
     862:	60fb      	str	r3, [r7, #12]
    
    if (UART_InitStruct->UART_FIFOMode == UART_FM_ENABLE) {
     864:	683b      	ldr	r3, [r7, #0]
     866:	89db      	ldrh	r3, [r3, #14]
     868:	2b01      	cmp	r3, #1
     86a:	d10d      	bne.n	888 <UART_Init+0x1bc>
        
        fcr_cfg |= UART_InitStruct->UART_RX_FIFOTriggerMode << 6;
     86c:	683b      	ldr	r3, [r7, #0]
     86e:	8a5b      	ldrh	r3, [r3, #18]
     870:	019b      	lsls	r3, r3, #6
     872:	461a      	mov	r2, r3
     874:	68fb      	ldr	r3, [r7, #12]
     876:	4313      	orrs	r3, r2
     878:	60fb      	str	r3, [r7, #12]
        fcr_cfg |= UART_InitStruct->UART_TX_FIFOTriggerMode << 4;       
     87a:	683b      	ldr	r3, [r7, #0]
     87c:	8a1b      	ldrh	r3, [r3, #16]
     87e:	011b      	lsls	r3, r3, #4
     880:	461a      	mov	r2, r3
     882:	68fb      	ldr	r3, [r7, #12]
     884:	4313      	orrs	r3, r2
     886:	60fb      	str	r3, [r7, #12]
    }
    
    fcr_cfg |= 0x03 << 1; //Reset XMIT/RCVR FIFO
     888:	68fb      	ldr	r3, [r7, #12]
     88a:	f043 0306 	orr.w	r3, r3, #6
     88e:	60fb      	str	r3, [r7, #12]
    fcr_cfg |= 0x01 << 0;
     890:	68fb      	ldr	r3, [r7, #12]
     892:	f043 0301 	orr.w	r3, r3, #1
     896:	60fb      	str	r3, [r7, #12]
    UARTx->FCR = fcr_cfg;
     898:	687b      	ldr	r3, [r7, #4]
     89a:	68fa      	ldr	r2, [r7, #12]
     89c:	609a      	str	r2, [r3, #8]
     89e:	e000      	b.n	8a2 <UART_Init+0x1d6>
        return;
     8a0:	bf00      	nop
}
     8a2:	3714      	adds	r7, #20
     8a4:	46bd      	mov	sp, r7
     8a6:	bc80      	pop	{r7}
     8a8:	4770      	bx	lr
     8aa:	bf00      	nop
     8ac:	20008000 	.word	0x20008000

000008b0 <UART_InterruptSet>:

void UART_InterruptSet(UART_TypeDef *UARTx, uint16_t UART_IntMask)
{
     8b0:	b480      	push	{r7}
     8b2:	b083      	sub	sp, #12
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
     8b8:	460b      	mov	r3, r1
     8ba:	807b      	strh	r3, [r7, #2]
    // UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable    
    UARTx->IER &= ~UART_IntMask;
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	685b      	ldr	r3, [r3, #4]
     8c0:	887a      	ldrh	r2, [r7, #2]
     8c2:	43d2      	mvns	r2, r2
     8c4:	401a      	ands	r2, r3
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	605a      	str	r2, [r3, #4]
    UARTx->IER |= UART_IntMask;
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	685a      	ldr	r2, [r3, #4]
     8ce:	887b      	ldrh	r3, [r7, #2]
     8d0:	431a      	orrs	r2, r3
     8d2:	687b      	ldr	r3, [r7, #4]
     8d4:	605a      	str	r2, [r3, #4]
}
     8d6:	bf00      	nop
     8d8:	370c      	adds	r7, #12
     8da:	46bd      	mov	sp, r7
     8dc:	bc80      	pop	{r7}
     8de:	4770      	bx	lr

000008e0 <UART_WriteByte>:

void UART_WriteByte(UART_TypeDef *UARTx, uint8_t byte)
{
     8e0:	b480      	push	{r7}
     8e2:	b083      	sub	sp, #12
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
     8e8:	460b      	mov	r3, r1
     8ea:	70fb      	strb	r3, [r7, #3]
    UARTx->THR = byte;
     8ec:	78fa      	ldrb	r2, [r7, #3]
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	601a      	str	r2, [r3, #0]
}
     8f2:	bf00      	nop
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	bc80      	pop	{r7}
     8fa:	4770      	bx	lr

000008fc <UART_WriteData>:

void UART_WriteData(UART_TypeDef *UARTx, uint8_t *data, uint16_t length)
{
     8fc:	b580      	push	{r7, lr}
     8fe:	b084      	sub	sp, #16
     900:	af00      	add	r7, sp, #0
     902:	60f8      	str	r0, [r7, #12]
     904:	60b9      	str	r1, [r7, #8]
     906:	4613      	mov	r3, r2
     908:	80fb      	strh	r3, [r7, #6]
    while (length--) {
     90a:	e013      	b.n	934 <UART_WriteData+0x38>
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
        {
            if(UWrite_handle)
     90c:	4b0e      	ldr	r3, [pc, #56]	; (948 <UART_WriteData+0x4c>)
     90e:	681b      	ldr	r3, [r3, #0]
     910:	2b00      	cmp	r3, #0
     912:	d002      	beq.n	91a <UART_WriteData+0x1e>
                UWrite_handle();
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <UART_WriteData+0x4c>)
     916:	681b      	ldr	r3, [r3, #0]
     918:	4798      	blx	r3
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
     91a:	68fb      	ldr	r3, [r7, #12]
     91c:	695b      	ldr	r3, [r3, #20]
     91e:	f003 0320 	and.w	r3, r3, #32
     922:	2b00      	cmp	r3, #0
     924:	d0f2      	beq.n	90c <UART_WriteData+0x10>
        };
        UARTx->THR = *data++;
     926:	68bb      	ldr	r3, [r7, #8]
     928:	1c5a      	adds	r2, r3, #1
     92a:	60ba      	str	r2, [r7, #8]
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	461a      	mov	r2, r3
     930:	68fb      	ldr	r3, [r7, #12]
     932:	601a      	str	r2, [r3, #0]
    while (length--) {
     934:	88fb      	ldrh	r3, [r7, #6]
     936:	1e5a      	subs	r2, r3, #1
     938:	80fa      	strh	r2, [r7, #6]
     93a:	2b00      	cmp	r3, #0
     93c:	d1ed      	bne.n	91a <UART_WriteData+0x1e>
    }
}
     93e:	bf00      	nop
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	20008390 	.word	0x20008390

0000094c <UART_SetUWriteHandle>:

void UART_SetUWriteHandle(UART_write_handle handle)
{
     94c:	b480      	push	{r7}
     94e:	b083      	sub	sp, #12
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
    UWrite_handle = handle;
     954:	4a03      	ldr	r2, [pc, #12]	; (964 <UART_SetUWriteHandle+0x18>)
     956:	687b      	ldr	r3, [r7, #4]
     958:	6013      	str	r3, [r2, #0]
}
     95a:	bf00      	nop
     95c:	370c      	adds	r7, #12
     95e:	46bd      	mov	sp, r7
     960:	bc80      	pop	{r7}
     962:	4770      	bx	lr
     964:	20008390 	.word	0x20008390

00000968 <UART_ReadByte>:

uint8_t UART_ReadByte(UART_TypeDef *UARTx)
{
     968:	b480      	push	{r7}
     96a:	b083      	sub	sp, #12
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
    return (UARTx->RBR & 0xFF);
     970:	687b      	ldr	r3, [r7, #4]
     972:	681b      	ldr	r3, [r3, #0]
     974:	b2db      	uxtb	r3, r3
}
     976:	4618      	mov	r0, r3
     978:	370c      	adds	r7, #12
     97a:	46bd      	mov	sp, r7
     97c:	bc80      	pop	{r7}
     97e:	4770      	bx	lr

00000980 <UART_AutoFlow>:

void  UART_AutoFlow(UART_TypeDef *UARTx,bool En)
{
     980:	b480      	push	{r7}
     982:	b083      	sub	sp, #12
     984:	af00      	add	r7, sp, #0
     986:	6078      	str	r0, [r7, #4]
     988:	460b      	mov	r3, r1
     98a:	70fb      	strb	r3, [r7, #3]
    if(En)
     98c:	78fb      	ldrb	r3, [r7, #3]
     98e:	2b00      	cmp	r3, #0
     990:	d00c      	beq.n	9ac <UART_AutoFlow+0x2c>
    {
        UARTx->MCR  |=0x22;  
     992:	687b      	ldr	r3, [r7, #4]
     994:	691b      	ldr	r3, [r3, #16]
     996:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	611a      	str	r2, [r3, #16]
        UARTx->FCR  |=1<<0;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	689b      	ldr	r3, [r3, #8]
     9a2:	f043 0201 	orr.w	r2, r3, #1
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	609a      	str	r2, [r3, #8]
    else
    {
        UARTx->MCR  &= ~0x22;  
    }
        
}
     9aa:	e005      	b.n	9b8 <UART_AutoFlow+0x38>
        UARTx->MCR  &= ~0x22;  
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	691b      	ldr	r3, [r3, #16]
     9b0:	f023 0222 	bic.w	r2, r3, #34	; 0x22
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	611a      	str	r2, [r3, #16]
}
     9b8:	bf00      	nop
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr

000009c2 <UART_SetRts>:

void  UART_SetRts(UART_TypeDef *UARTx,bool En)
{
     9c2:	b480      	push	{r7}
     9c4:	b083      	sub	sp, #12
     9c6:	af00      	add	r7, sp, #0
     9c8:	6078      	str	r0, [r7, #4]
     9ca:	460b      	mov	r3, r1
     9cc:	70fb      	strb	r3, [r7, #3]
    if(En)
     9ce:	78fb      	ldrb	r3, [r7, #3]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d006      	beq.n	9e2 <UART_SetRts+0x20>
    {
        UARTx->MCR  |=0x02;  
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	691b      	ldr	r3, [r3, #16]
     9d8:	f043 0202 	orr.w	r2, r3, #2
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	611a      	str	r2, [r3, #16]
    else
    {
        UARTx->MCR  &= ~0x02;  
    }
        
}
     9e0:	e005      	b.n	9ee <UART_SetRts+0x2c>
        UARTx->MCR  &= ~0x02;  
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	691b      	ldr	r3, [r3, #16]
     9e6:	f023 0202 	bic.w	r2, r3, #2
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	611a      	str	r2, [r3, #16]
}
     9ee:	bf00      	nop
     9f0:	370c      	adds	r7, #12
     9f2:	46bd      	mov	sp, r7
     9f4:	bc80      	pop	{r7}
     9f6:	4770      	bx	lr

000009f8 <UART_LSRCheckBits>:

FlagStatus UART_LSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     9f8:	b480      	push	{r7}
     9fa:	b085      	sub	sp, #20
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
     a00:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->LSR & 0x1FF;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	695b      	ldr	r3, [r3, #20]
     a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
     a0a:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     a0c:	68fa      	ldr	r2, [r7, #12]
     a0e:	683b      	ldr	r3, [r7, #0]
     a10:	4013      	ands	r3, r2
     a12:	2b00      	cmp	r3, #0
     a14:	d001      	beq.n	a1a <UART_LSRCheckBits+0x22>
        return SET;
     a16:	2301      	movs	r3, #1
     a18:	e000      	b.n	a1c <UART_LSRCheckBits+0x24>
    }
    else {
        return RESET;
     a1a:	2300      	movs	r3, #0
    }
}
     a1c:	4618      	mov	r0, r3
     a1e:	3714      	adds	r7, #20
     a20:	46bd      	mov	sp, r7
     a22:	bc80      	pop	{r7}
     a24:	4770      	bx	lr

00000a26 <UART_MSRCheckBits>:

FlagStatus UART_MSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     a26:	b480      	push	{r7}
     a28:	b085      	sub	sp, #20
     a2a:	af00      	add	r7, sp, #0
     a2c:	6078      	str	r0, [r7, #4]
     a2e:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->MSR;
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	699b      	ldr	r3, [r3, #24]
     a34:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     a36:	68fa      	ldr	r2, [r7, #12]
     a38:	683b      	ldr	r3, [r7, #0]
     a3a:	4013      	ands	r3, r2
     a3c:	2b00      	cmp	r3, #0
     a3e:	d001      	beq.n	a44 <UART_MSRCheckBits+0x1e>
        return SET;
     a40:	2301      	movs	r3, #1
     a42:	e000      	b.n	a46 <UART_MSRCheckBits+0x20>
    }
    else {
        return RESET;
     a44:	2300      	movs	r3, #0
    }
}
     a46:	4618      	mov	r0, r3
     a48:	3714      	adds	r7, #20
     a4a:	46bd      	mov	sp, r7
     a4c:	bc80      	pop	{r7}
     a4e:	4770      	bx	lr

00000a50 <UART_GetInterruptID>:

UART_InterID_Tpye UART_GetInterruptID(UART_TypeDef *UARTx)
{
     a50:	b480      	push	{r7}
     a52:	b083      	sub	sp, #12
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
    return (UART_InterID_Tpye)(UARTx->IIR & 0xf);
     a58:	687b      	ldr	r3, [r7, #4]
     a5a:	689b      	ldr	r3, [r3, #8]
     a5c:	b2db      	uxtb	r3, r3
     a5e:	f003 030f 	and.w	r3, r3, #15
     a62:	b2db      	uxtb	r3, r3
}
     a64:	4618      	mov	r0, r3
     a66:	370c      	adds	r7, #12
     a68:	46bd      	mov	sp, r7
     a6a:	bc80      	pop	{r7}
     a6c:	4770      	bx	lr

00000a6e <UART_GetInterruptStatus>:

ITStatus UART_GetInterruptStatus(UART_TypeDef *UARTx, uint16_t UART_IntIds)
{
     a6e:	b480      	push	{r7}
     a70:	b083      	sub	sp, #12
     a72:	af00      	add	r7, sp, #0
     a74:	6078      	str	r0, [r7, #4]
     a76:	460b      	mov	r3, r1
     a78:	807b      	strh	r3, [r7, #2]
    if (UARTx->IER & UART_IntIds) {
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	685a      	ldr	r2, [r3, #4]
     a7e:	887b      	ldrh	r3, [r7, #2]
     a80:	4013      	ands	r3, r2
     a82:	2b00      	cmp	r3, #0
     a84:	d007      	beq.n	a96 <UART_GetInterruptStatus+0x28>
        if (UARTx->IIR & UART_IntIds) {
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689a      	ldr	r2, [r3, #8]
     a8a:	887b      	ldrh	r3, [r7, #2]
     a8c:	4013      	ands	r3, r2
     a8e:	2b00      	cmp	r3, #0
     a90:	d001      	beq.n	a96 <UART_GetInterruptStatus+0x28>
            return SET;
     a92:	2301      	movs	r3, #1
     a94:	e000      	b.n	a98 <UART_GetInterruptStatus+0x2a>
        }
    }
    return RESET;
     a96:	2300      	movs	r3, #0
}
     a98:	4618      	mov	r0, r3
     a9a:	370c      	adds	r7, #12
     a9c:	46bd      	mov	sp, r7
     a9e:	bc80      	pop	{r7}
     aa0:	4770      	bx	lr

00000aa2 <UART_GetStatus>:

uint32_t UART_GetStatus(UART_TypeDef *UARTx)
{
     aa2:	b480      	push	{r7}
     aa4:	b083      	sub	sp, #12
     aa6:	af00      	add	r7, sp, #0
     aa8:	6078      	str	r0, [r7, #4]
    return(UARTx->USR );
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
     aae:	4618      	mov	r0, r3
     ab0:	370c      	adds	r7, #12
     ab2:	46bd      	mov	sp, r7
     ab4:	bc80      	pop	{r7}
     ab6:	4770      	bx	lr

00000ab8 <SPI_DelayNs>:
  * @brief Spi delay function -about one ns.
  * @param  None.
  * @retval None
  */
static void SPI_DelayNs(void)
{
     ab8:	b480      	push	{r7}
     aba:	b083      	sub	sp, #12
     abc:	af00      	add	r7, sp, #0
    uint32_t i;
    for( i=0;i<2;i++);
     abe:	2300      	movs	r3, #0
     ac0:	607b      	str	r3, [r7, #4]
     ac2:	e002      	b.n	aca <SPI_DelayNs+0x12>
     ac4:	687b      	ldr	r3, [r7, #4]
     ac6:	3301      	adds	r3, #1
     ac8:	607b      	str	r3, [r7, #4]
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	2b01      	cmp	r3, #1
     ace:	d9f9      	bls.n	ac4 <SPI_DelayNs+0xc>
}
     ad0:	bf00      	nop
     ad2:	370c      	adds	r7, #12
     ad4:	46bd      	mov	sp, r7
     ad6:	bc80      	pop	{r7}
     ad8:	4770      	bx	lr

00000ada <SPI_DelayMs>:
  * @brief Spi delay function -about one ms.
  * @param  time:This data represents the time delay required.
  * @retval None
  */
static void SPI_DelayMs(uint32_t time)
{    
     ada:	b580      	push	{r7, lr}
     adc:	b084      	sub	sp, #16
     ade:	af00      	add	r7, sp, #0
     ae0:	6078      	str	r0, [r7, #4]
   uint32_t i ,count=time*1000;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ae8:	fb02 f303 	mul.w	r3, r2, r3
     aec:	60bb      	str	r3, [r7, #8]
   for(i=0;i<count;i++)
     aee:	2300      	movs	r3, #0
     af0:	60fb      	str	r3, [r7, #12]
     af2:	e004      	b.n	afe <SPI_DelayMs+0x24>
        SPI_DelayNs();
     af4:	f7ff ffe0 	bl	ab8 <SPI_DelayNs>
   for(i=0;i<count;i++)
     af8:	68fb      	ldr	r3, [r7, #12]
     afa:	3301      	adds	r3, #1
     afc:	60fb      	str	r3, [r7, #12]
     afe:	68fa      	ldr	r2, [r7, #12]
     b00:	68bb      	ldr	r3, [r7, #8]
     b02:	429a      	cmp	r2, r3
     b04:	d3f6      	bcc.n	af4 <SPI_DelayMs+0x1a>

}
     b06:	bf00      	nop
     b08:	3710      	adds	r7, #16
     b0a:	46bd      	mov	sp, r7
     b0c:	bd80      	pop	{r7, pc}

00000b0e <FLASH_SetSpi>:

void  FLASH_SetSpi(SSI_TypeDef   *SSIx)
{
     b0e:	b480      	push	{r7}
     b10:	b083      	sub	sp, #12
     b12:	af00      	add	r7, sp, #0
     b14:	6078      	str	r0, [r7, #4]
    SPI_FLASH =  SSIx; 
     b16:	4a04      	ldr	r2, [pc, #16]	; (b28 <FLASH_SetSpi+0x1a>)
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	6013      	str	r3, [r2, #0]
}
     b1c:	bf00      	nop
     b1e:	370c      	adds	r7, #12
     b20:	46bd      	mov	sp, r7
     b22:	bc80      	pop	{r7}
     b24:	4770      	bx	lr
     b26:	bf00      	nop
     b28:	20008004 	.word	0x20008004

00000b2c <SPI_FlashCommand>:
  * @param rx:The data pointer will be read to the SPI 
  * @param rlen:The data length
  * @retval None
  */
static void SPI_FlashCommand(uint8_t instruction,uint8_t *tx,uint16_t tlen,uint8_t *rx,uint16_t rlen)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	b086      	sub	sp, #24
     b30:	af02      	add	r7, sp, #8
     b32:	60b9      	str	r1, [r7, #8]
     b34:	607b      	str	r3, [r7, #4]
     b36:	4603      	mov	r3, r0
     b38:	73fb      	strb	r3, [r7, #15]
     b3a:	4613      	mov	r3, r2
     b3c:	81bb      	strh	r3, [r7, #12]
   tx[0] = instruction;
     b3e:	68bb      	ldr	r3, [r7, #8]
     b40:	7bfa      	ldrb	r2, [r7, #15]
     b42:	701a      	strb	r2, [r3, #0]
   if(! SSI_Transfer(SPI_FLASH,tx,tlen,rx,rlen))
     b44:	4b0a      	ldr	r3, [pc, #40]	; (b70 <SPI_FlashCommand+0x44>)
     b46:	6818      	ldr	r0, [r3, #0]
     b48:	89ba      	ldrh	r2, [r7, #12]
     b4a:	8b3b      	ldrh	r3, [r7, #24]
     b4c:	9300      	str	r3, [sp, #0]
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	68b9      	ldr	r1, [r7, #8]
     b52:	f000 fc82 	bl	145a <SSI_Transfer>
     b56:	4603      	mov	r3, r0
     b58:	f083 0301 	eor.w	r3, r3, #1
     b5c:	b2db      	uxtb	r3, r3
     b5e:	2b00      	cmp	r3, #0
     b60:	d003      	beq.n	b6a <SPI_FlashCommand+0x3e>
    {
        cm_printf("SPIM0 : error\r\n");
     b62:	4804      	ldr	r0, [pc, #16]	; (b74 <SPI_FlashCommand+0x48>)
     b64:	f7ff fcc0 	bl	4e8 <cm_printf>
        return;
     b68:	bf00      	nop
    {
        cm_printf("0x%2x,",rx[i]);
    }
    cm_printf("\r\n");
#endif
}
     b6a:	3710      	adds	r7, #16
     b6c:	46bd      	mov	sp, r7
     b6e:	bd80      	pop	{r7, pc}
     b70:	20008004 	.word	0x20008004
     b74:	00003444 	.word	0x00003444

00000b78 <FLASH_WriteEnable>:
  * @brief The Write Enable (WREN) instruction is for setting Write Enable Latch (WEL) .
  * @param  :None.
  * @retval None
  */
void FLASH_WriteEnable(void)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af02      	add	r7, sp, #8
    uint8_t tx_buff[1];
    uint8_t rx_buff[1] ={0};
     b7e:	2300      	movs	r3, #0
     b80:	703b      	strb	r3, [r7, #0]
   
    do
    {
        SPI_FlashCommand(FLASH_WRITE_ENBALE,tx_buff,1,NULL,0);
     b82:	1d39      	adds	r1, r7, #4
     b84:	2300      	movs	r3, #0
     b86:	9300      	str	r3, [sp, #0]
     b88:	2300      	movs	r3, #0
     b8a:	2201      	movs	r2, #1
     b8c:	2006      	movs	r0, #6
     b8e:	f7ff ffcd 	bl	b2c <SPI_FlashCommand>
        SPI_DelayMs(1);
     b92:	2001      	movs	r0, #1
     b94:	f7ff ffa1 	bl	ada <SPI_DelayMs>
        SPI_FlashCommand(FLASH_READ_STATUS_REG1,tx_buff,1,rx_buff,1);
     b98:	463a      	mov	r2, r7
     b9a:	1d39      	adds	r1, r7, #4
     b9c:	2301      	movs	r3, #1
     b9e:	9300      	str	r3, [sp, #0]
     ba0:	4613      	mov	r3, r2
     ba2:	2201      	movs	r2, #1
     ba4:	2005      	movs	r0, #5
     ba6:	f7ff ffc1 	bl	b2c <SPI_FlashCommand>
    }while(!(rx_buff[0]&0x02));
     baa:	783b      	ldrb	r3, [r7, #0]
     bac:	f003 0302 	and.w	r3, r3, #2
     bb0:	2b00      	cmp	r3, #0
     bb2:	d0e6      	beq.n	b82 <FLASH_WriteEnable+0xa>
}
     bb4:	bf00      	nop
     bb6:	3708      	adds	r7, #8
     bb8:	46bd      	mov	sp, r7
     bba:	bd80      	pop	{r7, pc}

00000bbc <FLASH_WriteDisable>:
  * @brief The Write Disable (WRDI) instruction is for resetting Write Enable Latch (WEL) .
  * @param  :None.
  * @retval None
  */
void FLASH_WriteDisable(void)
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b084      	sub	sp, #16
     bc0:	af02      	add	r7, sp, #8
    uint8_t tx_buff[1] = {0};
     bc2:	2300      	movs	r3, #0
     bc4:	713b      	strb	r3, [r7, #4]
    uint8_t rx_buff[1] ={0};
     bc6:	2300      	movs	r3, #0
     bc8:	703b      	strb	r3, [r7, #0]
    
    do
    {
        SPI_FlashCommand(FLASH_WRITE_DISABLE,tx_buff,1,NULL,0);
     bca:	1d39      	adds	r1, r7, #4
     bcc:	2300      	movs	r3, #0
     bce:	9300      	str	r3, [sp, #0]
     bd0:	2300      	movs	r3, #0
     bd2:	2201      	movs	r2, #1
     bd4:	2004      	movs	r0, #4
     bd6:	f7ff ffa9 	bl	b2c <SPI_FlashCommand>
        SPI_DelayMs(1);
     bda:	2001      	movs	r0, #1
     bdc:	f7ff ff7d 	bl	ada <SPI_DelayMs>
        SPI_FlashCommand(FLASH_READ_STATUS_REG1,tx_buff,1,rx_buff,1);
     be0:	463a      	mov	r2, r7
     be2:	1d39      	adds	r1, r7, #4
     be4:	2301      	movs	r3, #1
     be6:	9300      	str	r3, [sp, #0]
     be8:	4613      	mov	r3, r2
     bea:	2201      	movs	r2, #1
     bec:	2005      	movs	r0, #5
     bee:	f7ff ff9d 	bl	b2c <SPI_FlashCommand>
    }while(rx_buff[0]&0x02);
     bf2:	783b      	ldrb	r3, [r7, #0]
     bf4:	f003 0302 	and.w	r3, r3, #2
     bf8:	2b00      	cmp	r3, #0
     bfa:	d1e6      	bne.n	bca <FLASH_WriteDisable+0xe>
}
     bfc:	bf00      	nop
     bfe:	3708      	adds	r7, #8
     c00:	46bd      	mov	sp, r7
     c02:	bd80      	pop	{r7, pc}

00000c04 <FLASH_WaitBusy>:
  * the memory is busy in program/erase/write status register progress .
  * @param  None.
  * @retval None
  */
void FLASH_WaitBusy(void)
{
     c04:	b580      	push	{r7, lr}
     c06:	b084      	sub	sp, #16
     c08:	af02      	add	r7, sp, #8
    uint8_t rx_buff[1] ={0};
     c0a:	2300      	movs	r3, #0
     c0c:	713b      	strb	r3, [r7, #4]
    uint8_t tx_buff[1] ={0};
     c0e:	2300      	movs	r3, #0
     c10:	703b      	strb	r3, [r7, #0]
    do
    {
        SPI_DelayMs(1);
     c12:	2001      	movs	r0, #1
     c14:	f7ff ff61 	bl	ada <SPI_DelayMs>
        SPI_FlashCommand(FLASH_READ_STATUS_REG1,tx_buff,1,rx_buff,1);
     c18:	1d3a      	adds	r2, r7, #4
     c1a:	4639      	mov	r1, r7
     c1c:	2301      	movs	r3, #1
     c1e:	9300      	str	r3, [sp, #0]
     c20:	4613      	mov	r3, r2
     c22:	2201      	movs	r2, #1
     c24:	2005      	movs	r0, #5
     c26:	f7ff ff81 	bl	b2c <SPI_FlashCommand>
    }while(rx_buff[0]&0x01);
     c2a:	793b      	ldrb	r3, [r7, #4]
     c2c:	f003 0301 	and.w	r3, r3, #1
     c30:	2b00      	cmp	r3, #0
     c32:	d1ee      	bne.n	c12 <FLASH_WaitBusy+0xe>

}
     c34:	bf00      	nop
     c36:	3708      	adds	r7, #8
     c38:	46bd      	mov	sp, r7
     c3a:	bd80      	pop	{r7, pc}

00000c3c <FLASH_ResetFlash>:
  * @brief The Software Reset operation of flash.
  * @param :None.
  * @retval None
  */
void FLASH_ResetFlash(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b084      	sub	sp, #16
     c40:	af02      	add	r7, sp, #8
    uint8_t rx_buff[1];
    SPI_FlashCommand(FLASH_ENABLE_RESET,rx_buff,1,NULL,0);
     c42:	1d39      	adds	r1, r7, #4
     c44:	2300      	movs	r3, #0
     c46:	9300      	str	r3, [sp, #0]
     c48:	2300      	movs	r3, #0
     c4a:	2201      	movs	r2, #1
     c4c:	2066      	movs	r0, #102	; 0x66
     c4e:	f7ff ff6d 	bl	b2c <SPI_FlashCommand>
    SPI_FlashCommand(FLASH_RESET_DEVICE,rx_buff,1,NULL,0);
     c52:	1d39      	adds	r1, r7, #4
     c54:	2300      	movs	r3, #0
     c56:	9300      	str	r3, [sp, #0]
     c58:	2300      	movs	r3, #0
     c5a:	2201      	movs	r2, #1
     c5c:	2099      	movs	r0, #153	; 0x99
     c5e:	f7ff ff65 	bl	b2c <SPI_FlashCommand>
}
     c62:	bf00      	nop
     c64:	3708      	adds	r7, #8
     c66:	46bd      	mov	sp, r7
     c68:	bd80      	pop	{r7, pc}

00000c6a <FLASH_WriteStatusReg>:
  * @param reg1config:Writes the value of state register 1. 
  * @param reg2config:Writes the value of state register 2
  * @retval None
  */
void FLASH_WriteStatusReg(uint8_t *reg1config,uint8_t *reg2config)
{
     c6a:	b580      	push	{r7, lr}
     c6c:	b086      	sub	sp, #24
     c6e:	af02      	add	r7, sp, #8
     c70:	6078      	str	r0, [r7, #4]
     c72:	6039      	str	r1, [r7, #0]
    uint8_t tx_buff[3];
    tx_buff[1] = *reg1config;
     c74:	687b      	ldr	r3, [r7, #4]
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	737b      	strb	r3, [r7, #13]
    tx_buff[2] = *reg2config;
     c7a:	683b      	ldr	r3, [r7, #0]
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	73bb      	strb	r3, [r7, #14]
    SPI_FlashCommand(FLASH_WRITE_STATUS_REG1,tx_buff,3,NULL,0);
     c80:	f107 010c 	add.w	r1, r7, #12
     c84:	2300      	movs	r3, #0
     c86:	9300      	str	r3, [sp, #0]
     c88:	2300      	movs	r3, #0
     c8a:	2203      	movs	r2, #3
     c8c:	2001      	movs	r0, #1
     c8e:	f7ff ff4d 	bl	b2c <SPI_FlashCommand>
    SPI_DelayMs(5);
     c92:	2005      	movs	r0, #5
     c94:	f7ff ff21 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     c98:	f7ff ffb4 	bl	c04 <FLASH_WaitBusy>
}
     c9c:	bf00      	nop
     c9e:	3710      	adds	r7, #16
     ca0:	46bd      	mov	sp, r7
     ca2:	bd80      	pop	{r7, pc}

00000ca4 <FLASH_ReadStatusReg1>:
  * @brief  Read the FLASH status registers 1 .
  * @param config:This pointer value is the value of the return status register 1. 
  * @retval None
  */
void FLASH_ReadStatusReg1(uint8_t *config)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b086      	sub	sp, #24
     ca8:	af02      	add	r7, sp, #8
     caa:	6078      	str	r0, [r7, #4]
    uint8_t tx_buff[1];
    SPI_FlashCommand(FLASH_READ_STATUS_REG1,tx_buff,1,config,1);
     cac:	f107 010c 	add.w	r1, r7, #12
     cb0:	2301      	movs	r3, #1
     cb2:	9300      	str	r3, [sp, #0]
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	2201      	movs	r2, #1
     cb8:	2005      	movs	r0, #5
     cba:	f7ff ff37 	bl	b2c <SPI_FlashCommand>
}
     cbe:	bf00      	nop
     cc0:	3710      	adds	r7, #16
     cc2:	46bd      	mov	sp, r7
     cc4:	bd80      	pop	{r7, pc}

00000cc6 <FLASH_ReadStatusReg2>:
  * @brief  Read the FLASH status registers 2.
  * @param config:This pointer value is the value of the return status register 2. 
  * @retval None
  */
void FLASH_ReadStatusReg2(uint8_t *config)
{
     cc6:	b580      	push	{r7, lr}
     cc8:	b086      	sub	sp, #24
     cca:	af02      	add	r7, sp, #8
     ccc:	6078      	str	r0, [r7, #4]
    uint8_t tx_buff[1];
    SPI_FlashCommand(FLASH_READ_STATUS_REG2,tx_buff,1,config,1);
     cce:	f107 010c 	add.w	r1, r7, #12
     cd2:	2301      	movs	r3, #1
     cd4:	9300      	str	r3, [sp, #0]
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	2201      	movs	r2, #1
     cda:	2035      	movs	r0, #53	; 0x35
     cdc:	f7ff ff26 	bl	b2c <SPI_FlashCommand>
}
     ce0:	bf00      	nop
     ce2:	3710      	adds	r7, #16
     ce4:	46bd      	mov	sp, r7
     ce6:	bd80      	pop	{r7, pc}

00000ce8 <FLASH_ReadData>:
  * @param data:The data pointer will be write to the FALSH
  * @param len:The data length
  * @retval None
  */
void FLASH_ReadData(uint32_t addr,uint8_t *data,uint16_t len)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b088      	sub	sp, #32
     cec:	af02      	add	r7, sp, #8
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	4613      	mov	r3, r2
     cf4:	80fb      	strh	r3, [r7, #6]
    uint8_t tx_buff[4];
    tx_buff[1]  =  addr>>16 &0xff;
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	0c1b      	lsrs	r3, r3, #16
     cfa:	b2db      	uxtb	r3, r3
     cfc:	757b      	strb	r3, [r7, #21]
    tx_buff[2]  =  addr>>8&0xff;
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	0a1b      	lsrs	r3, r3, #8
     d02:	b2db      	uxtb	r3, r3
     d04:	75bb      	strb	r3, [r7, #22]
    tx_buff[3]  =  addr&0xff;
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	b2db      	uxtb	r3, r3
     d0a:	75fb      	strb	r3, [r7, #23]
    
    SPI_FlashCommand(FLASH_READ_DATA,tx_buff,4,data,len);
     d0c:	f107 0114 	add.w	r1, r7, #20
     d10:	88fb      	ldrh	r3, [r7, #6]
     d12:	9300      	str	r3, [sp, #0]
     d14:	68bb      	ldr	r3, [r7, #8]
     d16:	2204      	movs	r2, #4
     d18:	2003      	movs	r0, #3
     d1a:	f7ff ff07 	bl	b2c <SPI_FlashCommand>
}
     d1e:	bf00      	nop
     d20:	3718      	adds	r7, #24
     d22:	46bd      	mov	sp, r7
     d24:	bd80      	pop	{r7, pc}

00000d26 <FLASH_ReadDualData>:
  * @param data:The data pointer will be read to the FALSH
  * @param len:The data length
  * @retval None
  */
void FLASH_ReadDualData(uint32_t addr,uint8_t *data,uint16_t len)
{
     d26:	b580      	push	{r7, lr}
     d28:	b088      	sub	sp, #32
     d2a:	af02      	add	r7, sp, #8
     d2c:	60f8      	str	r0, [r7, #12]
     d2e:	60b9      	str	r1, [r7, #8]
     d30:	4613      	mov	r3, r2
     d32:	80fb      	strh	r3, [r7, #6]
    uint8_t tx_buff[5];
    tx_buff[1]  =  addr>>16 &0xff;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	0c1b      	lsrs	r3, r3, #16
     d38:	b2db      	uxtb	r3, r3
     d3a:	747b      	strb	r3, [r7, #17]
    tx_buff[2]  =  addr>>8&0xff;
     d3c:	68fb      	ldr	r3, [r7, #12]
     d3e:	0a1b      	lsrs	r3, r3, #8
     d40:	b2db      	uxtb	r3, r3
     d42:	74bb      	strb	r3, [r7, #18]
    tx_buff[3]  =  addr&0xff;
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	b2db      	uxtb	r3, r3
     d48:	74fb      	strb	r3, [r7, #19]
    tx_buff[4]  =  0;
     d4a:	2300      	movs	r3, #0
     d4c:	753b      	strb	r3, [r7, #20]
    
    SPI_FlashCommand(FLASH_FAST_READ_DUAL_OUT,tx_buff,5,data,len);
     d4e:	f107 0110 	add.w	r1, r7, #16
     d52:	88fb      	ldrh	r3, [r7, #6]
     d54:	9300      	str	r3, [sp, #0]
     d56:	68bb      	ldr	r3, [r7, #8]
     d58:	2205      	movs	r2, #5
     d5a:	203b      	movs	r0, #59	; 0x3b
     d5c:	f7ff fee6 	bl	b2c <SPI_FlashCommand>
}
     d60:	bf00      	nop
     d62:	3718      	adds	r7, #24
     d64:	46bd      	mov	sp, r7
     d66:	bd80      	pop	{r7, pc}

00000d68 <FLASH_SectorErase>:
  * before sending the sector Erase (PE).
  * @param addr:The first address of memory that needs to be erased. 
  * @retval None
  */
void FLASH_SectorErase(uint32_t addr)
{
     d68:	b580      	push	{r7, lr}
     d6a:	b086      	sub	sp, #24
     d6c:	af02      	add	r7, sp, #8
     d6e:	6078      	str	r0, [r7, #4]
    uint8_t tx_buff[4];
    
    FLASH_WriteEnable();
     d70:	f7ff ff02 	bl	b78 <FLASH_WriteEnable>
    SPI_DelayMs(5);
     d74:	2005      	movs	r0, #5
     d76:	f7ff feb0 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     d7a:	f7ff ff43 	bl	c04 <FLASH_WaitBusy>
    tx_buff[1]  =  addr>>16 &0xff;
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	0c1b      	lsrs	r3, r3, #16
     d82:	b2db      	uxtb	r3, r3
     d84:	737b      	strb	r3, [r7, #13]
    tx_buff[2]  =  addr>>8&0xff;
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	0a1b      	lsrs	r3, r3, #8
     d8a:	b2db      	uxtb	r3, r3
     d8c:	73bb      	strb	r3, [r7, #14]
    tx_buff[3]  =  addr&0xff;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	b2db      	uxtb	r3, r3
     d92:	73fb      	strb	r3, [r7, #15]
    SPI_FlashCommand(FLASH_SECTOR_ERASE,tx_buff,4,NULL,0);
     d94:	f107 010c 	add.w	r1, r7, #12
     d98:	2300      	movs	r3, #0
     d9a:	9300      	str	r3, [sp, #0]
     d9c:	2300      	movs	r3, #0
     d9e:	2204      	movs	r2, #4
     da0:	2020      	movs	r0, #32
     da2:	f7ff fec3 	bl	b2c <SPI_FlashCommand>
    SPI_DelayMs(5);
     da6:	2005      	movs	r0, #5
     da8:	f7ff fe97 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     dac:	f7ff ff2a 	bl	c04 <FLASH_WaitBusy>
}
     db0:	bf00      	nop
     db2:	3710      	adds	r7, #16
     db4:	46bd      	mov	sp, r7
     db6:	bd80      	pop	{r7, pc}

00000db8 <FLASH_32kBlackErase>:
  * before sending the Block Erase (PE).
  * @param addr:The first address of memory that needs to be erased. 
  * @retval None
  */
void FLASH_32kBlackErase(uint32_t addr)
{
     db8:	b580      	push	{r7, lr}
     dba:	b086      	sub	sp, #24
     dbc:	af02      	add	r7, sp, #8
     dbe:	6078      	str	r0, [r7, #4]
    uint8_t tx_buff[4];
    
    FLASH_WriteEnable();
     dc0:	f7ff feda 	bl	b78 <FLASH_WriteEnable>
    SPI_DelayMs(5);
     dc4:	2005      	movs	r0, #5
     dc6:	f7ff fe88 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     dca:	f7ff ff1b 	bl	c04 <FLASH_WaitBusy>
    tx_buff[1]  =  addr>>16 &0xff;
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	0c1b      	lsrs	r3, r3, #16
     dd2:	b2db      	uxtb	r3, r3
     dd4:	737b      	strb	r3, [r7, #13]
    tx_buff[2]  =  addr>>8&0xff;
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	0a1b      	lsrs	r3, r3, #8
     dda:	b2db      	uxtb	r3, r3
     ddc:	73bb      	strb	r3, [r7, #14]
    tx_buff[3]  =  addr&0xff;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	b2db      	uxtb	r3, r3
     de2:	73fb      	strb	r3, [r7, #15]
    SPI_FlashCommand(FLASH_32K_BLOCK_ERASE,tx_buff,4,NULL,0);
     de4:	f107 010c 	add.w	r1, r7, #12
     de8:	2300      	movs	r3, #0
     dea:	9300      	str	r3, [sp, #0]
     dec:	2300      	movs	r3, #0
     dee:	2204      	movs	r2, #4
     df0:	2052      	movs	r0, #82	; 0x52
     df2:	f7ff fe9b 	bl	b2c <SPI_FlashCommand>
    SPI_DelayMs(5);
     df6:	2005      	movs	r0, #5
     df8:	f7ff fe6f 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     dfc:	f7ff ff02 	bl	c04 <FLASH_WaitBusy>
}
     e00:	bf00      	nop
     e02:	3710      	adds	r7, #16
     e04:	46bd      	mov	sp, r7
     e06:	bd80      	pop	{r7, pc}

00000e08 <FLASH_64kBlackErase>:
  * before sending the Block Erase (PE).
  * @param addr:The first address of memory that needs to be erased. 
  * @retval None
  */
void FLASH_64kBlackErase(uint32_t addr)
{
     e08:	b580      	push	{r7, lr}
     e0a:	b086      	sub	sp, #24
     e0c:	af02      	add	r7, sp, #8
     e0e:	6078      	str	r0, [r7, #4]
    uint8_t tx_buff[4];
    
    FLASH_WriteEnable();
     e10:	f7ff feb2 	bl	b78 <FLASH_WriteEnable>
    SPI_DelayMs(5);
     e14:	2005      	movs	r0, #5
     e16:	f7ff fe60 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     e1a:	f7ff fef3 	bl	c04 <FLASH_WaitBusy>
    tx_buff[1]  =  addr>>16 &0xff;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	0c1b      	lsrs	r3, r3, #16
     e22:	b2db      	uxtb	r3, r3
     e24:	737b      	strb	r3, [r7, #13]
    tx_buff[2]  =  addr>>8&0xff;
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	0a1b      	lsrs	r3, r3, #8
     e2a:	b2db      	uxtb	r3, r3
     e2c:	73bb      	strb	r3, [r7, #14]
    tx_buff[3]  =  addr&0xff;
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	b2db      	uxtb	r3, r3
     e32:	73fb      	strb	r3, [r7, #15]
    SPI_FlashCommand(FLASH_64K_BLOCK_ERASE,tx_buff,4,NULL,0);
     e34:	f107 010c 	add.w	r1, r7, #12
     e38:	2300      	movs	r3, #0
     e3a:	9300      	str	r3, [sp, #0]
     e3c:	2300      	movs	r3, #0
     e3e:	2204      	movs	r2, #4
     e40:	20d8      	movs	r0, #216	; 0xd8
     e42:	f7ff fe73 	bl	b2c <SPI_FlashCommand>
    SPI_DelayMs(5);
     e46:	2005      	movs	r0, #5
     e48:	f7ff fe47 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     e4c:	f7ff feda 	bl	c04 <FLASH_WaitBusy>
}
     e50:	bf00      	nop
     e52:	3710      	adds	r7, #16
     e54:	46bd      	mov	sp, r7
     e56:	bd80      	pop	{r7, pc}

00000e58 <FLASH_ChipErase>:
  * @brief  The Block Chip (PE) instruction is for erasing the data of the chosen Chip to be "1". 
  * A Write Enable (WREN) instruction must execute to set the Write Enable Latch (WEL) bit 
  * @retval None
  */
void FLASH_ChipErase(void)
{
     e58:	b580      	push	{r7, lr}
     e5a:	b084      	sub	sp, #16
     e5c:	af02      	add	r7, sp, #8
    uint8_t tx_buff[1];
    FLASH_WriteEnable();
     e5e:	f7ff fe8b 	bl	b78 <FLASH_WriteEnable>
    SPI_DelayMs(5);
     e62:	2005      	movs	r0, #5
     e64:	f7ff fe39 	bl	ada <SPI_DelayMs>
    SPI_FlashCommand(FLASH_CHIP_ERASW1,tx_buff,1,NULL,0);
     e68:	1d39      	adds	r1, r7, #4
     e6a:	2300      	movs	r3, #0
     e6c:	9300      	str	r3, [sp, #0]
     e6e:	2300      	movs	r3, #0
     e70:	2201      	movs	r2, #1
     e72:	2060      	movs	r0, #96	; 0x60
     e74:	f7ff fe5a 	bl	b2c <SPI_FlashCommand>
    SPI_DelayMs(5);
     e78:	2005      	movs	r0, #5
     e7a:	f7ff fe2e 	bl	ada <SPI_DelayMs>
    FLASH_WaitBusy();
     e7e:	f7ff fec1 	bl	c04 <FLASH_WaitBusy>
}
     e82:	bf00      	nop
     e84:	3708      	adds	r7, #8
     e86:	46bd      	mov	sp, r7
     e88:	bd80      	pop	{r7, pc}

00000e8a <FLASH_PageProgram>:
  * @param data:The data pointer will be write to the FALSH
  * @param len:The data length
  * @retval None
  */
void FLASH_PageProgram(uint32_t addr,uint8_t *data,uint16_t len)
{
     e8a:	b580      	push	{r7, lr}
     e8c:	b088      	sub	sp, #32
     e8e:	af02      	add	r7, sp, #8
     e90:	60f8      	str	r0, [r7, #12]
     e92:	60b9      	str	r1, [r7, #8]
     e94:	4613      	mov	r3, r2
     e96:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    for(i=0;i<len;i++)
     e98:	2300      	movs	r3, #0
     e9a:	82fb      	strh	r3, [r7, #22]
     e9c:	e00a      	b.n	eb4 <FLASH_PageProgram+0x2a>
        spi_ProgramBuff[4+i] = data[i];
     e9e:	8afb      	ldrh	r3, [r7, #22]
     ea0:	68ba      	ldr	r2, [r7, #8]
     ea2:	441a      	add	r2, r3
     ea4:	8afb      	ldrh	r3, [r7, #22]
     ea6:	3304      	adds	r3, #4
     ea8:	7811      	ldrb	r1, [r2, #0]
     eaa:	4a13      	ldr	r2, [pc, #76]	; (ef8 <FLASH_PageProgram+0x6e>)
     eac:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<len;i++)
     eae:	8afb      	ldrh	r3, [r7, #22]
     eb0:	3301      	adds	r3, #1
     eb2:	82fb      	strh	r3, [r7, #22]
     eb4:	8afa      	ldrh	r2, [r7, #22]
     eb6:	88fb      	ldrh	r3, [r7, #6]
     eb8:	429a      	cmp	r2, r3
     eba:	d3f0      	bcc.n	e9e <FLASH_PageProgram+0x14>
    
    FLASH_WriteEnable();
     ebc:	f7ff fe5c 	bl	b78 <FLASH_WriteEnable>
    spi_ProgramBuff[1]  =  addr>>16 &0xff;
     ec0:	68fb      	ldr	r3, [r7, #12]
     ec2:	0c1b      	lsrs	r3, r3, #16
     ec4:	b2da      	uxtb	r2, r3
     ec6:	4b0c      	ldr	r3, [pc, #48]	; (ef8 <FLASH_PageProgram+0x6e>)
     ec8:	705a      	strb	r2, [r3, #1]
    spi_ProgramBuff[2]  =  addr>>8&0xff;
     eca:	68fb      	ldr	r3, [r7, #12]
     ecc:	0a1b      	lsrs	r3, r3, #8
     ece:	b2da      	uxtb	r2, r3
     ed0:	4b09      	ldr	r3, [pc, #36]	; (ef8 <FLASH_PageProgram+0x6e>)
     ed2:	709a      	strb	r2, [r3, #2]
    spi_ProgramBuff[3]  =  addr&0xff;
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	b2da      	uxtb	r2, r3
     ed8:	4b07      	ldr	r3, [pc, #28]	; (ef8 <FLASH_PageProgram+0x6e>)
     eda:	70da      	strb	r2, [r3, #3]
    SPI_FlashCommand(FLASH_PAGE_PROGRAM,spi_ProgramBuff,len+4,NULL,0);
     edc:	88fb      	ldrh	r3, [r7, #6]
     ede:	3304      	adds	r3, #4
     ee0:	b29a      	uxth	r2, r3
     ee2:	2300      	movs	r3, #0
     ee4:	9300      	str	r3, [sp, #0]
     ee6:	2300      	movs	r3, #0
     ee8:	4903      	ldr	r1, [pc, #12]	; (ef8 <FLASH_PageProgram+0x6e>)
     eea:	2002      	movs	r0, #2
     eec:	f7ff fe1e 	bl	b2c <SPI_FlashCommand>
}
     ef0:	bf00      	nop
     ef2:	3718      	adds	r7, #24
     ef4:	46bd      	mov	sp, r7
     ef6:	bd80      	pop	{r7, pc}
     ef8:	200081f0 	.word	0x200081f0

00000efc <FLASH_ReadManufDeviceId>:
  * @brief  The RDID instruction is for reading the manufacturer ID of 1-byte and
  *  followed by Device ID of 1-byte. 
  * @retval manufacturer ID[15:8]/Device ID[7:0]
  */
uint16_t FLASH_ReadManufDeviceId(void) /*must len = 2 */
{
     efc:	b580      	push	{r7, lr}
     efe:	b084      	sub	sp, #16
     f00:	af02      	add	r7, sp, #8
    uint8_t tx_buff[4];
    uint8_t id_buff[2]; 
    tx_buff[0] = FLASH_READ_MANUFACTURER_OR_DEVICE_ID;
     f02:	2390      	movs	r3, #144	; 0x90
     f04:	713b      	strb	r3, [r7, #4]
    tx_buff[1] = 0;
     f06:	2300      	movs	r3, #0
     f08:	717b      	strb	r3, [r7, #5]
    tx_buff[2] = 0;
     f0a:	2300      	movs	r3, #0
     f0c:	71bb      	strb	r3, [r7, #6]
    tx_buff[3] = 0;
     f0e:	2300      	movs	r3, #0
     f10:	71fb      	strb	r3, [r7, #7]
    SPI_FlashCommand(FLASH_READ_MANUFACTURER_OR_DEVICE_ID,tx_buff,4,id_buff,2);
     f12:	463a      	mov	r2, r7
     f14:	1d39      	adds	r1, r7, #4
     f16:	2302      	movs	r3, #2
     f18:	9300      	str	r3, [sp, #0]
     f1a:	4613      	mov	r3, r2
     f1c:	2204      	movs	r2, #4
     f1e:	2090      	movs	r0, #144	; 0x90
     f20:	f7ff fe04 	bl	b2c <SPI_FlashCommand>

    return (uint16_t)(id_buff[1]|(id_buff[0]<<8));
     f24:	787b      	ldrb	r3, [r7, #1]
     f26:	b21a      	sxth	r2, r3
     f28:	783b      	ldrb	r3, [r7, #0]
     f2a:	021b      	lsls	r3, r3, #8
     f2c:	b21b      	sxth	r3, r3
     f2e:	4313      	orrs	r3, r2
     f30:	b21b      	sxth	r3, r3
     f32:	b29b      	uxth	r3, r3
}
     f34:	4618      	mov	r0, r3
     f36:	3708      	adds	r7, #8
     f38:	46bd      	mov	sp, r7
     f3a:	bd80      	pop	{r7, pc}

00000f3c <FLASH_EnableEQI>:
  * bit in the status that allows Quad SPI and QPI operation . 
  * @param status: 1: Enable/ 0:Disable EQ Mode
  * @retval None
  */
void  FLASH_EnableEQI(bool status)
{
     f3c:	b580      	push	{r7, lr}
     f3e:	b084      	sub	sp, #16
     f40:	af00      	add	r7, sp, #0
     f42:	4603      	mov	r3, r0
     f44:	71fb      	strb	r3, [r7, #7]
    uint8_t config_data2 = 0;
     f46:	2300      	movs	r3, #0
     f48:	73fb      	strb	r3, [r7, #15]
    uint8_t config_data1 = 0;
     f4a:	2300      	movs	r3, #0
     f4c:	73bb      	strb	r3, [r7, #14]
    
    FLASH_ReadStatusReg2(&config_data2);
     f4e:	f107 030f 	add.w	r3, r7, #15
     f52:	4618      	mov	r0, r3
     f54:	f7ff feb7 	bl	cc6 <FLASH_ReadStatusReg2>

    if((status && (config_data2>>1)&0x01)||
     f58:	79fb      	ldrb	r3, [r7, #7]
     f5a:	2b00      	cmp	r3, #0
     f5c:	d006      	beq.n	f6c <FLASH_EnableEQI+0x30>
     f5e:	7bfb      	ldrb	r3, [r7, #15]
     f60:	085b      	lsrs	r3, r3, #1
     f62:	b2db      	uxtb	r3, r3
     f64:	f003 0301 	and.w	r3, r3, #1
     f68:	2b00      	cmp	r3, #0
     f6a:	d129      	bne.n	fc0 <FLASH_EnableEQI+0x84>
        (status == false && ((config_data2>>1)&0x01)== 0))
     f6c:	79fb      	ldrb	r3, [r7, #7]
     f6e:	f083 0301 	eor.w	r3, r3, #1
     f72:	b2db      	uxtb	r3, r3
    if((status && (config_data2>>1)&0x01)||
     f74:	2b00      	cmp	r3, #0
     f76:	d006      	beq.n	f86 <FLASH_EnableEQI+0x4a>
        (status == false && ((config_data2>>1)&0x01)== 0))
     f78:	7bfb      	ldrb	r3, [r7, #15]
     f7a:	085b      	lsrs	r3, r3, #1
     f7c:	b2db      	uxtb	r3, r3
     f7e:	f003 0301 	and.w	r3, r3, #1
     f82:	2b00      	cmp	r3, #0
     f84:	d01c      	beq.n	fc0 <FLASH_EnableEQI+0x84>
        return;    
    
    if(status)
     f86:	79fb      	ldrb	r3, [r7, #7]
     f88:	2b00      	cmp	r3, #0
     f8a:	d005      	beq.n	f98 <FLASH_EnableEQI+0x5c>
        config_data2 = config_data2|0x02;
     f8c:	7bfb      	ldrb	r3, [r7, #15]
     f8e:	f043 0302 	orr.w	r3, r3, #2
     f92:	b2db      	uxtb	r3, r3
     f94:	73fb      	strb	r3, [r7, #15]
     f96:	e004      	b.n	fa2 <FLASH_EnableEQI+0x66>
    else 
        config_data2 = config_data2 &(~0x02);
     f98:	7bfb      	ldrb	r3, [r7, #15]
     f9a:	f023 0302 	bic.w	r3, r3, #2
     f9e:	b2db      	uxtb	r3, r3
     fa0:	73fb      	strb	r3, [r7, #15]
    
    FLASH_WriteEnable();
     fa2:	f7ff fde9 	bl	b78 <FLASH_WriteEnable>
    FLASH_WaitBusy();
     fa6:	f7ff fe2d 	bl	c04 <FLASH_WaitBusy>
    FLASH_WriteStatusReg(&config_data1,&config_data2);
     faa:	f107 020f 	add.w	r2, r7, #15
     fae:	f107 030e 	add.w	r3, r7, #14
     fb2:	4611      	mov	r1, r2
     fb4:	4618      	mov	r0, r3
     fb6:	f7ff fe58 	bl	c6a <FLASH_WriteStatusReg>
    FLASH_WaitBusy();
     fba:	f7ff fe23 	bl	c04 <FLASH_WaitBusy>
     fbe:	e000      	b.n	fc2 <FLASH_EnableEQI+0x86>
        return;    
     fc0:	bf00      	nop
}
     fc2:	3710      	adds	r7, #16
     fc4:	46bd      	mov	sp, r7
     fc6:	bd80      	pop	{r7, pc}

00000fc8 <SSI_GetCrotrolParams>:
#include "BR00x_ssi_common.h"


//* SSI control Param*//
static uint32_t SSI_GetCrotrolParams(SSI_TypeDef   *SSIx , SSI_InitInof_Type *SSI_InitStru)
{
     fc8:	b480      	push	{r7}
     fca:	b083      	sub	sp, #12
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	6039      	str	r1, [r7, #0]
    return  ((SSI_InitStru->spi_frame_format<< SSI_CTRLR0_SPI_FRF_POS)|\
     fd2:	683b      	ldr	r3, [r7, #0]
     fd4:	7c5b      	ldrb	r3, [r3, #17]
     fd6:	055a      	lsls	r2, r3, #21
                ( SSI_InitStru->frame_format_size_32<< SSI_CTRLR0_DFS_32_POS)|\
     fd8:	683b      	ldr	r3, [r7, #0]
     fda:	7c1b      	ldrb	r3, [r3, #16]
     fdc:	041b      	lsls	r3, r3, #16
    return  ((SSI_InitStru->spi_frame_format<< SSI_CTRLR0_SPI_FRF_POS)|\
     fde:	4313      	orrs	r3, r2
                ( SSI_InitStru->frame_format_size_16<< SSI_CTRLR0_DFS_POS)|\
     fe0:	683a      	ldr	r2, [r7, #0]
     fe2:	7bd2      	ldrb	r2, [r2, #15]
                ( SSI_InitStru->frame_format_size_32<< SSI_CTRLR0_DFS_32_POS)|\
     fe4:	431a      	orrs	r2, r3
                ( SSI_InitStru->control_farme_size<< SSI_CTRLR0_CFS_POS)|\
     fe6:	683b      	ldr	r3, [r7, #0]
     fe8:	7b9b      	ldrb	r3, [r3, #14]
     fea:	031b      	lsls	r3, r3, #12
                ( SSI_InitStru->frame_format_size_16<< SSI_CTRLR0_DFS_POS)|\
     fec:	431a      	orrs	r2, r3
                ( SSI_InitStru->operation_mode<< SSI_CTRLR0_SRL_POS)|\
     fee:	683b      	ldr	r3, [r7, #0]
     ff0:	7b5b      	ldrb	r3, [r3, #13]
     ff2:	02db      	lsls	r3, r3, #11
                ( SSI_InitStru->control_farme_size<< SSI_CTRLR0_CFS_POS)|\
     ff4:	431a      	orrs	r2, r3
                ( SSI_InitStru->slave_output_enable<< SSI_CTRLR0_SLV_OE_POS)|\
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	7b1b      	ldrb	r3, [r3, #12]
     ffa:	029b      	lsls	r3, r3, #10
                ( SSI_InitStru->operation_mode<< SSI_CTRLR0_SRL_POS)|\
     ffc:	431a      	orrs	r2, r3
                ( SSI_InitStru->transfer_mode<< SSI_CTRLR0_TMOD_POS)|\
     ffe:	683b      	ldr	r3, [r7, #0]
    1000:	7adb      	ldrb	r3, [r3, #11]
    1002:	021b      	lsls	r3, r3, #8
                ( SSI_InitStru->slave_output_enable<< SSI_CTRLR0_SLV_OE_POS)|\
    1004:	431a      	orrs	r2, r3
                ( SSI_InitStru->clock_polarity<< SSI_CTRLR0_SCPOL_POS)|\
    1006:	683b      	ldr	r3, [r7, #0]
    1008:	7a9b      	ldrb	r3, [r3, #10]
    100a:	01db      	lsls	r3, r3, #7
                ( SSI_InitStru->transfer_mode<< SSI_CTRLR0_TMOD_POS)|\
    100c:	431a      	orrs	r2, r3
                ( SSI_InitStru->clock_phase<< SSI_CTRLR0_SCPH_POS)|\
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	7a5b      	ldrb	r3, [r3, #9]
    1012:	019b      	lsls	r3, r3, #6
                ( SSI_InitStru->clock_polarity<< SSI_CTRLR0_SCPOL_POS)|\
    1014:	431a      	orrs	r2, r3
                ( SSI_InitStru->SSI_frame_format<< SSI_CTRLR0_FRF_POS));
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	7a1b      	ldrb	r3, [r3, #8]
    101a:	011b      	lsls	r3, r3, #4
                ( SSI_InitStru->clock_phase<< SSI_CTRLR0_SCPH_POS)|\
    101c:	4313      	orrs	r3, r2
}
    101e:	4618      	mov	r0, r3
    1020:	370c      	adds	r7, #12
    1022:	46bd      	mov	sp, r7
    1024:	bc80      	pop	{r7}
    1026:	4770      	bx	lr

00001028 <SSI_UpdateFrameFormat>:
  * @param frame_format : Select the SSI_SpiFrameFormat_Type you want to set
  *
  * @retval None
  */
bool  SSI_UpdateFrameFormat(SSI_TypeDef   *SSIx,SSI_SpiFrameFormat_Type frame_format)
{
    1028:	b580      	push	{r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
    1030:	460b      	mov	r3, r1
    1032:	70fb      	strb	r3, [r7, #3]
    if(!SSIx)
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	2b00      	cmp	r3, #0
    1038:	d101      	bne.n	103e <SSI_UpdateFrameFormat+0x16>
        return false;
    103a:	2300      	movs	r3, #0
    103c:	e01a      	b.n	1074 <SSI_UpdateFrameFormat+0x4c>
    
    SSIx->SSIENR = DISABLE;
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	2200      	movs	r2, #0
    1042:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    1044:	6878      	ldr	r0, [r7, #4]
    1046:	f000 fbb7 	bl	17b8 <SSI_ClearInterrupt>

    if(frame_format)
    104a:	78fb      	ldrb	r3, [r7, #3]
    104c:	2b00      	cmp	r3, #0
    104e:	d007      	beq.n	1060 <SSI_UpdateFrameFormat+0x38>
        SSIx->CTRLR0|=frame_format<<SSI_CTRLR0_SPI_FRF_POS;
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	681b      	ldr	r3, [r3, #0]
    1054:	78fa      	ldrb	r2, [r7, #3]
    1056:	0552      	lsls	r2, r2, #21
    1058:	431a      	orrs	r2, r3
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	601a      	str	r2, [r3, #0]
    105e:	e005      	b.n	106c <SSI_UpdateFrameFormat+0x44>
    else
        SSIx->CTRLR0 &=SSI_CTRLR0_SPI_FRF_MSK;
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	601a      	str	r2, [r3, #0]
    
   SSIx->SSIENR = ENABLE;
    106c:	687b      	ldr	r3, [r7, #4]
    106e:	2201      	movs	r2, #1
    1070:	609a      	str	r2, [r3, #8]
   
   return true;
    1072:	2301      	movs	r3, #1
}
    1074:	4618      	mov	r0, r3
    1076:	3708      	adds	r7, #8
    1078:	46bd      	mov	sp, r7
    107a:	bd80      	pop	{r7, pc}

0000107c <SSI_UpdataControlParams>:
  *         contains the configuration information for the specified SSI peripheral.
  *
  * @retval None
  */
void SSI_UpdataControlParams(SSI_TypeDef   *SSIx,SSI_InitInof_Type *SSI_InitStru)
{
    107c:	b580      	push	{r7, lr}
    107e:	b082      	sub	sp, #8
    1080:	af00      	add	r7, sp, #0
    1082:	6078      	str	r0, [r7, #4]
    1084:	6039      	str	r1, [r7, #0]
    SSIx->SSIENR = DISABLE;
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	2200      	movs	r2, #0
    108a:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    108c:	6878      	ldr	r0, [r7, #4]
    108e:	f000 fb93 	bl	17b8 <SSI_ClearInterrupt>
    SSIx->CTRLR0 = SSI_GetCrotrolParams(SSIx,SSI_InitStru);
    1092:	6839      	ldr	r1, [r7, #0]
    1094:	6878      	ldr	r0, [r7, #4]
    1096:	f7ff ff97 	bl	fc8 <SSI_GetCrotrolParams>
    109a:	4602      	mov	r2, r0
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	601a      	str	r2, [r3, #0]
    SSIx->SSIENR = ENABLE;
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	2201      	movs	r2, #1
    10a4:	609a      	str	r2, [r3, #8]
}
    10a6:	bf00      	nop
    10a8:	3708      	adds	r7, #8
    10aa:	46bd      	mov	sp, r7
    10ac:	bd80      	pop	{r7, pc}

000010ae <SSI_SetTransferMode>:
  * @param  SSIx: pointer to a SSI.
  * @param tx_mode : Select the mode you want to set
  * @retval None
  */
bool SSI_SetTransferMode(SSI_TypeDef   *SSIx,SSI_TransferMode_Type tx_mode)
{
    10ae:	b580      	push	{r7, lr}
    10b0:	b084      	sub	sp, #16
    10b2:	af00      	add	r7, sp, #0
    10b4:	6078      	str	r0, [r7, #4]
    10b6:	460b      	mov	r3, r1
    10b8:	70fb      	strb	r3, [r7, #3]
    if (!SSIx)
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	2b00      	cmp	r3, #0
    10be:	d101      	bne.n	10c4 <SSI_SetTransferMode+0x16>
        return false;
    10c0:	2300      	movs	r3, #0
    10c2:	e029      	b.n	1118 <SSI_SetTransferMode+0x6a>

    if(((SSIx->CTRLR0 & SSI_CTRLR0_TMOD_MSK) >> \
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	0a1b      	lsrs	r3, r3, #8
    10ca:	f003 0203 	and.w	r2, r3, #3
        SSI_CTRLR0_TMOD_POS )  ==tx_mode)
    10ce:	78fb      	ldrb	r3, [r7, #3]
    if(((SSIx->CTRLR0 & SSI_CTRLR0_TMOD_MSK) >> \
    10d0:	429a      	cmp	r2, r3
    10d2:	d101      	bne.n	10d8 <SSI_SetTransferMode+0x2a>
        return true;
    10d4:	2301      	movs	r3, #1
    10d6:	e01f      	b.n	1118 <SSI_SetTransferMode+0x6a>
    
    SSIx->SSIENR = DISABLE;
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	2200      	movs	r2, #0
    10dc:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    10de:	6878      	ldr	r0, [r7, #4]
    10e0:	f000 fb6a 	bl	17b8 <SSI_ClearInterrupt>
    SSIx->CTRLR0 &= ~SSI_CTRLR0_TMOD_MSK;
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<5;i++);
    10f0:	2300      	movs	r3, #0
    10f2:	73fb      	strb	r3, [r7, #15]
    10f4:	e002      	b.n	10fc <SSI_SetTransferMode+0x4e>
    10f6:	7bfb      	ldrb	r3, [r7, #15]
    10f8:	3301      	adds	r3, #1
    10fa:	73fb      	strb	r3, [r7, #15]
    10fc:	7bfb      	ldrb	r3, [r7, #15]
    10fe:	2b04      	cmp	r3, #4
    1100:	d9f9      	bls.n	10f6 <SSI_SetTransferMode+0x48>
    
    SSIx->CTRLR0 |=tx_mode<<SSI_CTRLR0_TMOD_POS;
    1102:	687b      	ldr	r3, [r7, #4]
    1104:	681b      	ldr	r3, [r3, #0]
    1106:	78fa      	ldrb	r2, [r7, #3]
    1108:	0212      	lsls	r2, r2, #8
    110a:	431a      	orrs	r2, r3
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	601a      	str	r2, [r3, #0]

   SSIx->SSIENR = ENABLE;      
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	2201      	movs	r2, #1
    1114:	609a      	str	r2, [r3, #8]
   return true;
    1116:	2301      	movs	r3, #1
}
    1118:	4618      	mov	r0, r3
    111a:	3710      	adds	r7, #16
    111c:	46bd      	mov	sp, r7
    111e:	bd80      	pop	{r7, pc}

00001120 <SSI_Init>:
  * @param  SSI_InitStru: pointer to a SSI_InitInfo_Type structure that
  *         contains the configuration information for the specified SSI peripheral.
  * @retval None
  */
void SSI_Init(SSI_TypeDef   *SSIx,SSI_InitInof_Type *SSI_InitStru)
{
    1120:	b580      	push	{r7, lr}
    1122:	b082      	sub	sp, #8
    1124:	af00      	add	r7, sp, #0
    1126:	6078      	str	r0, [r7, #4]
    1128:	6039      	str	r1, [r7, #0]
    //clear all interrupter 
    SSIx->SSIENR = DISABLE;
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	2200      	movs	r2, #0
    112e:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    1130:	6878      	ldr	r0, [r7, #4]
    1132:	f000 fb41 	bl	17b8 <SSI_ClearInterrupt>
    SSIx->IMR = DISABLE;
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	2200      	movs	r2, #0
    113a:	62da      	str	r2, [r3, #44]	; 0x2c
    //NVIC_ClearPendingIRQ(SSI_InitStru->irqn);
    //NVIC_EnableIRQ(SSI_InitStru->irqn);

    SSIx->CTRLR0    = SSI_GetCrotrolParams(SSIx,SSI_InitStru);                               
    113c:	6839      	ldr	r1, [r7, #0]
    113e:	6878      	ldr	r0, [r7, #4]
    1140:	f7ff ff42 	bl	fc8 <SSI_GetCrotrolParams>
    1144:	4602      	mov	r2, r0
    1146:	687b      	ldr	r3, [r7, #4]
    1148:	601a      	str	r2, [r3, #0]
    SSIx->CTRLR1    = SSI_InitStru->data_frame_num<<SSI_CTRLR1_NDF_POS;
    114a:	683b      	ldr	r3, [r7, #0]
    114c:	685a      	ldr	r2, [r3, #4]
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	605a      	str	r2, [r3, #4]
    SSIx->BAUDR     = SSI_InitStru->clock_divider;
    1152:	683b      	ldr	r3, [r7, #0]
    1154:	881b      	ldrh	r3, [r3, #0]
    1156:	461a      	mov	r2, r3
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	615a      	str	r2, [r3, #20]
    SSIx->IMR       = SSI_InitStru->unmask_interrupt;
    115c:	683b      	ldr	r3, [r7, #0]
    115e:	695a      	ldr	r2, [r3, #20]
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	62da      	str	r2, [r3, #44]	; 0x2c

     if(SSI_InitStru->dma_rx_en)
    1164:	683b      	ldr	r3, [r7, #0]
    1166:	7c9b      	ldrb	r3, [r3, #18]
    1168:	2b00      	cmp	r3, #0
    116a:	d006      	beq.n	117a <SSI_Init+0x5a>
        SSIx->DMACR |=0x01;
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1170:	f043 0201 	orr.w	r2, r3, #1
    1174:	687b      	ldr	r3, [r7, #4]
    1176:	64da      	str	r2, [r3, #76]	; 0x4c
    1178:	e005      	b.n	1186 <SSI_Init+0x66>
    else
        SSIx->DMACR &=~0x01;
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    117e:	f023 0201 	bic.w	r2, r3, #1
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(SSI_InitStru->dma_tx_en)
    1186:	683b      	ldr	r3, [r7, #0]
    1188:	7cdb      	ldrb	r3, [r3, #19]
    118a:	2b00      	cmp	r3, #0
    118c:	d006      	beq.n	119c <SSI_Init+0x7c>
        SSIx->DMACR |=0x02;
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1192:	f043 0202 	orr.w	r2, r3, #2
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	64da      	str	r2, [r3, #76]	; 0x4c
    119a:	e005      	b.n	11a8 <SSI_Init+0x88>
    else
        SSIx->DMACR &=~0x02;
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    11a0:	f023 0202 	bic.w	r2, r3, #2
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    SSIx->RXFTLR    = SSI_InitStru->rx_fifo_threshold_level;
    11a8:	683b      	ldr	r3, [r7, #0]
    11aa:	6a1a      	ldr	r2, [r3, #32]
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	61da      	str	r2, [r3, #28]
    SSIx->TXFTLR    = (SSI_InitStru->tx_fifo_start_fifo_level<<15 | SSI_InitStru->tx_fifo_threshold_level);
    11b0:	683b      	ldr	r3, [r7, #0]
    11b2:	69db      	ldr	r3, [r3, #28]
    11b4:	03da      	lsls	r2, r3, #15
    11b6:	683b      	ldr	r3, [r7, #0]
    11b8:	699b      	ldr	r3, [r3, #24]
    11ba:	431a      	orrs	r2, r3
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	619a      	str	r2, [r3, #24]

    SSIx->DMARDLR = SSI_InitStru->dma_rx_data_level;
    11c0:	683b      	ldr	r3, [r7, #0]
    11c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    11c4:	687b      	ldr	r3, [r7, #4]
    11c6:	655a      	str	r2, [r3, #84]	; 0x54
    SSIx->DMATDLR = SSI_InitStru->dma_tx_data_level;
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	651a      	str	r2, [r3, #80]	; 0x50
        
    SSIx->SER       = 0X0001;
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	2201      	movs	r2, #1
    11d4:	611a      	str	r2, [r3, #16]
    SSIx->SSIENR    = ENABLE;
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	2201      	movs	r2, #1
    11da:	609a      	str	r2, [r3, #8]
    
}
    11dc:	bf00      	nop
    11de:	3708      	adds	r7, #8
    11e0:	46bd      	mov	sp, r7
    11e2:	bd80      	pop	{r7, pc}

000011e4 <SSI_SendData>:

#define MAX_SPIM0_FIFO_DEP   32
#define MAX_SPIM1_FIFO_DEP   8

bool SSI_SendData(SSI_TypeDef   *SSIx,uint8_t *data,uint16_t len)
{
    11e4:	b480      	push	{r7}
    11e6:	b087      	sub	sp, #28
    11e8:	af00      	add	r7, sp, #0
    11ea:	60f8      	str	r0, [r7, #12]
    11ec:	60b9      	str	r1, [r7, #8]
    11ee:	4613      	mov	r3, r2
    11f0:	80fb      	strh	r3, [r7, #6]
    uint16_t i=0;
    11f2:	2300      	movs	r3, #0
    11f4:	82fb      	strh	r3, [r7, #22]
    for(i=0;i<len;i++)
    11f6:	2300      	movs	r3, #0
    11f8:	82fb      	strh	r3, [r7, #22]
    11fa:	e00c      	b.n	1216 <SSI_SendData+0x32>
        SSIx->DR[i] = data[i];
    11fc:	8afb      	ldrh	r3, [r7, #22]
    11fe:	68ba      	ldr	r2, [r7, #8]
    1200:	4413      	add	r3, r2
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	8afa      	ldrh	r2, [r7, #22]
    1206:	4619      	mov	r1, r3
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	3218      	adds	r2, #24
    120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i=0;i<len;i++)
    1210:	8afb      	ldrh	r3, [r7, #22]
    1212:	3301      	adds	r3, #1
    1214:	82fb      	strh	r3, [r7, #22]
    1216:	8afa      	ldrh	r2, [r7, #22]
    1218:	88fb      	ldrh	r3, [r7, #6]
    121a:	429a      	cmp	r2, r3
    121c:	d3ee      	bcc.n	11fc <SSI_SendData+0x18>
    return true;
    121e:	2301      	movs	r3, #1
}
    1220:	4618      	mov	r0, r3
    1222:	371c      	adds	r7, #28
    1224:	46bd      	mov	sp, r7
    1226:	bc80      	pop	{r7}
    1228:	4770      	bx	lr

0000122a <SSI_ReadData>:

bool SSI_ReadData(SSI_TypeDef   *SSIx,uint8_t *data,uint16_t len)
{
    122a:	b480      	push	{r7}
    122c:	b087      	sub	sp, #28
    122e:	af00      	add	r7, sp, #0
    1230:	60f8      	str	r0, [r7, #12]
    1232:	60b9      	str	r1, [r7, #8]
    1234:	4613      	mov	r3, r2
    1236:	80fb      	strh	r3, [r7, #6]
    uint16_t i=0;
    1238:	2300      	movs	r3, #0
    123a:	82fb      	strh	r3, [r7, #22]
    for(i=0;i<len;i++)
    123c:	2300      	movs	r3, #0
    123e:	82fb      	strh	r3, [r7, #22]
    1240:	e00c      	b.n	125c <SSI_ReadData+0x32>
         data[i]= SSIx->DR[i];
    1242:	8afa      	ldrh	r2, [r7, #22]
    1244:	68fb      	ldr	r3, [r7, #12]
    1246:	3218      	adds	r2, #24
    1248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    124c:	8afb      	ldrh	r3, [r7, #22]
    124e:	68ba      	ldr	r2, [r7, #8]
    1250:	4413      	add	r3, r2
    1252:	b2ca      	uxtb	r2, r1
    1254:	701a      	strb	r2, [r3, #0]
    for(i=0;i<len;i++)
    1256:	8afb      	ldrh	r3, [r7, #22]
    1258:	3301      	adds	r3, #1
    125a:	82fb      	strh	r3, [r7, #22]
    125c:	8afa      	ldrh	r2, [r7, #22]
    125e:	88fb      	ldrh	r3, [r7, #6]
    1260:	429a      	cmp	r2, r3
    1262:	d3ee      	bcc.n	1242 <SSI_ReadData+0x18>
    return true;
    1264:	2301      	movs	r3, #1
}
    1266:	4618      	mov	r0, r3
    1268:	371c      	adds	r7, #28
    126a:	46bd      	mov	sp, r7
    126c:	bc80      	pop	{r7}
    126e:	4770      	bx	lr

00001270 <SSI_SendData32>:

bool SSI_SendData32(SSI_TypeDef   *SSIx,uint32_t *data,uint16_t len)
{
    1270:	b480      	push	{r7}
    1272:	b087      	sub	sp, #28
    1274:	af00      	add	r7, sp, #0
    1276:	60f8      	str	r0, [r7, #12]
    1278:	60b9      	str	r1, [r7, #8]
    127a:	4613      	mov	r3, r2
    127c:	80fb      	strh	r3, [r7, #6]
    uint32_t i=0;
    127e:	2300      	movs	r3, #0
    1280:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
    1282:	2300      	movs	r3, #0
    1284:	617b      	str	r3, [r7, #20]
    1286:	e00c      	b.n	12a2 <SSI_SendData32+0x32>
        SSIx->DR[i] = data[i];
    1288:	697b      	ldr	r3, [r7, #20]
    128a:	009b      	lsls	r3, r3, #2
    128c:	68ba      	ldr	r2, [r7, #8]
    128e:	4413      	add	r3, r2
    1290:	6819      	ldr	r1, [r3, #0]
    1292:	68fb      	ldr	r3, [r7, #12]
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	3218      	adds	r2, #24
    1298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i=0;i<len;i++)
    129c:	697b      	ldr	r3, [r7, #20]
    129e:	3301      	adds	r3, #1
    12a0:	617b      	str	r3, [r7, #20]
    12a2:	88fb      	ldrh	r3, [r7, #6]
    12a4:	697a      	ldr	r2, [r7, #20]
    12a6:	429a      	cmp	r2, r3
    12a8:	d3ee      	bcc.n	1288 <SSI_SendData32+0x18>
    return true;
    12aa:	2301      	movs	r3, #1
}
    12ac:	4618      	mov	r0, r3
    12ae:	371c      	adds	r7, #28
    12b0:	46bd      	mov	sp, r7
    12b2:	bc80      	pop	{r7}
    12b4:	4770      	bx	lr

000012b6 <SSI_ReadData32>:

bool SSI_ReadData32(SSI_TypeDef   *SSIx,uint32_t *data,uint16_t len)
{
    12b6:	b480      	push	{r7}
    12b8:	b087      	sub	sp, #28
    12ba:	af00      	add	r7, sp, #0
    12bc:	60f8      	str	r0, [r7, #12]
    12be:	60b9      	str	r1, [r7, #8]
    12c0:	4613      	mov	r3, r2
    12c2:	80fb      	strh	r3, [r7, #6]
    uint32_t i=0;
    12c4:	2300      	movs	r3, #0
    12c6:	617b      	str	r3, [r7, #20]
    for(i=0;i<len;i++)
    12c8:	2300      	movs	r3, #0
    12ca:	617b      	str	r3, [r7, #20]
    12cc:	e00c      	b.n	12e8 <SSI_ReadData32+0x32>
         data[i]= SSIx->DR[i];
    12ce:	697b      	ldr	r3, [r7, #20]
    12d0:	009b      	lsls	r3, r3, #2
    12d2:	68ba      	ldr	r2, [r7, #8]
    12d4:	4413      	add	r3, r2
    12d6:	68fa      	ldr	r2, [r7, #12]
    12d8:	6979      	ldr	r1, [r7, #20]
    12da:	3118      	adds	r1, #24
    12dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    12e0:	601a      	str	r2, [r3, #0]
    for(i=0;i<len;i++)
    12e2:	697b      	ldr	r3, [r7, #20]
    12e4:	3301      	adds	r3, #1
    12e6:	617b      	str	r3, [r7, #20]
    12e8:	88fb      	ldrh	r3, [r7, #6]
    12ea:	697a      	ldr	r2, [r7, #20]
    12ec:	429a      	cmp	r2, r3
    12ee:	d3ee      	bcc.n	12ce <SSI_ReadData32+0x18>
    return true;
    12f0:	2301      	movs	r3, #1
}
    12f2:	4618      	mov	r0, r3
    12f4:	371c      	adds	r7, #28
    12f6:	46bd      	mov	sp, r7
    12f8:	bc80      	pop	{r7}
    12fa:	4770      	bx	lr

000012fc <SSI_Send>:
  * @param  data: The data pointer will be write to the SSI fifo or data register.
  * @param  len: The data length.
  * @retval  true(succeed)/false(defeated)
  */
bool SSI_Send(SSI_TypeDef   *SSIx,uint8_t *data,uint16_t len)
{
    12fc:	b580      	push	{r7, lr}
    12fe:	b086      	sub	sp, #24
    1300:	af00      	add	r7, sp, #0
    1302:	60f8      	str	r0, [r7, #12]
    1304:	60b9      	str	r1, [r7, #8]
    1306:	4613      	mov	r3, r2
    1308:	80fb      	strh	r3, [r7, #6]
    uint16_t  idx = 0;
    130a:	2300      	movs	r3, #0
    130c:	82fb      	strh	r3, [r7, #22]
    uint8_t fifo_depth = IS_SPIM0(SSIx) ? MAX_SPIM0_FIFO_DEP : MAX_SPIM1_FIFO_DEP;
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    1314:	d101      	bne.n	131a <SSI_Send+0x1e>
    1316:	2320      	movs	r3, #32
    1318:	e000      	b.n	131c <SSI_Send+0x20>
    131a:	2308      	movs	r3, #8
    131c:	757b      	strb	r3, [r7, #21]
    
    if(!data)
    131e:	68bb      	ldr	r3, [r7, #8]
    1320:	2b00      	cmp	r3, #0
    1322:	d11c      	bne.n	135e <SSI_Send+0x62>
        return false;
    1324:	2300      	movs	r3, #0
    1326:	e030      	b.n	138a <SSI_Send+0x8e>
    
    while(len>fifo_depth)
    {
        SSI_SendData(SSIx,&data[idx],fifo_depth);
    1328:	8afb      	ldrh	r3, [r7, #22]
    132a:	68ba      	ldr	r2, [r7, #8]
    132c:	4413      	add	r3, r2
    132e:	7d7a      	ldrb	r2, [r7, #21]
    1330:	b292      	uxth	r2, r2
    1332:	4619      	mov	r1, r3
    1334:	68f8      	ldr	r0, [r7, #12]
    1336:	f7ff ff55 	bl	11e4 <SSI_SendData>
        while(!(SSIx->SR >>SSI_tx_fifo_empty &0x01));
    133a:	bf00      	nop
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1340:	089b      	lsrs	r3, r3, #2
    1342:	f003 0301 	and.w	r3, r3, #1
    1346:	2b00      	cmp	r3, #0
    1348:	d0f8      	beq.n	133c <SSI_Send+0x40>
        len -=fifo_depth;
    134a:	7d7b      	ldrb	r3, [r7, #21]
    134c:	b29b      	uxth	r3, r3
    134e:	88fa      	ldrh	r2, [r7, #6]
    1350:	1ad3      	subs	r3, r2, r3
    1352:	80fb      	strh	r3, [r7, #6]
        idx+=fifo_depth;
    1354:	7d7b      	ldrb	r3, [r7, #21]
    1356:	b29a      	uxth	r2, r3
    1358:	8afb      	ldrh	r3, [r7, #22]
    135a:	4413      	add	r3, r2
    135c:	82fb      	strh	r3, [r7, #22]
    while(len>fifo_depth)
    135e:	7d7b      	ldrb	r3, [r7, #21]
    1360:	b29b      	uxth	r3, r3
    1362:	88fa      	ldrh	r2, [r7, #6]
    1364:	429a      	cmp	r2, r3
    1366:	d8df      	bhi.n	1328 <SSI_Send+0x2c>
    }
    SSI_SendData(SSIx,&data[idx],len);
    1368:	8afb      	ldrh	r3, [r7, #22]
    136a:	68ba      	ldr	r2, [r7, #8]
    136c:	4413      	add	r3, r2
    136e:	88fa      	ldrh	r2, [r7, #6]
    1370:	4619      	mov	r1, r3
    1372:	68f8      	ldr	r0, [r7, #12]
    1374:	f7ff ff36 	bl	11e4 <SSI_SendData>
    while(!(SSIx->SR >>SSI_tx_fifo_empty &0x01));
    1378:	bf00      	nop
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    137e:	089b      	lsrs	r3, r3, #2
    1380:	f003 0301 	and.w	r3, r3, #1
    1384:	2b00      	cmp	r3, #0
    1386:	d0f8      	beq.n	137a <SSI_Send+0x7e>
    return true;
    1388:	2301      	movs	r3, #1
        
}
    138a:	4618      	mov	r0, r3
    138c:	3718      	adds	r7, #24
    138e:	46bd      	mov	sp, r7
    1390:	bd80      	pop	{r7, pc}

00001392 <SSI_Receive>:
  * @param  len: The data length.
  * @retval  true(succeed)/false(defeated)
  */

bool SSI_Receive(SSI_TypeDef   *SSIx,bool trigger ,uint8_t *data,uint16_t len)
{
    1392:	b580      	push	{r7, lr}
    1394:	b086      	sub	sp, #24
    1396:	af00      	add	r7, sp, #0
    1398:	60f8      	str	r0, [r7, #12]
    139a:	607a      	str	r2, [r7, #4]
    139c:	461a      	mov	r2, r3
    139e:	460b      	mov	r3, r1
    13a0:	72fb      	strb	r3, [r7, #11]
    13a2:	4613      	mov	r3, r2
    13a4:	813b      	strh	r3, [r7, #8]
    uint16_t  idx = 0,rxed_num;
    13a6:	2300      	movs	r3, #0
    13a8:	82fb      	strh	r3, [r7, #22]
    int16_t data_len = len;
    13aa:	893b      	ldrh	r3, [r7, #8]
    13ac:	82bb      	strh	r3, [r7, #20]
    data[0] = 0;
    13ae:	687b      	ldr	r3, [r7, #4]
    13b0:	2200      	movs	r2, #0
    13b2:	701a      	strb	r2, [r3, #0]

    if(!data)
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d125      	bne.n	1406 <SSI_Receive+0x74>
        return false;
    13ba:	2300      	movs	r3, #0
    13bc:	e028      	b.n	1410 <SSI_Receive+0x7e>
    
    while (data_len >0)
    {
        if(trigger)
    13be:	7afb      	ldrb	r3, [r7, #11]
    13c0:	2b00      	cmp	r3, #0
    13c2:	d004      	beq.n	13ce <SSI_Receive+0x3c>
            SSI_SendData(SSIx,data,1);
    13c4:	2201      	movs	r2, #1
    13c6:	6879      	ldr	r1, [r7, #4]
    13c8:	68f8      	ldr	r0, [r7, #12]
    13ca:	f7ff ff0b 	bl	11e4 <SSI_SendData>
        
        while(!(SSIx->SR >>SSI_rx_fifo_not_empty & 0x01));
    13ce:	bf00      	nop
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13d4:	08db      	lsrs	r3, r3, #3
    13d6:	f003 0301 	and.w	r3, r3, #1
    13da:	2b00      	cmp	r3, #0
    13dc:	d0f8      	beq.n	13d0 <SSI_Receive+0x3e>
        rxed_num = SSI_RX_FIFO_LEVEL(SSIx);
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13e2:	827b      	strh	r3, [r7, #18]
        SSI_ReadData(SSIx,&data[idx],rxed_num);
    13e4:	8afb      	ldrh	r3, [r7, #22]
    13e6:	687a      	ldr	r2, [r7, #4]
    13e8:	4413      	add	r3, r2
    13ea:	8a7a      	ldrh	r2, [r7, #18]
    13ec:	4619      	mov	r1, r3
    13ee:	68f8      	ldr	r0, [r7, #12]
    13f0:	f7ff ff1b 	bl	122a <SSI_ReadData>
        idx      += rxed_num;   
    13f4:	8afa      	ldrh	r2, [r7, #22]
    13f6:	8a7b      	ldrh	r3, [r7, #18]
    13f8:	4413      	add	r3, r2
    13fa:	82fb      	strh	r3, [r7, #22]
        data_len -= rxed_num;
    13fc:	8aba      	ldrh	r2, [r7, #20]
    13fe:	8a7b      	ldrh	r3, [r7, #18]
    1400:	1ad3      	subs	r3, r2, r3
    1402:	b29b      	uxth	r3, r3
    1404:	82bb      	strh	r3, [r7, #20]
    while (data_len >0)
    1406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    140a:	2b00      	cmp	r3, #0
    140c:	dcd7      	bgt.n	13be <SSI_Receive+0x2c>
    }
    
    return true;
    140e:	2301      	movs	r3, #1
}
    1410:	4618      	mov	r0, r3
    1412:	3718      	adds	r7, #24
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}

00001418 <SSI_Dirtransfer>:


bool SSI_Dirtransfer(SSI_TypeDef   *SSIx,uint8_t *tx,uint16_t tlen,uint8_t *rx,uint16_t rlen)
{
    1418:	b580      	push	{r7, lr}
    141a:	b084      	sub	sp, #16
    141c:	af00      	add	r7, sp, #0
    141e:	60f8      	str	r0, [r7, #12]
    1420:	60b9      	str	r1, [r7, #8]
    1422:	603b      	str	r3, [r7, #0]
    1424:	4613      	mov	r3, r2
    1426:	80fb      	strh	r3, [r7, #6]
     if(!tx || !rx)
    1428:	68bb      	ldr	r3, [r7, #8]
    142a:	2b00      	cmp	r3, #0
    142c:	d002      	beq.n	1434 <SSI_Dirtransfer+0x1c>
    142e:	683b      	ldr	r3, [r7, #0]
    1430:	2b00      	cmp	r3, #0
    1432:	d101      	bne.n	1438 <SSI_Dirtransfer+0x20>
        return false;
    1434:	2300      	movs	r3, #0
    1436:	e00c      	b.n	1452 <SSI_Dirtransfer+0x3a>
     
     SSI_Send(SSIx,tx,tlen);
    1438:	88fb      	ldrh	r3, [r7, #6]
    143a:	461a      	mov	r2, r3
    143c:	68b9      	ldr	r1, [r7, #8]
    143e:	68f8      	ldr	r0, [r7, #12]
    1440:	f7ff ff5c 	bl	12fc <SSI_Send>
     SSI_Receive(SSIx,false,rx,rlen);
    1444:	8b3b      	ldrh	r3, [r7, #24]
    1446:	683a      	ldr	r2, [r7, #0]
    1448:	2100      	movs	r1, #0
    144a:	68f8      	ldr	r0, [r7, #12]
    144c:	f7ff ffa1 	bl	1392 <SSI_Receive>

     return true;
    1450:	2301      	movs	r3, #1
}
    1452:	4618      	mov	r0, r3
    1454:	3710      	adds	r7, #16
    1456:	46bd      	mov	sp, r7
    1458:	bd80      	pop	{r7, pc}

0000145a <SSI_Transfer>:



bool SSI_Transfer(SSI_TypeDef   *SSIx,uint8_t *tx,uint16_t tlen,uint8_t *rx,uint16_t rlen)
{
    145a:	b580      	push	{r7, lr}
    145c:	b088      	sub	sp, #32
    145e:	af02      	add	r7, sp, #8
    1460:	60f8      	str	r0, [r7, #12]
    1462:	60b9      	str	r1, [r7, #8]
    1464:	603b      	str	r3, [r7, #0]
    1466:	4613      	mov	r3, r2
    1468:	80fb      	strh	r3, [r7, #6]
      uint16_t receive_num;
      uint16_t transmit_num;
      uint8_t fifo_depth = IS_SPIM0(SSIx) ? MAX_SPIM0_FIFO_DEP : MAX_SPIM1_FIFO_DEP;
    146a:	68fb      	ldr	r3, [r7, #12]
    146c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    1470:	d101      	bne.n	1476 <SSI_Transfer+0x1c>
    1472:	2320      	movs	r3, #32
    1474:	e000      	b.n	1478 <SSI_Transfer+0x1e>
    1476:	2308      	movs	r3, #8
    1478:	75fb      	strb	r3, [r7, #23]
      
     if((!SSIx) ||(!tx && !rx)||(tlen==0 && rlen ==0))
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	2b00      	cmp	r3, #0
    147e:	d00b      	beq.n	1498 <SSI_Transfer+0x3e>
    1480:	68bb      	ldr	r3, [r7, #8]
    1482:	2b00      	cmp	r3, #0
    1484:	d102      	bne.n	148c <SSI_Transfer+0x32>
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	2b00      	cmp	r3, #0
    148a:	d005      	beq.n	1498 <SSI_Transfer+0x3e>
    148c:	88fb      	ldrh	r3, [r7, #6]
    148e:	2b00      	cmp	r3, #0
    1490:	d104      	bne.n	149c <SSI_Transfer+0x42>
    1492:	8c3b      	ldrh	r3, [r7, #32]
    1494:	2b00      	cmp	r3, #0
    1496:	d101      	bne.n	149c <SSI_Transfer+0x42>
        return false;    
    1498:	2300      	movs	r3, #0
    149a:	e0af      	b.n	15fc <SSI_Transfer+0x1a2>

    if(tx && tlen>0 && rlen ==0)
    149c:	68bb      	ldr	r3, [r7, #8]
    149e:	2b00      	cmp	r3, #0
    14a0:	d01e      	beq.n	14e0 <SSI_Transfer+0x86>
    14a2:	88fb      	ldrh	r3, [r7, #6]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d01b      	beq.n	14e0 <SSI_Transfer+0x86>
    14a8:	8c3b      	ldrh	r3, [r7, #32]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d118      	bne.n	14e0 <SSI_Transfer+0x86>
    {
        if(IS_SPIM0(SSIx))
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    14b4:	d103      	bne.n	14be <SSI_Transfer+0x64>
            SSIC_SetTransferMode(SSI_ONLY_TRANSMIT);
    14b6:	2001      	movs	r0, #1
    14b8:	f000 fada 	bl	1a70 <SSIC_SetTransferMode>
    14bc:	e003      	b.n	14c6 <SSI_Transfer+0x6c>
        else
            SSI_SetTransferMode(SSIx,SSI_ONLY_TRANSMIT);
    14be:	2101      	movs	r1, #1
    14c0:	68f8      	ldr	r0, [r7, #12]
    14c2:	f7ff fdf4 	bl	10ae <SSI_SetTransferMode>
        
        SSI_UpdataReceiveTransmitFifoThreshold(SSIx,0,0);
    14c6:	2200      	movs	r2, #0
    14c8:	2100      	movs	r1, #0
    14ca:	68f8      	ldr	r0, [r7, #12]
    14cc:	f000 f89a 	bl	1604 <SSI_UpdataReceiveTransmitFifoThreshold>
        SSI_Send(SSIx,tx,tlen);     
    14d0:	88fb      	ldrh	r3, [r7, #6]
    14d2:	461a      	mov	r2, r3
    14d4:	68b9      	ldr	r1, [r7, #8]
    14d6:	68f8      	ldr	r0, [r7, #12]
    14d8:	f7ff ff10 	bl	12fc <SSI_Send>
        return true;
    14dc:	2301      	movs	r3, #1
    14de:	e08d      	b.n	15fc <SSI_Transfer+0x1a2>
    }
    if(rx && rlen>0 && tx && tlen==0)
    14e0:	683b      	ldr	r3, [r7, #0]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d038      	beq.n	1558 <SSI_Transfer+0xfe>
    14e6:	8c3b      	ldrh	r3, [r7, #32]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d035      	beq.n	1558 <SSI_Transfer+0xfe>
    14ec:	68bb      	ldr	r3, [r7, #8]
    14ee:	2b00      	cmp	r3, #0
    14f0:	d032      	beq.n	1558 <SSI_Transfer+0xfe>
    14f2:	88fb      	ldrh	r3, [r7, #6]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d12f      	bne.n	1558 <SSI_Transfer+0xfe>
    {
        receive_num = (rlen && rlen<=fifo_depth) ?   rlen-1 : fifo_depth-1;
    14f8:	8c3b      	ldrh	r3, [r7, #32]
    14fa:	2b00      	cmp	r3, #0
    14fc:	d008      	beq.n	1510 <SSI_Transfer+0xb6>
    14fe:	7dfb      	ldrb	r3, [r7, #23]
    1500:	b29b      	uxth	r3, r3
    1502:	8c3a      	ldrh	r2, [r7, #32]
    1504:	429a      	cmp	r2, r3
    1506:	d803      	bhi.n	1510 <SSI_Transfer+0xb6>
    1508:	8c3b      	ldrh	r3, [r7, #32]
    150a:	3b01      	subs	r3, #1
    150c:	b29b      	uxth	r3, r3
    150e:	e003      	b.n	1518 <SSI_Transfer+0xbe>
    1510:	7dfb      	ldrb	r3, [r7, #23]
    1512:	b29b      	uxth	r3, r3
    1514:	3b01      	subs	r3, #1
    1516:	b29b      	uxth	r3, r3
    1518:	82bb      	strh	r3, [r7, #20]
        if(IS_SPIM0(SSIx))
    151a:	68fb      	ldr	r3, [r7, #12]
    151c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    1520:	d103      	bne.n	152a <SSI_Transfer+0xd0>
            SSIC_SetTransferMode(SSI_ONLY_RECEIVE);   
    1522:	2002      	movs	r0, #2
    1524:	f000 faa4 	bl	1a70 <SSIC_SetTransferMode>
    1528:	e003      	b.n	1532 <SSI_Transfer+0xd8>
        else
            SSI_SetTransferMode(SSIx,SSI_ONLY_RECEIVE);   
    152a:	2102      	movs	r1, #2
    152c:	68f8      	ldr	r0, [r7, #12]
    152e:	f7ff fdbe 	bl	10ae <SSI_SetTransferMode>
        
        SSI_UpdataReceiveTransmitFifoThreshold(SSIx,receive_num,0);
    1532:	8abb      	ldrh	r3, [r7, #20]
    1534:	2200      	movs	r2, #0
    1536:	4619      	mov	r1, r3
    1538:	68f8      	ldr	r0, [r7, #12]
    153a:	f000 f863 	bl	1604 <SSI_UpdataReceiveTransmitFifoThreshold>
        SSI_UpdataReceiveNumber(SSIx,rlen);
    153e:	8c3b      	ldrh	r3, [r7, #32]
    1540:	4619      	mov	r1, r3
    1542:	68f8      	ldr	r0, [r7, #12]
    1544:	f000 f879 	bl	163a <SSI_UpdataReceiveNumber>
        SSI_Receive(SSIx,true,rx,rlen);
    1548:	8c3b      	ldrh	r3, [r7, #32]
    154a:	683a      	ldr	r2, [r7, #0]
    154c:	2101      	movs	r1, #1
    154e:	68f8      	ldr	r0, [r7, #12]
    1550:	f7ff ff1f 	bl	1392 <SSI_Receive>
       
        return true;
    1554:	2301      	movs	r3, #1
    1556:	e051      	b.n	15fc <SSI_Transfer+0x1a2>
    }
    if(rx && rlen>0 && tx && tlen>0)
    1558:	683b      	ldr	r3, [r7, #0]
    155a:	2b00      	cmp	r3, #0
    155c:	d04d      	beq.n	15fa <SSI_Transfer+0x1a0>
    155e:	8c3b      	ldrh	r3, [r7, #32]
    1560:	2b00      	cmp	r3, #0
    1562:	d04a      	beq.n	15fa <SSI_Transfer+0x1a0>
    1564:	68bb      	ldr	r3, [r7, #8]
    1566:	2b00      	cmp	r3, #0
    1568:	d047      	beq.n	15fa <SSI_Transfer+0x1a0>
    156a:	88fb      	ldrh	r3, [r7, #6]
    156c:	2b00      	cmp	r3, #0
    156e:	d044      	beq.n	15fa <SSI_Transfer+0x1a0>
    {

        receive_num = (rlen && rlen<=fifo_depth) ?   rlen-1 : fifo_depth-1;
    1570:	8c3b      	ldrh	r3, [r7, #32]
    1572:	2b00      	cmp	r3, #0
    1574:	d008      	beq.n	1588 <SSI_Transfer+0x12e>
    1576:	7dfb      	ldrb	r3, [r7, #23]
    1578:	b29b      	uxth	r3, r3
    157a:	8c3a      	ldrh	r2, [r7, #32]
    157c:	429a      	cmp	r2, r3
    157e:	d803      	bhi.n	1588 <SSI_Transfer+0x12e>
    1580:	8c3b      	ldrh	r3, [r7, #32]
    1582:	3b01      	subs	r3, #1
    1584:	b29b      	uxth	r3, r3
    1586:	e003      	b.n	1590 <SSI_Transfer+0x136>
    1588:	7dfb      	ldrb	r3, [r7, #23]
    158a:	b29b      	uxth	r3, r3
    158c:	3b01      	subs	r3, #1
    158e:	b29b      	uxth	r3, r3
    1590:	82bb      	strh	r3, [r7, #20]
        transmit_num  = (tlen && tlen<=fifo_depth) ?   tlen-1 : fifo_depth-1;
    1592:	88fb      	ldrh	r3, [r7, #6]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <SSI_Transfer+0x150>
    1598:	7dfb      	ldrb	r3, [r7, #23]
    159a:	b29b      	uxth	r3, r3
    159c:	88fa      	ldrh	r2, [r7, #6]
    159e:	429a      	cmp	r2, r3
    15a0:	d803      	bhi.n	15aa <SSI_Transfer+0x150>
    15a2:	88fb      	ldrh	r3, [r7, #6]
    15a4:	3b01      	subs	r3, #1
    15a6:	b29b      	uxth	r3, r3
    15a8:	e003      	b.n	15b2 <SSI_Transfer+0x158>
    15aa:	7dfb      	ldrb	r3, [r7, #23]
    15ac:	b29b      	uxth	r3, r3
    15ae:	3b01      	subs	r3, #1
    15b0:	b29b      	uxth	r3, r3
    15b2:	827b      	strh	r3, [r7, #18]
        
         if(IS_SPIM0(SSIx))
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    15ba:	d103      	bne.n	15c4 <SSI_Transfer+0x16a>
            SSIC_SetTransferMode(SSI_EEPROM_READ);   
    15bc:	2003      	movs	r0, #3
    15be:	f000 fa57 	bl	1a70 <SSIC_SetTransferMode>
    15c2:	e003      	b.n	15cc <SSI_Transfer+0x172>
         else
            SSI_SetTransferMode(SSIx,SSI_EEPROM_READ); 
    15c4:	2103      	movs	r1, #3
    15c6:	68f8      	ldr	r0, [r7, #12]
    15c8:	f7ff fd71 	bl	10ae <SSI_SetTransferMode>
        
        SSI_UpdataReceiveTransmitFifoThreshold(SSIx,receive_num,transmit_num);
    15cc:	8a7a      	ldrh	r2, [r7, #18]
    15ce:	8abb      	ldrh	r3, [r7, #20]
    15d0:	4619      	mov	r1, r3
    15d2:	68f8      	ldr	r0, [r7, #12]
    15d4:	f000 f816 	bl	1604 <SSI_UpdataReceiveTransmitFifoThreshold>
        SSI_UpdataReceiveNumber(SSIx,rlen-1);
    15d8:	8c3b      	ldrh	r3, [r7, #32]
    15da:	3b01      	subs	r3, #1
    15dc:	b29b      	uxth	r3, r3
    15de:	4619      	mov	r1, r3
    15e0:	68f8      	ldr	r0, [r7, #12]
    15e2:	f000 f82a 	bl	163a <SSI_UpdataReceiveNumber>
        SSI_Dirtransfer(SSIx,tx,tlen,rx,rlen);    
    15e6:	88fa      	ldrh	r2, [r7, #6]
    15e8:	8c3b      	ldrh	r3, [r7, #32]
    15ea:	9300      	str	r3, [sp, #0]
    15ec:	683b      	ldr	r3, [r7, #0]
    15ee:	68b9      	ldr	r1, [r7, #8]
    15f0:	68f8      	ldr	r0, [r7, #12]
    15f2:	f7ff ff11 	bl	1418 <SSI_Dirtransfer>
        return true;
    15f6:	2301      	movs	r3, #1
    15f8:	e000      	b.n	15fc <SSI_Transfer+0x1a2>
    }
    else
        return false;    
    15fa:	2300      	movs	r3, #0
    
}
    15fc:	4618      	mov	r0, r3
    15fe:	3718      	adds	r7, #24
    1600:	46bd      	mov	sp, r7
    1602:	bd80      	pop	{r7, pc}

00001604 <SSI_UpdataReceiveTransmitFifoThreshold>:
  * @param  rx_thd:Receive FIFO Threshold
  * @param  tx_thd:Transmit FIFO Threshold
  * @retval  None
  */
void SSI_UpdataReceiveTransmitFifoThreshold(SSI_TypeDef   *SSIx,uint16_t rx_threshold,uint16_t tx_threshold)
{
    1604:	b580      	push	{r7, lr}
    1606:	b082      	sub	sp, #8
    1608:	af00      	add	r7, sp, #0
    160a:	6078      	str	r0, [r7, #4]
    160c:	460b      	mov	r3, r1
    160e:	807b      	strh	r3, [r7, #2]
    1610:	4613      	mov	r3, r2
    1612:	803b      	strh	r3, [r7, #0]
    SSIx->SSIENR = DISABLE;
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	2200      	movs	r2, #0
    1618:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    161a:	6878      	ldr	r0, [r7, #4]
    161c:	f000 f8cc 	bl	17b8 <SSI_ClearInterrupt>
    SSIx->RXFTLR =  rx_threshold;
    1620:	887a      	ldrh	r2, [r7, #2]
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	61da      	str	r2, [r3, #28]
    SSIx->TXFTLR = tx_threshold;
    1626:	883a      	ldrh	r2, [r7, #0]
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	619a      	str	r2, [r3, #24]
    SSIx->SSIENR = ENABLE;
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	2201      	movs	r2, #1
    1630:	609a      	str	r2, [r3, #8]
}
    1632:	bf00      	nop
    1634:	3708      	adds	r7, #8
    1636:	46bd      	mov	sp, r7
    1638:	bd80      	pop	{r7, pc}

0000163a <SSI_UpdataReceiveNumber>:
  * @param  len:Number of Data Frames
  * @retval  None
  */

void SSI_UpdataReceiveNumber(SSI_TypeDef   *SSIx,uint16_t len)
{
    163a:	b580      	push	{r7, lr}
    163c:	b082      	sub	sp, #8
    163e:	af00      	add	r7, sp, #0
    1640:	6078      	str	r0, [r7, #4]
    1642:	460b      	mov	r3, r1
    1644:	807b      	strh	r3, [r7, #2]
    SSIx->SSIENR = DISABLE;
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	2200      	movs	r2, #0
    164a:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    164c:	6878      	ldr	r0, [r7, #4]
    164e:	f000 f8b3 	bl	17b8 <SSI_ClearInterrupt>
    SSIx->CTRLR1 =  len;
    1652:	887a      	ldrh	r2, [r7, #2]
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	605a      	str	r2, [r3, #4]
    SSIx->SSIENR = ENABLE;
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	2201      	movs	r2, #1
    165c:	609a      	str	r2, [r3, #8]
}
    165e:	bf00      	nop
    1660:	3708      	adds	r7, #8
    1662:	46bd      	mov	sp, r7
    1664:	bd80      	pop	{r7, pc}

00001666 <SSI_UpdataDataFarmeSize>:



void SSI_UpdataDataFarmeSize(SSI_TypeDef   *SSIx,SSI_DataFarmeSize_Type cfg)
{
    1666:	b580      	push	{r7, lr}
    1668:	b084      	sub	sp, #16
    166a:	af00      	add	r7, sp, #0
    166c:	6078      	str	r0, [r7, #4]
    166e:	460b      	mov	r3, r1
    1670:	70fb      	strb	r3, [r7, #3]
    uint32_t CTL_CFG= SSIx->CTRLR0;
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	60fb      	str	r3, [r7, #12]
    
    SSIx->SSIENR = DISABLE;
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	2200      	movs	r2, #0
    167c:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    167e:	6878      	ldr	r0, [r7, #4]
    1680:	f000 f89a 	bl	17b8 <SSI_ClearInterrupt>

    if(IS_SPIM0(SSIx))
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    168a:	d108      	bne.n	169e <SSI_UpdataDataFarmeSize+0x38>
    {
        CTL_CFG &= (~SSIC_CTRLR0_DFS_MSK);
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	f023 031f 	bic.w	r3, r3, #31
    1692:	60fb      	str	r3, [r7, #12]
        CTL_CFG |= (cfg<< SSIC_CTRLR0_DFS_POS);
    1694:	78fb      	ldrb	r3, [r7, #3]
    1696:	68fa      	ldr	r2, [r7, #12]
    1698:	4313      	orrs	r3, r2
    169a:	60fb      	str	r3, [r7, #12]
    169c:	e01d      	b.n	16da <SSI_UpdataDataFarmeSize+0x74>
    }
    else
    {
        if(cfg > SSI_DATA_FRAME_SIZE_16BIT)
    169e:	78fb      	ldrb	r3, [r7, #3]
    16a0:	2b0f      	cmp	r3, #15
    16a2:	d910      	bls.n	16c6 <SSI_UpdataDataFarmeSize+0x60>
        {
            CTL_CFG &= (~SSI_CTRLR0_DFS_32_MSK);
    16a4:	68fb      	ldr	r3, [r7, #12]
    16a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    16aa:	60fb      	str	r3, [r7, #12]
            CTL_CFG &= (~SSI_CTRLR0_DFS_MSK);
    16ac:	68fb      	ldr	r3, [r7, #12]
    16ae:	f023 030f 	bic.w	r3, r3, #15
    16b2:	60fb      	str	r3, [r7, #12]
            CTL_CFG |= (cfg<< SSI_CTRLR0_DFS_32_POS| cfg << SSI_CTRLR0_DFS_POS) ;   
    16b4:	78fb      	ldrb	r3, [r7, #3]
    16b6:	041a      	lsls	r2, r3, #16
    16b8:	78fb      	ldrb	r3, [r7, #3]
    16ba:	4313      	orrs	r3, r2
    16bc:	461a      	mov	r2, r3
    16be:	68fb      	ldr	r3, [r7, #12]
    16c0:	4313      	orrs	r3, r2
    16c2:	60fb      	str	r3, [r7, #12]
    16c4:	e009      	b.n	16da <SSI_UpdataDataFarmeSize+0x74>
        }
        else
        {
            CTL_CFG &= (~SSI_CTRLR0_DFS_32_MSK);
    16c6:	68fb      	ldr	r3, [r7, #12]
    16c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    16cc:	60fb      	str	r3, [r7, #12]
            CTL_CFG |= (cfg<< SSI_CTRLR0_DFS_32_POS);
    16ce:	78fb      	ldrb	r3, [r7, #3]
    16d0:	041b      	lsls	r3, r3, #16
    16d2:	461a      	mov	r2, r3
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	4313      	orrs	r3, r2
    16d8:	60fb      	str	r3, [r7, #12]
        }   
    }
    SSIx->CTRLR0 = CTL_CFG;
    16da:	687b      	ldr	r3, [r7, #4]
    16dc:	68fa      	ldr	r2, [r7, #12]
    16de:	601a      	str	r2, [r3, #0]
    SSIx->SSIENR = ENABLE;
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	2201      	movs	r2, #1
    16e4:	609a      	str	r2, [r3, #8]
}
    16e6:	bf00      	nop
    16e8:	3710      	adds	r7, #16
    16ea:	46bd      	mov	sp, r7
    16ec:	bd80      	pop	{r7, pc}

000016ee <SSI_UpdateDmaControl>:


void SSI_UpdateDmaControl(SSI_TypeDef   *SSIx,bool rx_en,uint16_t rx_thd,bool tx_en,uint16_t tx_thd)
{
    16ee:	b580      	push	{r7, lr}
    16f0:	b082      	sub	sp, #8
    16f2:	af00      	add	r7, sp, #0
    16f4:	6078      	str	r0, [r7, #4]
    16f6:	4608      	mov	r0, r1
    16f8:	4611      	mov	r1, r2
    16fa:	461a      	mov	r2, r3
    16fc:	4603      	mov	r3, r0
    16fe:	70fb      	strb	r3, [r7, #3]
    1700:	460b      	mov	r3, r1
    1702:	803b      	strh	r3, [r7, #0]
    1704:	4613      	mov	r3, r2
    1706:	70bb      	strb	r3, [r7, #2]
    
    SSIx->SSIENR = DISABLE;
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	2200      	movs	r2, #0
    170c:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    170e:	6878      	ldr	r0, [r7, #4]
    1710:	f000 f852 	bl	17b8 <SSI_ClearInterrupt>
    
    if(rx_en)
    1714:	78fb      	ldrb	r3, [r7, #3]
    1716:	2b00      	cmp	r3, #0
    1718:	d009      	beq.n	172e <SSI_UpdateDmaControl+0x40>
    {
        SSIx->DMACR |= SSI_DMACR_RDMAE_MSK;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    171e:	f043 0201 	orr.w	r2, r3, #1
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	64da      	str	r2, [r3, #76]	; 0x4c
        SSIx->DMARDLR = rx_thd;
    1726:	883a      	ldrh	r2, [r7, #0]
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	655a      	str	r2, [r3, #84]	; 0x54
    172c:	e005      	b.n	173a <SSI_UpdateDmaControl+0x4c>
    }
    else   
        SSIx->DMACR &= ~SSI_DMACR_RDMAE_MSK;
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1732:	f023 0201 	bic.w	r2, r3, #1
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	64da      	str	r2, [r3, #76]	; 0x4c

    if(tx_en)
    173a:	78bb      	ldrb	r3, [r7, #2]
    173c:	2b00      	cmp	r3, #0
    173e:	d009      	beq.n	1754 <SSI_UpdateDmaControl+0x66>
    {
        SSIx->DMACR |= SSI_DMACR_TDMAE_MSK;
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1744:	f043 0202 	orr.w	r2, r3, #2
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	64da      	str	r2, [r3, #76]	; 0x4c
        SSIx->DMATDLR = tx_thd;
    174c:	8a3a      	ldrh	r2, [r7, #16]
    174e:	687b      	ldr	r3, [r7, #4]
    1750:	651a      	str	r2, [r3, #80]	; 0x50
    }
    else   
        SSIx->DMACR &= ~SSI_DMACR_TDMAE_MSK;
    

}
    1752:	e005      	b.n	1760 <SSI_UpdateDmaControl+0x72>
        SSIx->DMACR &= ~SSI_DMACR_TDMAE_MSK;
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1758:	f023 0202 	bic.w	r2, r3, #2
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	64da      	str	r2, [r3, #76]	; 0x4c
}
    1760:	bf00      	nop
    1762:	3708      	adds	r7, #8
    1764:	46bd      	mov	sp, r7
    1766:	bd80      	pop	{r7, pc}

00001768 <SSI_UpdateClock>:


void SSI_UpdateClock(SSI_TypeDef   *SSIx ,uint16_t clock_div)
{
    1768:	b580      	push	{r7, lr}
    176a:	b082      	sub	sp, #8
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
    1770:	460b      	mov	r3, r1
    1772:	807b      	strh	r3, [r7, #2]
    SSIx->SSIENR = DISABLE;
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	2200      	movs	r2, #0
    1778:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SSIx);
    177a:	6878      	ldr	r0, [r7, #4]
    177c:	f000 f81c 	bl	17b8 <SSI_ClearInterrupt>
    /*
     Fsclk_out = Fssiclk/clock_div
    */
    SSIx->BAUDR =  clock_div;
    1780:	887a      	ldrh	r2, [r7, #2]
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    SSIx->SSIENR = ENABLE;
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	2201      	movs	r2, #1
    178a:	609a      	str	r2, [r3, #8]
}
    178c:	bf00      	nop
    178e:	3708      	adds	r7, #8
    1790:	46bd      	mov	sp, r7
    1792:	bd80      	pop	{r7, pc}

00001794 <SSI_IsBusy>:
/**
*name: SSI_is_busy
*
**/
bool SSI_IsBusy(SSI_TypeDef   *SSIx)
{
    1794:	b480      	push	{r7}
    1796:	b083      	sub	sp, #12
    1798:	af00      	add	r7, sp, #0
    179a:	6078      	str	r0, [r7, #4]
    return ((SSIx->SR & SSI_SR_BUSY_MSK)? true : false);
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17a0:	f003 0301 	and.w	r3, r3, #1
    17a4:	2b00      	cmp	r3, #0
    17a6:	bf14      	ite	ne
    17a8:	2301      	movne	r3, #1
    17aa:	2300      	moveq	r3, #0
    17ac:	b2db      	uxtb	r3, r3
}
    17ae:	4618      	mov	r0, r3
    17b0:	370c      	adds	r7, #12
    17b2:	46bd      	mov	sp, r7
    17b4:	bc80      	pop	{r7}
    17b6:	4770      	bx	lr

000017b8 <SSI_ClearInterrupt>:
/**
*name: SSI_ClearInterrupt
*
**/
uint32_t  SSI_ClearInterrupt(SSI_TypeDef   *SSIx)
{
    17b8:	b480      	push	{r7}
    17ba:	b083      	sub	sp, #12
    17bc:	af00      	add	r7, sp, #0
    17be:	6078      	str	r0, [r7, #4]
    return SSIx->ICR;
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
    17c4:	4618      	mov	r0, r3
    17c6:	370c      	adds	r7, #12
    17c8:	46bd      	mov	sp, r7
    17ca:	bc80      	pop	{r7}
    17cc:	4770      	bx	lr

000017ce <SSI_ClearTxFifoOverflowInterrupt>:
uint32_t SSI_ClearTxFifoOverflowInterrupt(SSI_TypeDef   *SSIx)
{
    17ce:	b480      	push	{r7}
    17d0:	b083      	sub	sp, #12
    17d2:	af00      	add	r7, sp, #0
    17d4:	6078      	str	r0, [r7, #4]
    return SSIx->TXOICR;
    17d6:	687b      	ldr	r3, [r7, #4]
    17d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    17da:	4618      	mov	r0, r3
    17dc:	370c      	adds	r7, #12
    17de:	46bd      	mov	sp, r7
    17e0:	bc80      	pop	{r7}
    17e2:	4770      	bx	lr

000017e4 <SSI_ClearRxFifoOverflowInterrupt>:
uint32_t SSI_ClearRxFifoOverflowInterrupt(SSI_TypeDef   *SSIx)
{
    17e4:	b480      	push	{r7}
    17e6:	b083      	sub	sp, #12
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    return SSIx->RXOICR;
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
    17f0:	4618      	mov	r0, r3
    17f2:	370c      	adds	r7, #12
    17f4:	46bd      	mov	sp, r7
    17f6:	bc80      	pop	{r7}
    17f8:	4770      	bx	lr

000017fa <SSI_ClearRxFifoUnderflowInterrupt>:
uint32_t SSI_ClearRxFifoUnderflowInterrupt(SSI_TypeDef   *SSIx)
{
    17fa:	b480      	push	{r7}
    17fc:	b083      	sub	sp, #12
    17fe:	af00      	add	r7, sp, #0
    1800:	6078      	str	r0, [r7, #4]
    return SSIx->RXUICR;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    1806:	4618      	mov	r0, r3
    1808:	370c      	adds	r7, #12
    180a:	46bd      	mov	sp, r7
    180c:	bc80      	pop	{r7}
    180e:	4770      	bx	lr

00001810 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1810:	b480      	push	{r7}
    1812:	b083      	sub	sp, #12
    1814:	af00      	add	r7, sp, #0
    1816:	4603      	mov	r3, r0
    1818:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    181a:	79fb      	ldrb	r3, [r7, #7]
    181c:	f003 031f 	and.w	r3, r3, #31
    1820:	2201      	movs	r2, #1
    1822:	fa02 f103 	lsl.w	r1, r2, r3
    1826:	4a06      	ldr	r2, [pc, #24]	; (1840 <NVIC_ClearPendingIRQ+0x30>)
    1828:	f997 3007 	ldrsb.w	r3, [r7, #7]
    182c:	095b      	lsrs	r3, r3, #5
    182e:	3360      	adds	r3, #96	; 0x60
    1830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    1834:	bf00      	nop
    1836:	370c      	adds	r7, #12
    1838:	46bd      	mov	sp, r7
    183a:	bc80      	pop	{r7}
    183c:	4770      	bx	lr
    183e:	bf00      	nop
    1840:	e000e100 	.word	0xe000e100

00001844 <SSIC_XipGetControlCfg>:
static uint32_t  SSIC_XipGetControlCfg(SSIC_XIP_InitInfo_Type *SSIC_XipInitStru);
static uint32_t  SSIC_XipSetSpiControlCfg(SSIC_XIP_InitInfo_Type *SSIC_XipInitStru);
static uint32_t  SSIC_GetControlCfg(SSIC_InitInfo_Type *SSIC_InitStru);

static uint32_t  SSIC_XipGetControlCfg(SSIC_XIP_InitInfo_Type *SSIC_XipInitStru)
{
    1844:	b480      	push	{r7}
    1846:	b083      	sub	sp, #12
    1848:	af00      	add	r7, sp, #0
    184a:	6078      	str	r0, [r7, #4]
    return  (((SSIC_XipInitStru->spi_frame_format  <<SSIC_XIP_CTRL_FRF_POS ) & SSIC_XIP_CTRL_FRF_MSK) |
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	781b      	ldrb	r3, [r3, #0]
    1850:	f003 0203 	and.w	r2, r3, #3
        ((SSIC_XipInitStru->transfer_type <<SSIC_XIP_CTRL_TRANS_TYPE_POS ) & SSIC_XIP_CTRL_TRANS_TYPE_MSK)|
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	785b      	ldrb	r3, [r3, #1]
    1858:	009b      	lsls	r3, r3, #2
    185a:	f003 030c 	and.w	r3, r3, #12
    return  (((SSIC_XipInitStru->spi_frame_format  <<SSIC_XIP_CTRL_FRF_POS ) & SSIC_XIP_CTRL_FRF_MSK) |
    185e:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->address_length <<SSIC_XIP_CTRL_ADDR_L_POS )& SSIC_XIP_CTRL_ADDR_L_MSK)|
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	789b      	ldrb	r3, [r3, #2]
    1864:	011b      	lsls	r3, r3, #4
    1866:	b2db      	uxtb	r3, r3
        ((SSIC_XipInitStru->transfer_type <<SSIC_XIP_CTRL_TRANS_TYPE_POS ) & SSIC_XIP_CTRL_TRANS_TYPE_MSK)|
    1868:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->instruction_length <<SSIC_XIP_CTRL_INST_L_POS )& SSIC_XIP_CTRL_INST_L_MSK)|
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	78db      	ldrb	r3, [r3, #3]
    186e:	025b      	lsls	r3, r3, #9
    1870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
        ((SSIC_XipInitStru->address_length <<SSIC_XIP_CTRL_ADDR_L_POS )& SSIC_XIP_CTRL_ADDR_L_MSK)|
    1874:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_mode_bit_en <<SSIC_XIP_CTRL_MD_BITS_EN_POS )& SSIC_XIP_CTRL_MD_BITS_EN_MSK)|
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	791b      	ldrb	r3, [r3, #4]
    187a:	031b      	lsls	r3, r3, #12
    187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        ((SSIC_XipInitStru->instruction_length <<SSIC_XIP_CTRL_INST_L_POS )& SSIC_XIP_CTRL_INST_L_MSK)|
    1880:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->wait_cycles <<SSIC_XIP_CTRL_WAIT_CYCLES_POS )& SSIC_XIP_CTRL_WAIT_CYCLES_MSK)|
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	689b      	ldr	r3, [r3, #8]
    1886:	035b      	lsls	r3, r3, #13
    1888:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
        ((SSIC_XipInitStru->xip_mode_bit_en <<SSIC_XIP_CTRL_MD_BITS_EN_POS )& SSIC_XIP_CTRL_MD_BITS_EN_MSK)|
    188c:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_dfs_hsize_hburst_en <<SSIC_XIP_CTRL_DFS_HC_POS )& SSIC_XIP_CTRL_DFS_HC_MSK)|
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	7b1b      	ldrb	r3, [r3, #12]
    1892:	049b      	lsls	r3, r3, #18
    1894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
        ((SSIC_XipInitStru->wait_cycles <<SSIC_XIP_CTRL_WAIT_CYCLES_POS )& SSIC_XIP_CTRL_WAIT_CYCLES_MSK)|
    1898:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_spi_ddr_en <<SSIC_XIP_CTRL_DDR_EN_POS )& SSIC_XIP_CTRL_DDR_EN_MSK)|
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	7b5b      	ldrb	r3, [r3, #13]
    189e:	04db      	lsls	r3, r3, #19
    18a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
        ((SSIC_XipInitStru->xip_dfs_hsize_hburst_en <<SSIC_XIP_CTRL_DFS_HC_POS )& SSIC_XIP_CTRL_DFS_HC_MSK)|
    18a4:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->instruction_ddr_enable <<SSIC_XIP_CTRL_INST_DDR_EN_POS )& SSIC_XIP_CTRL_INST_DDR_EN_MSK)|
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	7b9b      	ldrb	r3, [r3, #14]
    18aa:	051b      	lsls	r3, r3, #20
    18ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
        ((SSIC_XipInitStru->xip_spi_ddr_en <<SSIC_XIP_CTRL_DDR_EN_POS )& SSIC_XIP_CTRL_DDR_EN_MSK)|
    18b0:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->read_data_strobe_enable <<SSIC_XIP_CTRL_RXDS_EN_POS )& SSIC_XIP_CTRL_RXDS_EN_MSK)|
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	7bdb      	ldrb	r3, [r3, #15]
    18b6:	055b      	lsls	r3, r3, #21
    18b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        ((SSIC_XipInitStru->instruction_ddr_enable <<SSIC_XIP_CTRL_INST_DDR_EN_POS )& SSIC_XIP_CTRL_INST_DDR_EN_MSK)|
    18bc:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_instruction_enable <<SSIC_XIP_CTRL_INST_EN_POS )& SSIC_XIP_CTRL_INST_EN_MSK)|
    18be:	687b      	ldr	r3, [r7, #4]
    18c0:	7c1b      	ldrb	r3, [r3, #16]
    18c2:	059b      	lsls	r3, r3, #22
    18c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ((SSIC_XipInitStru->read_data_strobe_enable <<SSIC_XIP_CTRL_RXDS_EN_POS )& SSIC_XIP_CTRL_RXDS_EN_MSK)|
    18c8:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_continuous_transfer_enable <<SSIC_XIP_CTRL_CONT_XFER_EN_POS )& SSIC_XIP_CTRL_CONT_XFER_EN_MSK)|
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	7c5b      	ldrb	r3, [r3, #17]
    18ce:	05db      	lsls	r3, r3, #23
    18d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        ((SSIC_XipInitStru->xip_instruction_enable <<SSIC_XIP_CTRL_INST_EN_POS )& SSIC_XIP_CTRL_INST_EN_MSK)|
    18d4:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_spi_hyerbus_format_enable <<SSIC_XIP_CTRL_XIP_HYPERBUS_EN_POS )& SSIC_XIP_CTRL_XIP_HYPERBUS_EN_MSK)|
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	7c9b      	ldrb	r3, [r3, #18]
    18da:	061b      	lsls	r3, r3, #24
    18dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ((SSIC_XipInitStru->xip_continuous_transfer_enable <<SSIC_XIP_CTRL_CONT_XFER_EN_POS )& SSIC_XIP_CTRL_CONT_XFER_EN_MSK)|
    18e0:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_rxds_signaling_enable <<SSIC_XIP_CTRL_RXDS_SIG_EN_POS )& SSIC_XIP_CTRL_RXDS_SIG_EN_MSK)|
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	7cdb      	ldrb	r3, [r3, #19]
    18e6:	065b      	lsls	r3, r3, #25
    18e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
        ((SSIC_XipInitStru->xip_spi_hyerbus_format_enable <<SSIC_XIP_CTRL_XIP_HYPERBUS_EN_POS )& SSIC_XIP_CTRL_XIP_HYPERBUS_EN_MSK)|
    18ec:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_mode_bit_length <<SSIC_XIP_CTRL_XIP_MB_POS )& SSIC_XIP_CTRL_XIP_MB_MSK)|
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	7d1b      	ldrb	r3, [r3, #20]
    18f2:	069b      	lsls	r3, r3, #26
    18f4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        ((SSIC_XipInitStru->xip_rxds_signaling_enable <<SSIC_XIP_CTRL_RXDS_SIG_EN_POS )& SSIC_XIP_CTRL_RXDS_SIG_EN_MSK)|
    18f8:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_pre_fetch_enable <<SSIC_XIP_CTRL_XIP_PREFETCH_EN_POS )& SSIC_XIP_CTRL_XIP_PREFETCH_EN_MSK));
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	7d5b      	ldrb	r3, [r3, #21]
    18fe:	075b      	lsls	r3, r3, #29
    1900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
        ((SSIC_XipInitStru->xip_mode_bit_length <<SSIC_XIP_CTRL_XIP_MB_POS )& SSIC_XIP_CTRL_XIP_MB_MSK)|
    1904:	4313      	orrs	r3, r2
        
        
}
    1906:	4618      	mov	r0, r3
    1908:	370c      	adds	r7, #12
    190a:	46bd      	mov	sp, r7
    190c:	bc80      	pop	{r7}
    190e:	4770      	bx	lr

00001910 <SSIC_XipSetSpiControlCfg>:


static uint32_t  SSIC_XipSetSpiControlCfg(SSIC_XIP_InitInfo_Type *SSIC_XipInitStru)
{
    1910:	b480      	push	{r7}
    1912:	b083      	sub	sp, #12
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
    return (((SSIC_XipInitStru->transfer_type<<SSIC_SPI_CTRLR0_TRANS_TYPE_POS) & SSIC_SPI_CTRLR0_TRANS_TYPE_MSK) |
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	785b      	ldrb	r3, [r3, #1]
    191c:	f003 0203 	and.w	r2, r3, #3
        ((SSIC_XipInitStru->address_length <<SSIC_SPI_CTRLR0_ADDR_L_POS) & SSIC_SPI_CTRLR0_ADDR_L_MSK) |
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	789b      	ldrb	r3, [r3, #2]
    1924:	009b      	lsls	r3, r3, #2
    1926:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    return (((SSIC_XipInitStru->transfer_type<<SSIC_SPI_CTRLR0_TRANS_TYPE_POS) & SSIC_SPI_CTRLR0_TRANS_TYPE_MSK) |
    192a:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_mode_bit_en<<SSIC_SPI_CTRLR0_XIP_MD_BIT_EN_POS) & SSIC_SPI_CTRLR0_XIP_MD_BIT_EN_MSK) |
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	791b      	ldrb	r3, [r3, #4]
    1930:	01db      	lsls	r3, r3, #7
    1932:	b2db      	uxtb	r3, r3
        ((SSIC_XipInitStru->address_length <<SSIC_SPI_CTRLR0_ADDR_L_POS) & SSIC_SPI_CTRLR0_ADDR_L_MSK) |
    1934:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->instruction_length<<SSIC_SPI_CTRLR0_INST_L_POS) & SSIC_SPI_CTRLR0_INST_L_MSK) |
    1936:	687b      	ldr	r3, [r7, #4]
    1938:	78db      	ldrb	r3, [r3, #3]
    193a:	021b      	lsls	r3, r3, #8
    193c:	f403 7340 	and.w	r3, r3, #768	; 0x300
        ((SSIC_XipInitStru->xip_mode_bit_en<<SSIC_SPI_CTRLR0_XIP_MD_BIT_EN_POS) & SSIC_SPI_CTRLR0_XIP_MD_BIT_EN_MSK) |
    1940:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->wait_cycles<< SSIC_SPI_CTRLR0_WAIT_CYCLES_POS) & SSIC_SPI_CTRLR0_WAIT_CYCLES_MSK)|
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	689b      	ldr	r3, [r3, #8]
    1946:	02db      	lsls	r3, r3, #11
    1948:	f403 33fc 	and.w	r3, r3, #129024	; 0x1f800
        ((SSIC_XipInitStru->instruction_length<<SSIC_SPI_CTRLR0_INST_L_POS) & SSIC_SPI_CTRLR0_INST_L_MSK) |
    194c:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_spi_ddr_en<<SSIC_SPI_CTRLR0_SPI_DDR_EN_POS) & SSIC_SPI_CTRLR0_SPI_DDR_EN_MSK) |
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	7b5b      	ldrb	r3, [r3, #13]
    1952:	041b      	lsls	r3, r3, #16
    1954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        ((SSIC_XipInitStru->wait_cycles<< SSIC_SPI_CTRLR0_WAIT_CYCLES_POS) & SSIC_SPI_CTRLR0_WAIT_CYCLES_MSK)|
    1958:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->instruction_ddr_enable <<SSIC_SPI_CTRLR0_INST_DDR_EN_POS) & SSIC_SPI_CTRLR0_INST_DDR_EN_MSK) |
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	7b9b      	ldrb	r3, [r3, #14]
    195e:	045b      	lsls	r3, r3, #17
    1960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
        ((SSIC_XipInitStru->xip_spi_ddr_en<<SSIC_SPI_CTRLR0_SPI_DDR_EN_POS) & SSIC_SPI_CTRLR0_SPI_DDR_EN_MSK) |
    1964:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->read_data_strobe_enable<<SSIC_SPI_CTRLR0_SPI_RXDS_EN_POS) & SSIC_SPI_CTRLR0_SPI_RXDS_EN_MSK) |
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	7bdb      	ldrb	r3, [r3, #15]
    196a:	049b      	lsls	r3, r3, #18
    196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
        ((SSIC_XipInitStru->instruction_ddr_enable <<SSIC_SPI_CTRLR0_INST_DDR_EN_POS) & SSIC_SPI_CTRLR0_INST_DDR_EN_MSK) |
    1970:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_dfs_hsize_hburst_en<<SSIC_SPI_CTRLR0_XIP_DFS_HC_POS) & SSIC_SPI_CTRLR0_XIP_DFS_HC_MSK) |
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	7b1b      	ldrb	r3, [r3, #12]
    1976:	04db      	lsls	r3, r3, #19
    1978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
        ((SSIC_XipInitStru->read_data_strobe_enable<<SSIC_SPI_CTRLR0_SPI_RXDS_EN_POS) & SSIC_SPI_CTRLR0_SPI_RXDS_EN_MSK) |
    197c:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_instruction_enable<<SSIC_SPI_CTRLR0_XIP_INST_EN_POS) & SSIC_SPI_CTRLR0_XIP_INST_EN_MSK) |
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	7c1b      	ldrb	r3, [r3, #16]
    1982:	051b      	lsls	r3, r3, #20
    1984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
        ((SSIC_XipInitStru->xip_dfs_hsize_hburst_en<<SSIC_SPI_CTRLR0_XIP_DFS_HC_POS) & SSIC_SPI_CTRLR0_XIP_DFS_HC_MSK) |
    1988:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_continuous_transfer_enable<<SSIC_SPI_CTRLR0_SSIC_XIP_CONT_XFER_EN_POS) & SSIC_SPI_CTRLR0_SSIC_XIP_CONT_XFER_EN_MSK)|
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	7c5b      	ldrb	r3, [r3, #17]
    198e:	055b      	lsls	r3, r3, #21
    1990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        ((SSIC_XipInitStru->xip_instruction_enable<<SSIC_SPI_CTRLR0_XIP_INST_EN_POS) & SSIC_SPI_CTRLR0_XIP_INST_EN_MSK) |
    1994:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->spi_data_mask_en<<SSIC_SPI_CTRLR0_SPI_DM_EN_POS) & SSIC_SPI_CTRLR0_SPI_DM_EN_MSK) |
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    199c:	061b      	lsls	r3, r3, #24
    199e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ((SSIC_XipInitStru->xip_continuous_transfer_enable<<SSIC_SPI_CTRLR0_SSIC_XIP_CONT_XFER_EN_POS) & SSIC_SPI_CTRLR0_SSIC_XIP_CONT_XFER_EN_MSK)|
    19a2:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_rxds_signaling_enable<<SSIC_SPI_CTRLR0_SPI_RXDS_SIG_EN_POS) & SSIC_SPI_CTRLR0_SPI_RXDS_SIG_EN_MSK) |
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	7cdb      	ldrb	r3, [r3, #19]
    19a8:	065b      	lsls	r3, r3, #25
    19aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
        ((SSIC_XipInitStru->spi_data_mask_en<<SSIC_SPI_CTRLR0_SPI_DM_EN_POS) & SSIC_SPI_CTRLR0_SPI_DM_EN_MSK) |
    19ae:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_mode_bit_length <<SSIC_SPI_CTRLR0_XIP_MBL_POS) & SSIC_SPI_CTRLR0_XIP_MBL_MSK) |
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	7d1b      	ldrb	r3, [r3, #20]
    19b4:	069b      	lsls	r3, r3, #26
    19b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        ((SSIC_XipInitStru->xip_rxds_signaling_enable<<SSIC_SPI_CTRLR0_SPI_RXDS_SIG_EN_POS) & SSIC_SPI_CTRLR0_SPI_RXDS_SIG_EN_MSK) |
    19ba:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->xip_pre_fetch_enable<<SSIC_SPI_CTRLR0_XIP_PREFETCH_EN_POS) & SSIC_SPI_CTRLR0_XIP_PREFETCH_EN_MSK) |
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	7d5b      	ldrb	r3, [r3, #21]
    19c0:	075b      	lsls	r3, r3, #29
    19c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
        ((SSIC_XipInitStru->xip_mode_bit_length <<SSIC_SPI_CTRLR0_XIP_MBL_POS) & SSIC_SPI_CTRLR0_XIP_MBL_MSK) |
    19c6:	431a      	orrs	r2, r3
        ((SSIC_XipInitStru->spi_clk_stretch_en<<SSIC_SPI_CTRLR0_CLK_STRETCH_EN_POS) & SSIC_SPI_CTRLR0_CLK_STRETCH_EN_MSK));
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	f893 3020 	ldrb.w	r3, [r3, #32]
    19ce:	079b      	lsls	r3, r3, #30
    19d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
        ((SSIC_XipInitStru->xip_pre_fetch_enable<<SSIC_SPI_CTRLR0_XIP_PREFETCH_EN_POS) & SSIC_SPI_CTRLR0_XIP_PREFETCH_EN_MSK) |
    19d4:	4313      	orrs	r3, r2
        
        
}
    19d6:	4618      	mov	r0, r3
    19d8:	370c      	adds	r7, #12
    19da:	46bd      	mov	sp, r7
    19dc:	bc80      	pop	{r7}
    19de:	4770      	bx	lr

000019e0 <SSIC_GetControlCfg>:


static uint32_t SSIC_GetControlCfg(SSIC_InitInfo_Type *SSIC_InitStru)
{
    19e0:	b480      	push	{r7}
    19e2:	b083      	sub	sp, #12
    19e4:	af00      	add	r7, sp, #0
    19e6:	6078      	str	r0, [r7, #4]
    return (((SSIC_InitStru->frame_format_size<< SSIC_CTRLR0_DFS_POS) & SSIC_CTRLR0_DFS_MSK)|
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	789b      	ldrb	r3, [r3, #2]
    19ec:	f003 021f 	and.w	r2, r3, #31
        ((SSIC_InitStru->ssi_frame_format<< SSIC_CTRLR0_FRF_POS)&SSIC_CTRLR0_FRF_MSK)|
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	78db      	ldrb	r3, [r3, #3]
    19f4:	019b      	lsls	r3, r3, #6
    19f6:	b2db      	uxtb	r3, r3
    return (((SSIC_InitStru->frame_format_size<< SSIC_CTRLR0_DFS_POS) & SSIC_CTRLR0_DFS_MSK)|
    19f8:	431a      	orrs	r2, r3
        (( SSIC_InitStru->clock_phase<< SSIC_CTRLR0_SCPH_POS)&SSIC_CTRLR0_SCPH_MSK)|
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	791b      	ldrb	r3, [r3, #4]
    19fe:	021b      	lsls	r3, r3, #8
    1a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
        ((SSIC_InitStru->ssi_frame_format<< SSIC_CTRLR0_FRF_POS)&SSIC_CTRLR0_FRF_MSK)|
    1a04:	431a      	orrs	r2, r3
        (( SSIC_InitStru->clock_polarity<< SSIC_CTRLR0_SCPOL_POS)&SSIC_CTRLR0_SCPOL_MSK)|
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	795b      	ldrb	r3, [r3, #5]
    1a0a:	025b      	lsls	r3, r3, #9
    1a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
        (( SSIC_InitStru->clock_phase<< SSIC_CTRLR0_SCPH_POS)&SSIC_CTRLR0_SCPH_MSK)|
    1a10:	431a      	orrs	r2, r3
        (( SSIC_InitStru->transfer_mode<< SSIC_CTRLR0_TMOD_POS)&SSIC_CTRLR0_TMOD_MSK)|
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	799b      	ldrb	r3, [r3, #6]
    1a16:	029b      	lsls	r3, r3, #10
    1a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        (( SSIC_InitStru->clock_polarity<< SSIC_CTRLR0_SCPOL_POS)&SSIC_CTRLR0_SCPOL_MSK)|
    1a1c:	431a      	orrs	r2, r3
        (( SSIC_InitStru->slave_output_enable<< SSIC_CTRLR0_SLV_OE_POS)&SSIC_CTRLR0_SLV_OE_MSK)|
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	79db      	ldrb	r3, [r3, #7]
    1a22:	031b      	lsls	r3, r3, #12
    1a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
        (( SSIC_InitStru->transfer_mode<< SSIC_CTRLR0_TMOD_POS)&SSIC_CTRLR0_TMOD_MSK)|
    1a28:	431a      	orrs	r2, r3
        (( SSIC_InitStru->operation_mode<< SSIC_CTRLR0_SRL_POS)&SSIC_CTRLR0_SRL_MSK)|
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	7a1b      	ldrb	r3, [r3, #8]
    1a2e:	035b      	lsls	r3, r3, #13
    1a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (( SSIC_InitStru->slave_output_enable<< SSIC_CTRLR0_SLV_OE_POS)&SSIC_CTRLR0_SLV_OE_MSK)|
    1a34:	431a      	orrs	r2, r3
        (( SSIC_InitStru->slave_select_toggle_en<< SSIC_CTRLR0_SSTE_POS)&SSIC_CTRLR0_SSTE_MSK)|
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	7a5b      	ldrb	r3, [r3, #9]
    1a3a:	039b      	lsls	r3, r3, #14
    1a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        (( SSIC_InitStru->operation_mode<< SSIC_CTRLR0_SRL_POS)&SSIC_CTRLR0_SRL_MSK)|
    1a40:	431a      	orrs	r2, r3
        (( SSIC_InitStru->control_farme_size<< SSIC_CTRLR0_CFS_POS)&SSIC_CTRLR0_CFS_MSK)|
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	7a9b      	ldrb	r3, [r3, #10]
    1a46:	041b      	lsls	r3, r3, #16
    1a48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
        (( SSIC_InitStru->slave_select_toggle_en<< SSIC_CTRLR0_SSTE_POS)&SSIC_CTRLR0_SSTE_MSK)|
    1a4c:	431a      	orrs	r2, r3
        (( SSIC_InitStru->spi_frame_format<< SSIC_CTRLR0_SPI_FRF_POS)&SSIC_CTRLR0_SPI_FRF_MSK)|
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	7adb      	ldrb	r3, [r3, #11]
    1a52:	059b      	lsls	r3, r3, #22
    1a54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        (( SSIC_InitStru->control_farme_size<< SSIC_CTRLR0_CFS_POS)&SSIC_CTRLR0_CFS_MSK)|
    1a58:	431a      	orrs	r2, r3
        (( SSIC_InitStru->spi_hyperbus_en<< SSIC_CTRLR0_SPI_HYPERBUS_EN_POS)&SSIC_CTRLR0_SPI_HYPERBUS_EN_MSK));
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	7b1b      	ldrb	r3, [r3, #12]
    1a5e:	061b      	lsls	r3, r3, #24
    1a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        (( SSIC_InitStru->spi_frame_format<< SSIC_CTRLR0_SPI_FRF_POS)&SSIC_CTRLR0_SPI_FRF_MSK)|
    1a64:	4313      	orrs	r3, r2

}
    1a66:	4618      	mov	r0, r3
    1a68:	370c      	adds	r7, #12
    1a6a:	46bd      	mov	sp, r7
    1a6c:	bc80      	pop	{r7}
    1a6e:	4770      	bx	lr

00001a70 <SSIC_SetTransferMode>:
  *
  * @param tx_mode : Select the mode you want to set
  * @retval None
  */
bool SSIC_SetTransferMode(SSI_TransferMode_Type tx_mode)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	b084      	sub	sp, #16
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]

    if(((SPIM0->CTRLR0 & SSIC_CTRLR0_TMOD_MSK) >> \
    1a7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1a7e:	681b      	ldr	r3, [r3, #0]
    1a80:	0a9b      	lsrs	r3, r3, #10
    1a82:	f003 0203 	and.w	r2, r3, #3
        SSIC_CTRLR0_TMOD_POS )  ==tx_mode)
    1a86:	79fb      	ldrb	r3, [r7, #7]
    if(((SPIM0->CTRLR0 & SSIC_CTRLR0_TMOD_MSK) >> \
    1a88:	429a      	cmp	r2, r3
    1a8a:	d101      	bne.n	1a90 <SSIC_SetTransferMode+0x20>
        return true;
    1a8c:	2301      	movs	r3, #1
    1a8e:	e027      	b.n	1ae0 <SSIC_SetTransferMode+0x70>
    
    SPIM0->SSIENR = DISABLE;
    1a90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1a94:	2200      	movs	r2, #0
    1a96:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SPIM0);
    1a98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    1a9c:	f7ff fe8c 	bl	17b8 <SSI_ClearInterrupt>
    SPIM0->CTRLR0 &= ~SSIC_CTRLR0_TMOD_MSK;
    1aa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1aaa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    1aae:	6013      	str	r3, [r2, #0]
    for(uint8_t i=0;i<5;i++);
    1ab0:	2300      	movs	r3, #0
    1ab2:	73fb      	strb	r3, [r7, #15]
    1ab4:	e002      	b.n	1abc <SSIC_SetTransferMode+0x4c>
    1ab6:	7bfb      	ldrb	r3, [r7, #15]
    1ab8:	3301      	adds	r3, #1
    1aba:	73fb      	strb	r3, [r7, #15]
    1abc:	7bfb      	ldrb	r3, [r7, #15]
    1abe:	2b04      	cmp	r3, #4
    1ac0:	d9f9      	bls.n	1ab6 <SSIC_SetTransferMode+0x46>
    
    SPIM0->CTRLR0 |=tx_mode<<SSIC_CTRLR0_TMOD_POS;
    1ac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1ac6:	681b      	ldr	r3, [r3, #0]
    1ac8:	79fa      	ldrb	r2, [r7, #7]
    1aca:	0292      	lsls	r2, r2, #10
    1acc:	4611      	mov	r1, r2
    1ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ad2:	430b      	orrs	r3, r1
    1ad4:	6013      	str	r3, [r2, #0]

   SPIM0->SSIENR = ENABLE;      
    1ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1ada:	2201      	movs	r2, #1
    1adc:	609a      	str	r2, [r3, #8]
   return true;
    1ade:	2301      	movs	r3, #1
}
    1ae0:	4618      	mov	r0, r3
    1ae2:	3710      	adds	r7, #16
    1ae4:	46bd      	mov	sp, r7
    1ae6:	bd80      	pop	{r7, pc}

00001ae8 <SSIC_Init>:
  * @param  SSIC_InitStru: pointer to a SSIC_InitInfo_Type structure that
  *         contains the configuration information for the specified SSIC peripheral.
  * @retval None
  */
void SSIC_Init(SSIC_InitInfo_Type *SSIC_InitStru)
{
    1ae8:	b590      	push	{r4, r7, lr}
    1aea:	b083      	sub	sp, #12
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
    SSIC_XipSetEnable(false);
    1af0:	2000      	movs	r0, #0
    1af2:	f000 f8ba 	bl	1c6a <SSIC_XipSetEnable>
    
    //clear all interrupter 
    SPIM0->SSIENR = DISABLE;
    1af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1afa:	2200      	movs	r2, #0
    1afc:	609a      	str	r2, [r3, #8]
    SSI_ClearInterrupt(SPIM0);
    1afe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    1b02:	f7ff fe59 	bl	17b8 <SSI_ClearInterrupt>
    SPIM0->IMR = DISABLE;
    1b06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b0a:	2200      	movs	r2, #0
    1b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    NVIC_ClearPendingIRQ(SPIM0_IRQn);
    1b0e:	2003      	movs	r0, #3
    1b10:	f7ff fe7e 	bl	1810 <NVIC_ClearPendingIRQ>
    //for(uint16_t i=0;i<500;i++);

    SPIM0->CTRLR0 = SSIC_GetControlCfg(SSIC_InitStru);
    1b14:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    1b18:	6878      	ldr	r0, [r7, #4]
    1b1a:	f7ff ff61 	bl	19e0 <SSIC_GetControlCfg>
    1b1e:	4603      	mov	r3, r0
    1b20:	6023      	str	r3, [r4, #0]
                                    
    SPIM0->CTRLR1 = SSIC_InitStru->data_frames_number<<SSIC_CTRLR1_NDF_POS;
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	89da      	ldrh	r2, [r3, #14]
    1b26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b2a:	605a      	str	r2, [r3, #4]
    SPIM0->BAUDR = SSIC_InitStru->clock_divider;
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	881a      	ldrh	r2, [r3, #0]
    1b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b34:	615a      	str	r2, [r3, #20]
    SPIM0->IMR  = SSIC_InitStru->unmask_interrupt;
    1b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    if(SSIC_InitStru->dma_rx_en)
    1b40:	687b      	ldr	r3, [r7, #4]
    1b42:	f893 3020 	ldrb.w	r3, [r3, #32]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d008      	beq.n	1b5c <SSIC_Init+0x74>
        SPIM0->DMACR |=0x01;
    1b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b54:	f043 0301 	orr.w	r3, r3, #1
    1b58:	64d3      	str	r3, [r2, #76]	; 0x4c
    1b5a:	e007      	b.n	1b6c <SSIC_Init+0x84>
    else
        SPIM0->DMACR &=~0x01;
    1b5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b66:	f023 0301 	bic.w	r3, r3, #1
    1b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
    
    if(SSIC_InitStru->dma_tx_en)
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    1b72:	2b00      	cmp	r3, #0
    1b74:	d008      	beq.n	1b88 <SSIC_Init+0xa0>
        SPIM0->DMACR |=0x02;
    1b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b80:	f043 0302 	orr.w	r3, r3, #2
    1b84:	64d3      	str	r3, [r2, #76]	; 0x4c
    1b86:	e007      	b.n	1b98 <SSIC_Init+0xb0>
    else
        SPIM0->DMACR &=~0x02;
    1b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b92:	f023 0302 	bic.w	r3, r3, #2
    1b96:	64d3      	str	r3, [r2, #76]	; 0x4c
    
    SPIM0->DMARDLR = SSIC_InitStru->dma_rx_data_level;
    1b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ba0:	6553      	str	r3, [r2, #84]	; 0x54
    SPIM0->DMATDLR = SSIC_InitStru->dma_tx_data_level;
    1ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1baa:	6513      	str	r3, [r2, #80]	; 0x50
    
    
    SPIM0->RXFTLR =   SSIC_InitStru->rx_fifo_threshold_level;
    1bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	69db      	ldr	r3, [r3, #28]
    1bb4:	61d3      	str	r3, [r2, #28]
    SPIM0->TXFTLR =  (SSIC_InitStru->tx_fifo_start_fifo_level<<15 | SSIC_InitStru->tx_fifo_threshold_level);
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	699b      	ldr	r3, [r3, #24]
    1bba:	03da      	lsls	r2, r3, #15
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	695b      	ldr	r3, [r3, #20]
    1bc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1bc4:	4313      	orrs	r3, r2
    1bc6:	618b      	str	r3, [r1, #24]
        
    SPIM0->SER = SSIC_InitStru->slaves_select;
    1bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	691b      	ldr	r3, [r3, #16]
    1bd0:	6113      	str	r3, [r2, #16]
    SPIM0->SSIENR = ENABLE;
    1bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1bd6:	2201      	movs	r2, #1
    1bd8:	609a      	str	r2, [r3, #8]

}
    1bda:	bf00      	nop
    1bdc:	370c      	adds	r7, #12
    1bde:	46bd      	mov	sp, r7
    1be0:	bd90      	pop	{r4, r7, pc}

00001be2 <SSIC_XipInit>:
  * @param  SSIC_XipInitStru: pointer to a SSIC_XIP_InitInfo_Type structure that
  *         contains the configuration information for the specified SSIC peripheral.
  * @retval None
  */
void SSIC_XipInit(SSIC_XIP_InitInfo_Type *SSIC_XipInitStru)
{   
    1be2:	b590      	push	{r4, r7, lr}
    1be4:	b083      	sub	sp, #12
    1be6:	af00      	add	r7, sp, #0
    1be8:	6078      	str	r0, [r7, #4]
    SSIC_XipSetEnable(false); 
    1bea:	2000      	movs	r0, #0
    1bec:	f000 f83d 	bl	1c6a <SSIC_XipSetEnable>

    SPIM0->SSIENR = DISABLE;
    1bf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1bf4:	2200      	movs	r2, #0
    1bf6:	609a      	str	r2, [r3, #8]
    SPIM0->SPI_CTRLR0  = SSIC_XipSetSpiControlCfg(SSIC_XipInitStru);;
    1bf8:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    1bfc:	6878      	ldr	r0, [r7, #4]
    1bfe:	f7ff fe87 	bl	1910 <SSIC_XipSetSpiControlCfg>
    1c02:	4603      	mov	r3, r0
    1c04:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4

    /**This Register is valid only when SSIC_CONCURRENT_XIP_EN is equal to 1. 
    This register is used to store the control information that the XIP 
    transfer will be using in the concurrent mode.**/
    /** Our IP  SSIC_CONCURRENT_XIP_EN ==1  **/
    SPIM0->XIP_CTRL = SSIC_XipGetControlCfg(SSIC_XipInitStru);
    1c08:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    1c0c:	6878      	ldr	r0, [r7, #4]
    1c0e:	f7ff fe19 	bl	1844 <SSIC_XipGetControlCfg>
    1c12:	4603      	mov	r3, r0
    1c14:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  
    
    SPIM0->XIP_INCR_INST = SSIC_XipInitStru->xip_inst_transfer_opcode;
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	8ada      	ldrh	r2, [r3, #22]
    1c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    SPIM0->XIP_WRAP_INST = SSIC_XipInitStru->xip_wrap_transfer_opcode;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	8b1a      	ldrh	r2, [r3, #24]
    1c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    SPIM0->XIP_SER = SSIC_XipInitStru->slaves_enbale_mask;
    1c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	69db      	ldr	r3, [r3, #28]
    1c38:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    SPIM0->XIP_CNT_TIME_OUT =SSIC_XipInitStru->xip_time_out;
    1c3c:	687b      	ldr	r3, [r7, #4]
    1c3e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    1c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c46:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   
    SPIM0->XIP_MODE_BITS = 0;
    1c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c4e:	2200      	movs	r2, #0
    1c50:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    SPIM0->SSIENR =ENABLE;
    1c54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c58:	2201      	movs	r2, #1
    1c5a:	609a      	str	r2, [r3, #8]
    
    SSIC_XipSetEnable(true); // Enable XIP
    1c5c:	2001      	movs	r0, #1
    1c5e:	f000 f804 	bl	1c6a <SSIC_XipSetEnable>
}
    1c62:	bf00      	nop
    1c64:	370c      	adds	r7, #12
    1c66:	46bd      	mov	sp, r7
    1c68:	bd90      	pop	{r4, r7, pc}

00001c6a <SSIC_XipSetEnable>:
  *
  * @param status : true (Enable)/ false (Disable)
  * @retval None
  */
void SSIC_XipSetEnable(bool status)
{
    1c6a:	b480      	push	{r7}
    1c6c:	b083      	sub	sp, #12
    1c6e:	af00      	add	r7, sp, #0
    1c70:	4603      	mov	r3, r0
    1c72:	71fb      	strb	r3, [r7, #7]
    if(status)
    1c74:	79fb      	ldrb	r3, [r7, #7]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d008      	beq.n	1c8c <SSIC_XipSetEnable+0x22>
        SCU->DEV_CONFIG |= (1<<8);
    1c7a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1c7e:	6a1b      	ldr	r3, [r3, #32]
    1c80:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1c88:	6213      	str	r3, [r2, #32]
    else
        SCU->DEV_CONFIG &= ~(1<<8);   
}
    1c8a:	e007      	b.n	1c9c <SSIC_XipSetEnable+0x32>
        SCU->DEV_CONFIG &= ~(1<<8);   
    1c8c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1c90:	6a1b      	ldr	r3, [r3, #32]
    1c92:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c9a:	6213      	str	r3, [r2, #32]
}
    1c9c:	bf00      	nop
    1c9e:	370c      	adds	r7, #12
    1ca0:	46bd      	mov	sp, r7
    1ca2:	bc80      	pop	{r7}
    1ca4:	4770      	bx	lr

00001ca6 <SSIC_XipGetEnable>:
  *
  * @param status : true (Enable)/ false (Disable)
  * @retval None
  */
bool SSIC_XipGetEnable(void)
{
    1ca6:	b480      	push	{r7}
    1ca8:	af00      	add	r7, sp, #0
   return (((SCU->DEV_CONFIG>>8)&0x01)? true :false);
    1caa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1cae:	6a1b      	ldr	r3, [r3, #32]
    1cb0:	0a1b      	lsrs	r3, r3, #8
    1cb2:	f003 0301 	and.w	r3, r3, #1
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	bf14      	ite	ne
    1cba:	2301      	movne	r3, #1
    1cbc:	2300      	moveq	r3, #0
    1cbe:	b2db      	uxtb	r3, r3
}
    1cc0:	4618      	mov	r0, r3
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <SSIC_XipClrRxOwInterrupt>:
  *
  * @param Nome
  * @retval None
  */
bool  SSIC_XipClrRxOwInterrupt(void)
{
    1cc8:	b480      	push	{r7}
    1cca:	af00      	add	r7, sp, #0
    return (SPIM0->XRXOICR&0x01);
    1ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1cd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    1cd4:	f003 0301 	and.w	r3, r3, #1
    1cd8:	2b00      	cmp	r3, #0
    1cda:	bf14      	ite	ne
    1cdc:	2301      	movne	r3, #1
    1cde:	2300      	moveq	r3, #0
    1ce0:	b2db      	uxtb	r3, r3
}
    1ce2:	4618      	mov	r0, r3
    1ce4:	46bd      	mov	sp, r7
    1ce6:	bc80      	pop	{r7}
    1ce8:	4770      	bx	lr
    1cea:	bf00      	nop

00001cec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1cec:	b480      	push	{r7}
    1cee:	b083      	sub	sp, #12
    1cf0:	af00      	add	r7, sp, #0
    1cf2:	4603      	mov	r3, r0
    1cf4:	6039      	str	r1, [r7, #0]
    1cf6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	da0b      	bge.n	1d18 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    1d00:	683b      	ldr	r3, [r7, #0]
    1d02:	b2da      	uxtb	r2, r3
    1d04:	490c      	ldr	r1, [pc, #48]	; (1d38 <NVIC_SetPriority+0x4c>)
    1d06:	79fb      	ldrb	r3, [r7, #7]
    1d08:	f003 030f 	and.w	r3, r3, #15
    1d0c:	3b04      	subs	r3, #4
    1d0e:	0152      	lsls	r2, r2, #5
    1d10:	b2d2      	uxtb	r2, r2
    1d12:	440b      	add	r3, r1
    1d14:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
    1d16:	e009      	b.n	1d2c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1d18:	683b      	ldr	r3, [r7, #0]
    1d1a:	b2da      	uxtb	r2, r3
    1d1c:	4907      	ldr	r1, [pc, #28]	; (1d3c <NVIC_SetPriority+0x50>)
    1d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1d22:	0152      	lsls	r2, r2, #5
    1d24:	b2d2      	uxtb	r2, r2
    1d26:	440b      	add	r3, r1
    1d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    1d2c:	bf00      	nop
    1d2e:	370c      	adds	r7, #12
    1d30:	46bd      	mov	sp, r7
    1d32:	bc80      	pop	{r7}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	e000ed00 	.word	0xe000ed00
    1d3c:	e000e100 	.word	0xe000e100

00001d40 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b082      	sub	sp, #8
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);           /* Reload value impossible */
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	3b01      	subs	r3, #1
    1d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1d50:	d301      	bcc.n	1d56 <SysTick_Config+0x16>
    1d52:	2301      	movs	r3, #1
    1d54:	e00f      	b.n	1d76 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                       /* set reload register */
    1d56:	4a0a      	ldr	r2, [pc, #40]	; (1d80 <SysTick_Config+0x40>)
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	3b01      	subs	r3, #1
    1d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);       /* set Priority for Systick Interrupt */
    1d5e:	2107      	movs	r1, #7
    1d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d64:	f7ff ffc2 	bl	1cec <NVIC_SetPriority>
  SysTick->VAL   = 0;                                               /* Load the SysTick Counter Value */
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <SysTick_Config+0x40>)
    1d6a:	2200      	movs	r2, #0
    1d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1d6e:	4b04      	ldr	r3, [pc, #16]	; (1d80 <SysTick_Config+0x40>)
    1d70:	2207      	movs	r2, #7
    1d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                       /* Function successful */
    1d74:	2300      	movs	r3, #0
}
    1d76:	4618      	mov	r0, r3
    1d78:	3708      	adds	r7, #8
    1d7a:	46bd      	mov	sp, r7
    1d7c:	bd80      	pop	{r7, pc}
    1d7e:	bf00      	nop
    1d80:	e000e010 	.word	0xe000e010

00001d84 <VerifyIsGo>:
void Verify_SendEndSimulation(void);


/* Get a run Case Falg*/
bool VerifyIsGo(void)
{
    1d84:	b480      	push	{r7}
    1d86:	af00      	add	r7, sp, #0
    if(VERIFY_RUN_CF)
    1d88:	4b07      	ldr	r3, [pc, #28]	; (1da8 <VerifyIsGo+0x24>)
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	b2db      	uxtb	r3, r3
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d004      	beq.n	1d9c <VerifyIsGo+0x18>
    {
        VERIFY_RUN_CF = false;
    1d92:	4b05      	ldr	r3, [pc, #20]	; (1da8 <VerifyIsGo+0x24>)
    1d94:	2200      	movs	r2, #0
    1d96:	701a      	strb	r2, [r3, #0]
        return true;
    1d98:	2301      	movs	r3, #1
    1d9a:	e000      	b.n	1d9e <VerifyIsGo+0x1a>
    }
    return false;
    1d9c:	2300      	movs	r3, #0
}
    1d9e:	4618      	mov	r0, r3
    1da0:	46bd      	mov	sp, r7
    1da2:	bc80      	pop	{r7}
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	200082fc 	.word	0x200082fc

00001dac <VerifyRunCase>:

/* Set a run Case Falg*/
void VerifyRunCase(void)
{
    1dac:	b480      	push	{r7}
    1dae:	af00      	add	r7, sp, #0
    VERIFY_RUN_CF = true ;
    1db0:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <VerifyRunCase+0x14>)
    1db2:	2201      	movs	r2, #1
    1db4:	701a      	strb	r2, [r3, #0]
}
    1db6:	bf00      	nop
    1db8:	46bd      	mov	sp, r7
    1dba:	bc80      	pop	{r7}
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop
    1dc0:	200082fc 	.word	0x200082fc

00001dc4 <verify_messageGetRunCid>:

/* Get current Case ID*/
uint32_t  verify_messageGetRunCid(void)
{
    1dc4:	b480      	push	{r7}
    1dc6:	b083      	sub	sp, #12
    1dc8:	af00      	add	r7, sp, #0
    uint32_t  cid = VERIFY_MESSGAE_RUN_CID;
    1dca:	4b04      	ldr	r3, [pc, #16]	; (1ddc <verify_messageGetRunCid+0x18>)
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	607b      	str	r3, [r7, #4]
    return cid; 
    1dd0:	687b      	ldr	r3, [r7, #4]
}
    1dd2:	4618      	mov	r0, r3
    1dd4:	370c      	adds	r7, #12
    1dd6:	46bd      	mov	sp, r7
    1dd8:	bc80      	pop	{r7}
    1dda:	4770      	bx	lr
    1ddc:	200082f4 	.word	0x200082f4

00001de0 <Verify_messageSend>:



/* Send a message to UVM*/
void Verify_messageSend(uint32_t cmd, uint32_t val)
{
    1de0:	b480      	push	{r7}
    1de2:	b083      	sub	sp, #12
    1de4:	af00      	add	r7, sp, #0
    1de6:	6078      	str	r0, [r7, #4]
    1de8:	6039      	str	r1, [r7, #0]
    SCU->SEND_DATA  = val;
    1dea:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1dee:	683b      	ldr	r3, [r7, #0]
    1df0:	63d3      	str	r3, [r2, #60]	; 0x3c
    SCU->SEND_CMD   = cmd;
    1df2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	6393      	str	r3, [r2, #56]	; 0x38
}
    1dfa:	bf00      	nop
    1dfc:	370c      	adds	r7, #12
    1dfe:	46bd      	mov	sp, r7
    1e00:	bc80      	pop	{r7}
    1e02:	4770      	bx	lr

00001e04 <Verify_FmessageSend>:

/* Send a message to UVM*/
void Verify_FmessageSend(uint32_t cmd, uint32_t val)
{
    1e04:	b480      	push	{r7}
    1e06:	b083      	sub	sp, #12
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	6039      	str	r1, [r7, #0]
    SCU->READ_DATA = val;
    1e0e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1e12:	683b      	ldr	r3, [r7, #0]
    1e14:	6453      	str	r3, [r2, #68]	; 0x44
    SCU->READ_CMD  = cmd ;
    1e16:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	6413      	str	r3, [r2, #64]	; 0x40
}
    1e1e:	bf00      	nop
    1e20:	370c      	adds	r7, #12
    1e22:	46bd      	mov	sp, r7
    1e24:	bc80      	pop	{r7}
    1e26:	4770      	bx	lr

00001e28 <Verify_messageReceive>:



/* Receive a message to UVM*/
bool Verify_messageReceive(uint32_t *cmd, uint32_t *val)
{
    1e28:	b480      	push	{r7}
    1e2a:	b083      	sub	sp, #12
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
    1e30:	6039      	str	r1, [r7, #0]
    while(SCU->READ_CMD == VERIFY_MESSGAE_CMD){};
    1e32:	bf00      	nop
    1e34:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1e3a:	4b0c      	ldr	r3, [pc, #48]	; (1e6c <Verify_messageReceive+0x44>)
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d0f8      	beq.n	1e34 <Verify_messageReceive+0xc>
    *cmd   = SCU->READ_CMD;
    1e42:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	601a      	str	r2, [r3, #0]
    *val = SCU->READ_DATA;
    1e4c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1e52:	683b      	ldr	r3, [r7, #0]
    1e54:	601a      	str	r2, [r3, #0]
    VERIFY_MESSGAE_CMD = *cmd;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	4a04      	ldr	r2, [pc, #16]	; (1e6c <Verify_messageReceive+0x44>)
    1e5c:	6013      	str	r3, [r2, #0]
    return true;
    1e5e:	2301      	movs	r3, #1
}
    1e60:	4618      	mov	r0, r3
    1e62:	370c      	adds	r7, #12
    1e64:	46bd      	mov	sp, r7
    1e66:	bc80      	pop	{r7}
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop
    1e6c:	200082f8 	.word	0x200082f8

00001e70 <Verify_messageGetRData>:



/* Receive a message to UVM*/
bool Verify_messageGetRData(uint32_t *cmd, uint32_t *val)
{
    1e70:	b480      	push	{r7}
    1e72:	b083      	sub	sp, #12
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
    1e78:	6039      	str	r1, [r7, #0]
   
    *cmd  = SCU->READ_CMD;
    1e7a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	601a      	str	r2, [r3, #0]
    *val  = SCU->READ_DATA;
    1e84:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1e8a:	683b      	ldr	r3, [r7, #0]
    1e8c:	601a      	str	r2, [r3, #0]
    return true;
    1e8e:	2301      	movs	r3, #1
}
    1e90:	4618      	mov	r0, r3
    1e92:	370c      	adds	r7, #12
    1e94:	46bd      	mov	sp, r7
    1e96:	bc80      	pop	{r7}
    1e98:	4770      	bx	lr

00001e9a <verify_messageGetReceive>:


/* Get current UVM message*/
bool verify_messageGetReceive(uint32_t *cmd, uint32_t *val)
{
    1e9a:	b480      	push	{r7}
    1e9c:	b083      	sub	sp, #12
    1e9e:	af00      	add	r7, sp, #0
    1ea0:	6078      	str	r0, [r7, #4]
    1ea2:	6039      	str	r1, [r7, #0]
    if(SCU->READ_CMD != VERIFY_MESSGAE_CMD)
    1ea4:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1eaa:	4b10      	ldr	r3, [pc, #64]	; (1eec <verify_messageGetReceive+0x52>)
    1eac:	681b      	ldr	r3, [r3, #0]
    1eae:	429a      	cmp	r2, r3
    1eb0:	d00f      	beq.n	1ed2 <verify_messageGetReceive+0x38>
    {
        *cmd    = SCU->READ_CMD;
    1eb2:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	601a      	str	r2, [r3, #0]
        *val    = SCU->READ_DATA;
    1ebc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ec2:	683b      	ldr	r3, [r7, #0]
    1ec4:	601a      	str	r2, [r3, #0]
        VERIFY_MESSGAE_CMD = *cmd;
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	4a08      	ldr	r2, [pc, #32]	; (1eec <verify_messageGetReceive+0x52>)
    1ecc:	6013      	str	r3, [r2, #0]
        return true;
    1ece:	2301      	movs	r3, #1
    1ed0:	e006      	b.n	1ee0 <verify_messageGetReceive+0x46>
    }
    else
    {   
        *cmd = 0;
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	2200      	movs	r2, #0
    1ed6:	601a      	str	r2, [r3, #0]
        *val =0;
    1ed8:	683b      	ldr	r3, [r7, #0]
    1eda:	2200      	movs	r2, #0
    1edc:	601a      	str	r2, [r3, #0]
        return false;
    1ede:	2300      	movs	r3, #0
    }
    
}
    1ee0:	4618      	mov	r0, r3
    1ee2:	370c      	adds	r7, #12
    1ee4:	46bd      	mov	sp, r7
    1ee6:	bc80      	pop	{r7}
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	200082f8 	.word	0x200082f8

00001ef0 <verify_SendRunCaseId>:


/* Contorl Run a case*/
void verify_SendRunCaseId(uint32_t Cid)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
    Verify_messageSend(BRCASE_RID,Cid);
    1ef8:	6879      	ldr	r1, [r7, #4]
    1efa:	2001      	movs	r0, #1
    1efc:	f7ff ff70 	bl	1de0 <Verify_messageSend>
    VerifyRunCase();
    1f00:	f7ff ff54 	bl	1dac <VerifyRunCase>
}
    1f04:	bf00      	nop
    1f06:	3708      	adds	r7, #8
    1f08:	46bd      	mov	sp, r7
    1f0a:	bd80      	pop	{r7, pc}

00001f0c <Verify_messageCheckRececive>:

/* Check that the run instruction is received */
bool Verify_messageCheckRececive(void)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    uint32_t cid  =0;
    1f12:	2300      	movs	r3, #0
    1f14:	607b      	str	r3, [r7, #4]
    uint32_t data =0;
    1f16:	2300      	movs	r3, #0
    1f18:	603b      	str	r3, [r7, #0]
    verify_messageGetReceive(&cid,&data);
    1f1a:	463a      	mov	r2, r7
    1f1c:	1d3b      	adds	r3, r7, #4
    1f1e:	4611      	mov	r1, r2
    1f20:	4618      	mov	r0, r3
    1f22:	f7ff ffba 	bl	1e9a <verify_messageGetReceive>
    if(cid == BRCASE_RID)
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	2b01      	cmp	r3, #1
    1f2a:	d10a      	bne.n	1f42 <Verify_messageCheckRececive+0x36>
    {
        VERIFY_MESSGAE_RUN_CID = data;
    1f2c:	683b      	ldr	r3, [r7, #0]
    1f2e:	4a07      	ldr	r2, [pc, #28]	; (1f4c <Verify_messageCheckRececive+0x40>)
    1f30:	6013      	str	r3, [r2, #0]
#ifndef BR_DUAL
        Verify_messageSend(BRCASE_RID,1);
    1f32:	2101      	movs	r1, #1
    1f34:	2001      	movs	r0, #1
    1f36:	f7ff ff53 	bl	1de0 <Verify_messageSend>
#endif 
        VerifyRunCase();
    1f3a:	f7ff ff37 	bl	1dac <VerifyRunCase>
        return true;
    1f3e:	2301      	movs	r3, #1
    1f40:	e000      	b.n	1f44 <Verify_messageCheckRececive+0x38>
    }
   return false;
    1f42:	2300      	movs	r3, #0
}
    1f44:	4618      	mov	r0, r3
    1f46:	3708      	adds	r7, #8
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	200082f4 	.word	0x200082f4

00001f50 <verify_SendCid>:

/****************************************************
Send Case ID ->UVM 
*****************************************************/
bool verify_SendCid(uint32_t cid,uint32_t *data)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b086      	sub	sp, #24
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
    1f58:	6039      	str	r1, [r7, #0]
    bool sut = true;
    1f5a:	2301      	movs	r3, #1
    1f5c:	75fb      	strb	r3, [r7, #23]
#ifndef BR_NO_UVM
    uint32_t cd=0,va=0;
    1f5e:	2300      	movs	r3, #0
    1f60:	613b      	str	r3, [r7, #16]
    1f62:	2300      	movs	r3, #0
    1f64:	60fb      	str	r3, [r7, #12]
      
    Verify_messageSend(BRCASE_CID,cid);
    1f66:	6879      	ldr	r1, [r7, #4]
    1f68:	2002      	movs	r0, #2
    1f6a:	f7ff ff39 	bl	1de0 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    1f6e:	f107 020c 	add.w	r2, r7, #12
    1f72:	f107 0310 	add.w	r3, r7, #16
    1f76:	4611      	mov	r1, r2
    1f78:	4618      	mov	r0, r3
    1f7a:	f7ff ff55 	bl	1e28 <Verify_messageReceive>
    if(!(cd == BRCASE_CID && va != 0))
    1f7e:	693b      	ldr	r3, [r7, #16]
    1f80:	2b02      	cmp	r3, #2
    1f82:	d102      	bne.n	1f8a <verify_SendCid+0x3a>
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d101      	bne.n	1f8e <verify_SendCid+0x3e>
        sut =false;
    1f8a:	2300      	movs	r3, #0
    1f8c:	75fb      	strb	r3, [r7, #23]
    *data = va;
    1f8e:	68fa      	ldr	r2, [r7, #12]
    1f90:	683b      	ldr	r3, [r7, #0]
    1f92:	601a      	str	r2, [r3, #0]
#endif  
    return sut;   
    1f94:	7dfb      	ldrb	r3, [r7, #23]
  
}
    1f96:	4618      	mov	r0, r3
    1f98:	3718      	adds	r7, #24
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}

00001f9e <verify_step_SendCheckData>:

/*
Step by step to verify,CPU Send and UVM Check
*/
bool verify_step_SendCheckData(uint32_t step,func_handle func)
{
    1f9e:	b580      	push	{r7, lr}
    1fa0:	b086      	sub	sp, #24
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	6078      	str	r0, [r7, #4]
    1fa6:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    1fa8:	2300      	movs	r3, #0
    1faa:	613b      	str	r3, [r7, #16]
    1fac:	2300      	movs	r3, #0
    1fae:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    1fb0:	2301      	movs	r3, #1
    1fb2:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(step,0);
    1fb4:	2100      	movs	r1, #0
    1fb6:	6878      	ldr	r0, [r7, #4]
    1fb8:	f7ff ff12 	bl	1de0 <Verify_messageSend>
    func();
    1fbc:	683b      	ldr	r3, [r7, #0]
    1fbe:	4798      	blx	r3
    Verify_messageReceive(&cd,&va);
    1fc0:	f107 020c 	add.w	r2, r7, #12
    1fc4:	f107 0310 	add.w	r3, r7, #16
    1fc8:	4611      	mov	r1, r2
    1fca:	4618      	mov	r0, r3
    1fcc:	f7ff ff2c 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    1fd0:	693b      	ldr	r3, [r7, #16]
    1fd2:	687a      	ldr	r2, [r7, #4]
    1fd4:	429a      	cmp	r2, r3
    1fd6:	d102      	bne.n	1fde <verify_step_SendCheckData+0x40>
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	2b01      	cmp	r3, #1
    1fdc:	d001      	beq.n	1fe2 <verify_step_SendCheckData+0x44>
        sut =false;
    1fde:	2300      	movs	r3, #0
    1fe0:	75fb      	strb	r3, [r7, #23]
    
    return sut;
    1fe2:	7dfb      	ldrb	r3, [r7, #23]
}
    1fe4:	4618      	mov	r0, r3
    1fe6:	3718      	adds	r7, #24
    1fe8:	46bd      	mov	sp, r7
    1fea:	bd80      	pop	{r7, pc}

00001fec <verify_step_SendCheckOneData>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneData(uint32_t step,volatile uint32_t *reg,uint32_t val)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b088      	sub	sp, #32
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	60f8      	str	r0, [r7, #12]
    1ff4:	60b9      	str	r1, [r7, #8]
    1ff6:	607a      	str	r2, [r7, #4]
    uint32_t cd=0,va=0;
    1ff8:	2300      	movs	r3, #0
    1ffa:	61bb      	str	r3, [r7, #24]
    1ffc:	2300      	movs	r3, #0
    1ffe:	617b      	str	r3, [r7, #20]
    bool sut = true;
    2000:	2301      	movs	r3, #1
    2002:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	3b20      	subs	r3, #32
    2008:	b29b      	uxth	r3, r3
    200a:	4619      	mov	r1, r3
    200c:	480f      	ldr	r0, [pc, #60]	; (204c <Heap_Size+0x4c>)
    200e:	f7fe fa6b 	bl	4e8 <cm_printf>
    *reg = val;
    2012:	68bb      	ldr	r3, [r7, #8]
    2014:	687a      	ldr	r2, [r7, #4]
    2016:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    2018:	6879      	ldr	r1, [r7, #4]
    201a:	68f8      	ldr	r0, [r7, #12]
    201c:	f7ff fee0 	bl	1de0 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    2020:	f107 0214 	add.w	r2, r7, #20
    2024:	f107 0318 	add.w	r3, r7, #24
    2028:	4611      	mov	r1, r2
    202a:	4618      	mov	r0, r3
    202c:	f7ff fefc 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    2030:	69bb      	ldr	r3, [r7, #24]
    2032:	68fa      	ldr	r2, [r7, #12]
    2034:	429a      	cmp	r2, r3
    2036:	d102      	bne.n	203e <Heap_Size+0x3e>
    2038:	697b      	ldr	r3, [r7, #20]
    203a:	2b01      	cmp	r3, #1
    203c:	d001      	beq.n	2042 <Heap_Size+0x42>
        sut =false;
    203e:	2300      	movs	r3, #0
    2040:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    2042:	7ffb      	ldrb	r3, [r7, #31]
}
    2044:	4618      	mov	r0, r3
    2046:	3720      	adds	r7, #32
    2048:	46bd      	mov	sp, r7
    204a:	bd80      	pop	{r7, pc}
    204c:	00003454 	.word	0x00003454

00002050 <verify_step_SendCheckOneDataDma>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneDataDma(uint32_t step,volatile uint32_t *reg,uint32_t val,bool rt)
{
    2050:	b580      	push	{r7, lr}
    2052:	b088      	sub	sp, #32
    2054:	af00      	add	r7, sp, #0
    2056:	60f8      	str	r0, [r7, #12]
    2058:	60b9      	str	r1, [r7, #8]
    205a:	607a      	str	r2, [r7, #4]
    205c:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    205e:	2300      	movs	r3, #0
    2060:	61bb      	str	r3, [r7, #24]
    2062:	2300      	movs	r3, #0
    2064:	617b      	str	r3, [r7, #20]
    bool sut = true;
    2066:	2301      	movs	r3, #1
    2068:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    206a:	68fb      	ldr	r3, [r7, #12]
    206c:	3b20      	subs	r3, #32
    206e:	b29b      	uxth	r3, r3
    2070:	4619      	mov	r1, r3
    2072:	4814      	ldr	r0, [pc, #80]	; (20c4 <verify_step_SendCheckOneDataDma+0x74>)
    2074:	f7fe fa38 	bl	4e8 <cm_printf>
    if(rt)
    2078:	78fb      	ldrb	r3, [r7, #3]
    207a:	2b00      	cmp	r3, #0
    207c:	d005      	beq.n	208a <verify_step_SendCheckOneDataDma+0x3a>
        *reg = (val|0xff00);
    207e:	687b      	ldr	r3, [r7, #4]
    2080:	f443 427f 	orr.w	r2, r3, #65280	; 0xff00
    2084:	68bb      	ldr	r3, [r7, #8]
    2086:	601a      	str	r2, [r3, #0]
    2088:	e002      	b.n	2090 <verify_step_SendCheckOneDataDma+0x40>
    else
        *reg = val;
    208a:	68bb      	ldr	r3, [r7, #8]
    208c:	687a      	ldr	r2, [r7, #4]
    208e:	601a      	str	r2, [r3, #0]
    
    Verify_messageSend(step,val);
    2090:	6879      	ldr	r1, [r7, #4]
    2092:	68f8      	ldr	r0, [r7, #12]
    2094:	f7ff fea4 	bl	1de0 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    2098:	f107 0214 	add.w	r2, r7, #20
    209c:	f107 0318 	add.w	r3, r7, #24
    20a0:	4611      	mov	r1, r2
    20a2:	4618      	mov	r0, r3
    20a4:	f7ff fec0 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    20a8:	69bb      	ldr	r3, [r7, #24]
    20aa:	68fa      	ldr	r2, [r7, #12]
    20ac:	429a      	cmp	r2, r3
    20ae:	d102      	bne.n	20b6 <verify_step_SendCheckOneDataDma+0x66>
    20b0:	697b      	ldr	r3, [r7, #20]
    20b2:	2b01      	cmp	r3, #1
    20b4:	d001      	beq.n	20ba <verify_step_SendCheckOneDataDma+0x6a>
        sut =false;
    20b6:	2300      	movs	r3, #0
    20b8:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    20ba:	7ffb      	ldrb	r3, [r7, #31]
}
    20bc:	4618      	mov	r0, r3
    20be:	3720      	adds	r7, #32
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	00003454 	.word	0x00003454

000020c8 <verify_step_SendCheckOneDataLog>:

bool verify_step_SendCheckOneDataLog(uint32_t step,volatile uint32_t *reg,uint32_t val,bool log)
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b088      	sub	sp, #32
    20cc:	af00      	add	r7, sp, #0
    20ce:	60f8      	str	r0, [r7, #12]
    20d0:	60b9      	str	r1, [r7, #8]
    20d2:	607a      	str	r2, [r7, #4]
    20d4:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    20d6:	2300      	movs	r3, #0
    20d8:	61bb      	str	r3, [r7, #24]
    20da:	2300      	movs	r3, #0
    20dc:	617b      	str	r3, [r7, #20]
    bool sut = true;
    20de:	2301      	movs	r3, #1
    20e0:	77fb      	strb	r3, [r7, #31]
    
    if(log)
    20e2:	78fb      	ldrb	r3, [r7, #3]
    20e4:	2b00      	cmp	r3, #0
    20e6:	d006      	beq.n	20f6 <verify_step_SendCheckOneDataLog+0x2e>
        mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    20e8:	68fb      	ldr	r3, [r7, #12]
    20ea:	3b20      	subs	r3, #32
    20ec:	b29b      	uxth	r3, r3
    20ee:	4619      	mov	r1, r3
    20f0:	480f      	ldr	r0, [pc, #60]	; (2130 <verify_step_SendCheckOneDataLog+0x68>)
    20f2:	f7fe f9f9 	bl	4e8 <cm_printf>
    *reg = val;
    20f6:	68bb      	ldr	r3, [r7, #8]
    20f8:	687a      	ldr	r2, [r7, #4]
    20fa:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    20fc:	6879      	ldr	r1, [r7, #4]
    20fe:	68f8      	ldr	r0, [r7, #12]
    2100:	f7ff fe6e 	bl	1de0 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    2104:	f107 0214 	add.w	r2, r7, #20
    2108:	f107 0318 	add.w	r3, r7, #24
    210c:	4611      	mov	r1, r2
    210e:	4618      	mov	r0, r3
    2110:	f7ff fe8a 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    2114:	69bb      	ldr	r3, [r7, #24]
    2116:	68fa      	ldr	r2, [r7, #12]
    2118:	429a      	cmp	r2, r3
    211a:	d102      	bne.n	2122 <verify_step_SendCheckOneDataLog+0x5a>
    211c:	697b      	ldr	r3, [r7, #20]
    211e:	2b01      	cmp	r3, #1
    2120:	d001      	beq.n	2126 <verify_step_SendCheckOneDataLog+0x5e>
        sut =false;
    2122:	2300      	movs	r3, #0
    2124:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    2126:	7ffb      	ldrb	r3, [r7, #31]
}
    2128:	4618      	mov	r0, r3
    212a:	3720      	adds	r7, #32
    212c:	46bd      	mov	sp, r7
    212e:	bd80      	pop	{r7, pc}
    2130:	00003454 	.word	0x00003454

00002134 <verify_step_ReceiveCheckData>:

/*
Step by step to verify, UVM Send and CPU Check
*/
bool verify_step_ReceiveCheckData(uint32_t step,func_handle func)
{
    2134:	b580      	push	{r7, lr}
    2136:	b086      	sub	sp, #24
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
    213c:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    213e:	2300      	movs	r3, #0
    2140:	613b      	str	r3, [r7, #16]
    2142:	2300      	movs	r3, #0
    2144:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    2146:	2301      	movs	r3, #1
    2148:	75fb      	strb	r3, [r7, #23]
    Verify_messageReceive(&cd,&va);
    214a:	f107 020c 	add.w	r2, r7, #12
    214e:	f107 0310 	add.w	r3, r7, #16
    2152:	4611      	mov	r1, r2
    2154:	4618      	mov	r0, r3
    2156:	f7ff fe67 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == 0))
    215a:	693b      	ldr	r3, [r7, #16]
    215c:	687a      	ldr	r2, [r7, #4]
    215e:	429a      	cmp	r2, r3
    2160:	d102      	bne.n	2168 <verify_step_ReceiveCheckData+0x34>
    2162:	68fb      	ldr	r3, [r7, #12]
    2164:	2b00      	cmp	r3, #0
    2166:	d002      	beq.n	216e <verify_step_ReceiveCheckData+0x3a>
        sut =false;
    2168:	2300      	movs	r3, #0
    216a:	75fb      	strb	r3, [r7, #23]
    216c:	e009      	b.n	2182 <verify_step_ReceiveCheckData+0x4e>
    else
    {
        if(!func())
    216e:	683b      	ldr	r3, [r7, #0]
    2170:	4798      	blx	r3
    2172:	4603      	mov	r3, r0
    2174:	f083 0301 	eor.w	r3, r3, #1
    2178:	b2db      	uxtb	r3, r3
    217a:	2b00      	cmp	r3, #0
    217c:	d001      	beq.n	2182 <verify_step_ReceiveCheckData+0x4e>
            sut =false;
    217e:	2300      	movs	r3, #0
    2180:	75fb      	strb	r3, [r7, #23]
    }
    Verify_messageSend(step,sut);
    2182:	7dfb      	ldrb	r3, [r7, #23]
    2184:	4619      	mov	r1, r3
    2186:	6878      	ldr	r0, [r7, #4]
    2188:	f7ff fe2a 	bl	1de0 <Verify_messageSend>
    
    return sut;
    218c:	7dfb      	ldrb	r3, [r7, #23]
}
    218e:	4618      	mov	r0, r3
    2190:	3718      	adds	r7, #24
    2192:	46bd      	mov	sp, r7
    2194:	bd80      	pop	{r7, pc}

00002196 <verify_step_ReceiveCheckOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_ReceiveCheckOneData(uint32_t step,volatile uint32_t *reg)
{
    2196:	b580      	push	{r7, lr}
    2198:	b086      	sub	sp, #24
    219a:	af00      	add	r7, sp, #0
    219c:	6078      	str	r0, [r7, #4]
    219e:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    21a0:	2300      	movs	r3, #0
    21a2:	613b      	str	r3, [r7, #16]
    21a4:	2300      	movs	r3, #0
    21a6:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    21a8:	2301      	movs	r3, #1
    21aa:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	3b20      	subs	r3, #32
    21b0:	b29b      	uxth	r3, r3
    21b2:	4619      	mov	r1, r3
    21b4:	480f      	ldr	r0, [pc, #60]	; (21f4 <verify_step_ReceiveCheckOneData+0x5e>)
    21b6:	f7fe f997 	bl	4e8 <cm_printf>
    Verify_messageReceive(&cd,&va);
    21ba:	f107 020c 	add.w	r2, r7, #12
    21be:	f107 0310 	add.w	r3, r7, #16
    21c2:	4611      	mov	r1, r2
    21c4:	4618      	mov	r0, r3
    21c6:	f7ff fe2f 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    21ca:	693b      	ldr	r3, [r7, #16]
    21cc:	687a      	ldr	r2, [r7, #4]
    21ce:	429a      	cmp	r2, r3
    21d0:	d104      	bne.n	21dc <verify_step_ReceiveCheckOneData+0x46>
    21d2:	683b      	ldr	r3, [r7, #0]
    21d4:	681a      	ldr	r2, [r3, #0]
    21d6:	68fb      	ldr	r3, [r7, #12]
    21d8:	429a      	cmp	r2, r3
    21da:	d001      	beq.n	21e0 <verify_step_ReceiveCheckOneData+0x4a>
        sut =false;
    21dc:	2300      	movs	r3, #0
    21de:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    21e0:	7dfb      	ldrb	r3, [r7, #23]
    21e2:	4619      	mov	r1, r3
    21e4:	6878      	ldr	r0, [r7, #4]
    21e6:	f7ff fdfb 	bl	1de0 <Verify_messageSend>
    
    return sut;
    21ea:	7dfb      	ldrb	r3, [r7, #23]
}
    21ec:	4618      	mov	r0, r3
    21ee:	3718      	adds	r7, #24
    21f0:	46bd      	mov	sp, r7
    21f2:	bd80      	pop	{r7, pc}
    21f4:	00003464 	.word	0x00003464

000021f8 <verify_step_ReceiveCheckOneDataLog>:
bool verify_step_ReceiveCheckOneDataLog(uint32_t step,volatile uint32_t *reg,bool log)
{
    21f8:	b580      	push	{r7, lr}
    21fa:	b088      	sub	sp, #32
    21fc:	af00      	add	r7, sp, #0
    21fe:	60f8      	str	r0, [r7, #12]
    2200:	60b9      	str	r1, [r7, #8]
    2202:	4613      	mov	r3, r2
    2204:	71fb      	strb	r3, [r7, #7]
    uint32_t cd=0,va=0;
    2206:	2300      	movs	r3, #0
    2208:	61bb      	str	r3, [r7, #24]
    220a:	2300      	movs	r3, #0
    220c:	617b      	str	r3, [r7, #20]
    bool sut = true;
    220e:	2301      	movs	r3, #1
    2210:	77fb      	strb	r3, [r7, #31]
    if(log)
    2212:	79fb      	ldrb	r3, [r7, #7]
    2214:	2b00      	cmp	r3, #0
    2216:	d006      	beq.n	2226 <verify_step_ReceiveCheckOneDataLog+0x2e>
        mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	3b20      	subs	r3, #32
    221c:	b29b      	uxth	r3, r3
    221e:	4619      	mov	r1, r3
    2220:	480f      	ldr	r0, [pc, #60]	; (2260 <verify_step_ReceiveCheckOneDataLog+0x68>)
    2222:	f7fe f961 	bl	4e8 <cm_printf>
    
    Verify_messageReceive(&cd,&va);
    2226:	f107 0214 	add.w	r2, r7, #20
    222a:	f107 0318 	add.w	r3, r7, #24
    222e:	4611      	mov	r1, r2
    2230:	4618      	mov	r0, r3
    2232:	f7ff fdf9 	bl	1e28 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    2236:	69bb      	ldr	r3, [r7, #24]
    2238:	68fa      	ldr	r2, [r7, #12]
    223a:	429a      	cmp	r2, r3
    223c:	d104      	bne.n	2248 <verify_step_ReceiveCheckOneDataLog+0x50>
    223e:	68bb      	ldr	r3, [r7, #8]
    2240:	681a      	ldr	r2, [r3, #0]
    2242:	697b      	ldr	r3, [r7, #20]
    2244:	429a      	cmp	r2, r3
    2246:	d001      	beq.n	224c <verify_step_ReceiveCheckOneDataLog+0x54>
        sut =false;
    2248:	2300      	movs	r3, #0
    224a:	77fb      	strb	r3, [r7, #31]
    Verify_messageSend(step,sut);
    224c:	7ffb      	ldrb	r3, [r7, #31]
    224e:	4619      	mov	r1, r3
    2250:	68f8      	ldr	r0, [r7, #12]
    2252:	f7ff fdc5 	bl	1de0 <Verify_messageSend>
    
    return sut;
    2256:	7ffb      	ldrb	r3, [r7, #31]
}
    2258:	4618      	mov	r0, r3
    225a:	3720      	adds	r7, #32
    225c:	46bd      	mov	sp, r7
    225e:	bd80      	pop	{r7, pc}
    2260:	00003464 	.word	0x00003464

00002264 <verify_step_CheckReceiveOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_CheckReceiveOneData(uint32_t step,uint32_t val,volatile uint32_t *reg)
{
    2264:	b580      	push	{r7, lr}
    2266:	b086      	sub	sp, #24
    2268:	af00      	add	r7, sp, #0
    226a:	60f8      	str	r0, [r7, #12]
    226c:	60b9      	str	r1, [r7, #8]
    226e:	607a      	str	r2, [r7, #4]
    bool sut = true;
    2270:	2301      	movs	r3, #1
    2272:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    2274:	68fb      	ldr	r3, [r7, #12]
    2276:	3b20      	subs	r3, #32
    2278:	b29b      	uxth	r3, r3
    227a:	4619      	mov	r1, r3
    227c:	4809      	ldr	r0, [pc, #36]	; (22a4 <verify_step_CheckReceiveOneData+0x40>)
    227e:	f7fe f933 	bl	4e8 <cm_printf>
    if(!(val == *reg))
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	68ba      	ldr	r2, [r7, #8]
    2288:	429a      	cmp	r2, r3
    228a:	d001      	beq.n	2290 <verify_step_CheckReceiveOneData+0x2c>
        sut =false;
    228c:	2300      	movs	r3, #0
    228e:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    2290:	7dfb      	ldrb	r3, [r7, #23]
    2292:	4619      	mov	r1, r3
    2294:	68f8      	ldr	r0, [r7, #12]
    2296:	f7ff fda3 	bl	1de0 <Verify_messageSend>
    return sut;
    229a:	7dfb      	ldrb	r3, [r7, #23]
}
    229c:	4618      	mov	r0, r3
    229e:	3718      	adds	r7, #24
    22a0:	46bd      	mov	sp, r7
    22a2:	bd80      	pop	{r7, pc}
    22a4:	00003464 	.word	0x00003464

000022a8 <verify_step_CheckReceiveOneDataLog>:
bool verify_step_CheckReceiveOneDataLog(uint32_t step,uint32_t val,volatile uint32_t *reg,bool log)
{
    22a8:	b580      	push	{r7, lr}
    22aa:	b086      	sub	sp, #24
    22ac:	af00      	add	r7, sp, #0
    22ae:	60f8      	str	r0, [r7, #12]
    22b0:	60b9      	str	r1, [r7, #8]
    22b2:	607a      	str	r2, [r7, #4]
    22b4:	70fb      	strb	r3, [r7, #3]
    bool sut = true;
    22b6:	2301      	movs	r3, #1
    22b8:	75fb      	strb	r3, [r7, #23]
    if(log)
    22ba:	78fb      	ldrb	r3, [r7, #3]
    22bc:	2b00      	cmp	r3, #0
    22be:	d008      	beq.n	22d2 <verify_step_CheckReceiveOneDataLog+0x2a>
        mgeprf("Setp %d Receive [%X]\r\n",(step-0x20)&0xffff,*reg);
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	3b20      	subs	r3, #32
    22c4:	b299      	uxth	r1, r3
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	681b      	ldr	r3, [r3, #0]
    22ca:	461a      	mov	r2, r3
    22cc:	4809      	ldr	r0, [pc, #36]	; (22f4 <verify_step_CheckReceiveOneDataLog+0x4c>)
    22ce:	f7fe f90b 	bl	4e8 <cm_printf>
    
    if(!(val == *reg))
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	68ba      	ldr	r2, [r7, #8]
    22d8:	429a      	cmp	r2, r3
    22da:	d001      	beq.n	22e0 <verify_step_CheckReceiveOneDataLog+0x38>
        sut =false;
    22dc:	2300      	movs	r3, #0
    22de:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    22e0:	7dfb      	ldrb	r3, [r7, #23]
    22e2:	4619      	mov	r1, r3
    22e4:	68f8      	ldr	r0, [r7, #12]
    22e6:	f7ff fd7b 	bl	1de0 <Verify_messageSend>
    return sut;
    22ea:	7dfb      	ldrb	r3, [r7, #23]
}
    22ec:	4618      	mov	r0, r3
    22ee:	3718      	adds	r7, #24
    22f0:	46bd      	mov	sp, r7
    22f2:	bd80      	pop	{r7, pc}
    22f4:	00003478 	.word	0x00003478

000022f8 <Verify_SendCResult>:

#ifndef ONLY_NO_UVM
/*Send Case Verify Result*/
bool Verify_SendCResult(uint32_t cmd, uint32_t val)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	b086      	sub	sp, #24
    22fc:	af00      	add	r7, sp, #0
    22fe:	6078      	str	r0, [r7, #4]
    2300:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    2302:	2300      	movs	r3, #0
    2304:	613b      	str	r3, [r7, #16]
    2306:	2300      	movs	r3, #0
    2308:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    230a:	2301      	movs	r3, #1
    230c:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    230e:	6839      	ldr	r1, [r7, #0]
    2310:	6878      	ldr	r0, [r7, #4]
    2312:	f7ff fd65 	bl	1de0 <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    2316:	f107 020c 	add.w	r2, r7, #12
    231a:	f107 0310 	add.w	r3, r7, #16
    231e:	4611      	mov	r1, r2
    2320:	4618      	mov	r0, r3
    2322:	f7ff fd81 	bl	1e28 <Verify_messageReceive>
    if(!(cd == cmd && va == 1))
    2326:	693b      	ldr	r3, [r7, #16]
    2328:	687a      	ldr	r2, [r7, #4]
    232a:	429a      	cmp	r2, r3
    232c:	d102      	bne.n	2334 <Verify_SendCResult+0x3c>
    232e:	68fb      	ldr	r3, [r7, #12]
    2330:	2b01      	cmp	r3, #1
    2332:	d001      	beq.n	2338 <Verify_SendCResult+0x40>
        sut =false;
    2334:	2300      	movs	r3, #0
    2336:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    2338:	693b      	ldr	r3, [r7, #16]
    233a:	2b03      	cmp	r3, #3
    233c:	d104      	bne.n	2348 <Verify_SendCResult+0x50>
    233e:	68fb      	ldr	r3, [r7, #12]
    2340:	2b01      	cmp	r3, #1
    2342:	d101      	bne.n	2348 <Verify_SendCResult+0x50>
        Verify_SendEndSimulation();
    2344:	f000 f850 	bl	23e8 <Verify_SendEndSimulation>
    
    return sut;
    2348:	7dfb      	ldrb	r3, [r7, #23]
}
    234a:	4618      	mov	r0, r3
    234c:	3718      	adds	r7, #24
    234e:	46bd      	mov	sp, r7
    2350:	bd80      	pop	{r7, pc}

00002352 <Verify_SendCResultBack>:
}

#endif

bool Verify_SendCResultBack(uint32_t cmd, uint32_t val)
{
    2352:	b580      	push	{r7, lr}
    2354:	b086      	sub	sp, #24
    2356:	af00      	add	r7, sp, #0
    2358:	6078      	str	r0, [r7, #4]
    235a:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    235c:	2300      	movs	r3, #0
    235e:	613b      	str	r3, [r7, #16]
    2360:	2300      	movs	r3, #0
    2362:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    2364:	2301      	movs	r3, #1
    2366:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    2368:	6839      	ldr	r1, [r7, #0]
    236a:	6878      	ldr	r0, [r7, #4]
    236c:	f7ff fd38 	bl	1de0 <Verify_messageSend>
	
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    2370:	e006      	b.n	2380 <Verify_SendCResultBack+0x2e>
		{
			mgeprf("SCU RCMD[%X] \n",SCU->READ_CMD);
    2372:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    2376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2378:	4619      	mov	r1, r3
    237a:	4818      	ldr	r0, [pc, #96]	; (23dc <Verify_SendCResultBack+0x8a>)
    237c:	f7fe f8b4 	bl	4e8 <cm_printf>
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    2380:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    2384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2386:	4b16      	ldr	r3, [pc, #88]	; (23e0 <Verify_SendCResultBack+0x8e>)
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	429a      	cmp	r2, r3
    238c:	d0f1      	beq.n	2372 <Verify_SendCResultBack+0x20>
		};
		cd   = SCU->READ_CMD;
    238e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    2392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2394:	613b      	str	r3, [r7, #16]
		va = SCU->READ_DATA;
    2396:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    239c:	60fb      	str	r3, [r7, #12]
		mgeprf("SCU cd:[%X],va[%X]\n",cd,va);
    239e:	68fa      	ldr	r2, [r7, #12]
    23a0:	6939      	ldr	r1, [r7, #16]
    23a2:	4810      	ldr	r0, [pc, #64]	; (23e4 <Verify_SendCResultBack+0x92>)
    23a4:	f7fe f8a0 	bl	4e8 <cm_printf>
		VERIFY_MESSGAE_CMD = cd;	
    23a8:	4a0d      	ldr	r2, [pc, #52]	; (23e0 <Verify_SendCResultBack+0x8e>)
    23aa:	693b      	ldr	r3, [r7, #16]
    23ac:	6013      	str	r3, [r2, #0]
    if(!(cd == cmd && va == 1))
    23ae:	693a      	ldr	r2, [r7, #16]
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	429a      	cmp	r2, r3
    23b4:	d102      	bne.n	23bc <Verify_SendCResultBack+0x6a>
    23b6:	68fb      	ldr	r3, [r7, #12]
    23b8:	2b01      	cmp	r3, #1
    23ba:	d001      	beq.n	23c0 <Verify_SendCResultBack+0x6e>
        sut =false;
    23bc:	2300      	movs	r3, #0
    23be:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    23c0:	693b      	ldr	r3, [r7, #16]
    23c2:	2b03      	cmp	r3, #3
    23c4:	d104      	bne.n	23d0 <Verify_SendCResultBack+0x7e>
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	2b01      	cmp	r3, #1
    23ca:	d101      	bne.n	23d0 <Verify_SendCResultBack+0x7e>
        Verify_SendEndSimulation();
    23cc:	f000 f80c 	bl	23e8 <Verify_SendEndSimulation>
    
    return sut;
    23d0:	7dfb      	ldrb	r3, [r7, #23]
}
    23d2:	4618      	mov	r0, r3
    23d4:	3718      	adds	r7, #24
    23d6:	46bd      	mov	sp, r7
    23d8:	bd80      	pop	{r7, pc}
    23da:	bf00      	nop
    23dc:	00003490 	.word	0x00003490
    23e0:	200082f8 	.word	0x200082f8
    23e4:	000034a0 	.word	0x000034a0

000023e8 <Verify_SendEndSimulation>:


void Verify_SendEndSimulation(void)
{
    23e8:	b480      	push	{r7}
    23ea:	af00      	add	r7, sp, #0
    //UART_WriteByte(UART0,0x04);
    //while(1);
}
    23ec:	bf00      	nop
    23ee:	46bd      	mov	sp, r7
    23f0:	bc80      	pop	{r7}
    23f2:	4770      	bx	lr

000023f4 <Verrify_SendPinConnect>:



void Verrify_SendPinConnect(MessagaConnectEn_Type Mce)
{
    23f4:	b480      	push	{r7}
    23f6:	b083      	sub	sp, #12
    23f8:	af00      	add	r7, sp, #0
    23fa:	4603      	mov	r3, r0
    23fc:	80fb      	strh	r3, [r7, #6]
    SCU->SEND_DATA = Mce;
    23fe:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    2402:	88fb      	ldrh	r3, [r7, #6]
    2404:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    2406:	bf00      	nop
    2408:	370c      	adds	r7, #12
    240a:	46bd      	mov	sp, r7
    240c:	bc80      	pop	{r7}
    240e:	4770      	bx	lr

00002410 <Verrify_SendPinCon>:

void Verrify_SendPinCon(uint32_t xxx)
{
    2410:	b480      	push	{r7}
    2412:	b083      	sub	sp, #12
    2414:	af00      	add	r7, sp, #0
    2416:	6078      	str	r0, [r7, #4]
    SCU->SEND_DATA = xxx;
    2418:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    2420:	bf00      	nop
    2422:	370c      	adds	r7, #12
    2424:	46bd      	mov	sp, r7
    2426:	bc80      	pop	{r7}
    2428:	4770      	bx	lr

0000242a <MCU_GetTickCount>:

//##########################################################
static unsigned long g_u32TimerMsCnt = 0;

unsigned long MCU_GetTickCount(void)
{
    242a:	b480      	push	{r7}
    242c:	af00      	add	r7, sp, #0
    return g_u32TimerMsCnt;
    242e:	4b03      	ldr	r3, [pc, #12]	; (243c <MCU_GetTickCount+0x12>)
    2430:	681b      	ldr	r3, [r3, #0]
}
    2432:	4618      	mov	r0, r3
    2434:	46bd      	mov	sp, r7
    2436:	bc80      	pop	{r7}
    2438:	4770      	bx	lr
    243a:	bf00      	nop
    243c:	20008300 	.word	0x20008300

00002440 <SysTick_Handler>:
#ifndef BR_FPGA
void SysTick_Handler(void)
{
    2440:	b480      	push	{r7}
    2442:	af00      	add	r7, sp, #0
  g_u32TimerMsCnt++;
    2444:	4b04      	ldr	r3, [pc, #16]	; (2458 <SysTick_Handler+0x18>)
    2446:	681b      	ldr	r3, [r3, #0]
    2448:	3301      	adds	r3, #1
    244a:	4a03      	ldr	r2, [pc, #12]	; (2458 <SysTick_Handler+0x18>)
    244c:	6013      	str	r3, [r2, #0]
}
    244e:	bf00      	nop
    2450:	46bd      	mov	sp, r7
    2452:	bc80      	pop	{r7}
    2454:	4770      	bx	lr
    2456:	bf00      	nop
    2458:	20008300 	.word	0x20008300

0000245c <MCU_Sleep>:
#endif
void MCU_Sleep(unsigned int ms)
{
    245c:	b580      	push	{r7, lr}
    245e:	b084      	sub	sp, #16
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
#ifndef BR_FPGA
    unsigned long dest_time = ms + MCU_GetTickCount();
    2464:	f7ff ffe1 	bl	242a <MCU_GetTickCount>
    2468:	4602      	mov	r2, r0
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	4413      	add	r3, r2
    246e:	60fb      	str	r3, [r7, #12]
    while (MCU_GetTickCount() <= dest_time);
    2470:	bf00      	nop
    2472:	f7ff ffda 	bl	242a <MCU_GetTickCount>
    2476:	4602      	mov	r2, r0
    2478:	68fb      	ldr	r3, [r7, #12]
    247a:	4293      	cmp	r3, r2
    247c:	d2f9      	bcs.n	2472 <MCU_Sleep+0x16>
#endif
}
    247e:	bf00      	nop
    2480:	3710      	adds	r7, #16
    2482:	46bd      	mov	sp, r7
    2484:	bd80      	pop	{r7, pc}

00002486 <sysTimeUpdataClk>:
void sysTimeUpdataClk(uint32_t clk)
{
    2486:	b580      	push	{r7, lr}
    2488:	b082      	sub	sp, #8
    248a:	af00      	add	r7, sp, #0
    248c:	6078      	str	r0, [r7, #4]
    #ifndef BR_FPGA
    SysTick_Config(clk/1000);
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	4a05      	ldr	r2, [pc, #20]	; (24a8 <sysTimeUpdataClk+0x22>)
    2492:	fba2 2303 	umull	r2, r3, r2, r3
    2496:	099b      	lsrs	r3, r3, #6
    2498:	4618      	mov	r0, r3
    249a:	f7ff fc51 	bl	1d40 <SysTick_Config>
    #endif
}
    249e:	bf00      	nop
    24a0:	3708      	adds	r7, #8
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	10624dd3 	.word	0x10624dd3

000024ac <LOGUartSel>:
//#define logUart UART0
UART_TypeDef *logUart = UART0;


void  LOGUartSel(UART_TypeDef *Ux)
{
    24ac:	b480      	push	{r7}
    24ae:	b083      	sub	sp, #12
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
    logUart = Ux;
    24b4:	4a03      	ldr	r2, [pc, #12]	; (24c4 <LOGUartSel+0x18>)
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	6013      	str	r3, [r2, #0]
}
    24ba:	bf00      	nop
    24bc:	370c      	adds	r7, #12
    24be:	46bd      	mov	sp, r7
    24c0:	bc80      	pop	{r7}
    24c2:	4770      	bx	lr
    24c4:	20008008 	.word	0x20008008

000024c8 <LOGUartInit>:

void LOGUartInit(void)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b086      	sub	sp, #24
    24cc:	af00      	add	r7, sp, #0
    UART_InitInfo_Type  UART_InitStru;
    PADConfig_Type      PAD_InitStru;
    
    memset(&PAD_InitStru, 0,sizeof(PADConfig_Type));
    24ce:	463b      	mov	r3, r7
    24d0:	2204      	movs	r2, #4
    24d2:	2100      	movs	r1, #0
    24d4:	4618      	mov	r0, r3
    24d6:	f000 fb7f 	bl	2bd8 <memset>
    memset(&UART_InitStru,0,sizeof(UART_InitInfo_Type));
    24da:	1d3b      	adds	r3, r7, #4
    24dc:	2214      	movs	r2, #20
    24de:	2100      	movs	r1, #0
    24e0:	4618      	mov	r0, r3
    24e2:	f000 fb79 	bl	2bd8 <memset>

    if(logUart == UART0) {
    24e6:	4b31      	ldr	r3, [pc, #196]	; (25ac <LOGUartInit+0xe4>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	4a31      	ldr	r2, [pc, #196]	; (25b0 <LOGUartInit+0xe8>)
    24ec:	4293      	cmp	r3, r2
    24ee:	d104      	bne.n	24fa <LOGUartInit+0x32>
        SystemDevClockCtl(UART0_CKEn,true);
    24f0:	2101      	movs	r1, #1
    24f2:	2004      	movs	r0, #4
    24f4:	f7fd ff0c 	bl	310 <SystemDevClockCtl>
    24f8:	e003      	b.n	2502 <LOGUartInit+0x3a>
#if defined(BR005)
        SystemDevClockCtl(UART0_SCKEn,true);
#endif
    }else{
        SystemDevClockCtl(UART1_CKEn,true);
    24fa:	2101      	movs	r1, #1
    24fc:	2005      	movs	r0, #5
    24fe:	f7fd ff07 	bl	310 <SystemDevClockCtl>
    }
    if(logUart == UART0) {
    2502:	4b2a      	ldr	r3, [pc, #168]	; (25ac <LOGUartInit+0xe4>)
    2504:	681b      	ldr	r3, [r3, #0]
    2506:	4a2a      	ldr	r2, [pc, #168]	; (25b0 <LOGUartInit+0xe8>)
    2508:	4293      	cmp	r3, r2
    250a:	d118      	bne.n	253e <LOGUartInit+0x76>
        PAD_InitStru.pad_ctl = PAD_MODE0;
    250c:	783b      	ldrb	r3, [r7, #0]
    250e:	f36f 1306 	bfc	r3, #4, #3
    2512:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID0,&PAD_InitStru);
    2514:	463b      	mov	r3, r7
    2516:	4619      	mov	r1, r3
    2518:	2000      	movs	r0, #0
    251a:	f7fd ff35 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID1,&PAD_InitStru);
    251e:	463b      	mov	r3, r7
    2520:	4619      	mov	r1, r3
    2522:	2001      	movs	r0, #1
    2524:	f7fd ff30 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID2,&PAD_InitStru);
    2528:	463b      	mov	r3, r7
    252a:	4619      	mov	r1, r3
    252c:	2002      	movs	r0, #2
    252e:	f7fd ff2b 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID3,&PAD_InitStru);
    2532:	463b      	mov	r3, r7
    2534:	4619      	mov	r1, r3
    2536:	2003      	movs	r0, #3
    2538:	f7fd ff26 	bl	388 <SystemPADConfig>
    253c:	e018      	b.n	2570 <LOGUartInit+0xa8>
    }else{
        PAD_InitStru.pad_ctl = PAD_MODE1;
    253e:	783b      	ldrb	r3, [r7, #0]
    2540:	2201      	movs	r2, #1
    2542:	f362 1306 	bfi	r3, r2, #4, #3
    2546:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID15,&PAD_InitStru);
    2548:	463b      	mov	r3, r7
    254a:	4619      	mov	r1, r3
    254c:	200f      	movs	r0, #15
    254e:	f7fd ff1b 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID16,&PAD_InitStru);
    2552:	463b      	mov	r3, r7
    2554:	4619      	mov	r1, r3
    2556:	2010      	movs	r0, #16
    2558:	f7fd ff16 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID27,&PAD_InitStru);
    255c:	463b      	mov	r3, r7
    255e:	4619      	mov	r1, r3
    2560:	201b      	movs	r0, #27
    2562:	f7fd ff11 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID28,&PAD_InitStru);
    2566:	463b      	mov	r3, r7
    2568:	4619      	mov	r1, r3
    256a:	201c      	movs	r0, #28
    256c:	f7fd ff0c 	bl	388 <SystemPADConfig>

    }

    UART_InitStru.UART_BaudRate             = 921600;
    2570:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
    2574:	607b      	str	r3, [r7, #4]
    UART_InitStru.UART_WordLength           = UART_WL_8BITS;
    2576:	2303      	movs	r3, #3
    2578:	813b      	strh	r3, [r7, #8]
    UART_InitStru.UART_StopBits             = UART_SB_1BIT;
    257a:	2300      	movs	r3, #0
    257c:	817b      	strh	r3, [r7, #10]
    UART_InitStru.UART_ParityMode           = UART_PM_NONE;
    257e:	2300      	movs	r3, #0
    2580:	81bb      	strh	r3, [r7, #12]
    UART_InitStru.UART_HardwareFlowControl  = UART_FC_NONE;
    2582:	2300      	movs	r3, #0
    2584:	81fb      	strh	r3, [r7, #14]
    UART_InitStru.UART_FIFOMode             = UART_FM_ENABLE;
    2586:	2301      	movs	r3, #1
    2588:	827b      	strh	r3, [r7, #18]
    UART_InitStru.UART_DMAMode              = UART_DM_MODE_0;
    258a:	2300      	movs	r3, #0
    258c:	823b      	strh	r3, [r7, #16]
    UART_InitStru.UART_TX_FIFOTriggerMode   = UART_TT_EMPTY;
    258e:	2300      	movs	r3, #0
    2590:	82bb      	strh	r3, [r7, #20]
    UART_InitStru.UART_RX_FIFOTriggerMode   = UART_RT_1_CHARACTER; 
    2592:	2300      	movs	r3, #0
    2594:	82fb      	strh	r3, [r7, #22]
    UART_Init(logUart, &UART_InitStru); 
    2596:	4b05      	ldr	r3, [pc, #20]	; (25ac <LOGUartInit+0xe4>)
    2598:	681b      	ldr	r3, [r3, #0]
    259a:	1d3a      	adds	r2, r7, #4
    259c:	4611      	mov	r1, r2
    259e:	4618      	mov	r0, r3
    25a0:	f7fe f894 	bl	6cc <UART_Init>
}
    25a4:	bf00      	nop
    25a6:	3718      	adds	r7, #24
    25a8:	46bd      	mov	sp, r7
    25aa:	bd80      	pop	{r7, pc}
    25ac:	20008008 	.word	0x20008008
    25b0:	90002000 	.word	0x90002000

000025b4 <c_printf>:

int c_printf(const char *fmt, ...)
{
    25b4:	b40f      	push	{r0, r1, r2, r3}
    25b6:	b580      	push	{r7, lr}
    25b8:	b082      	sub	sp, #8
    25ba:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
    25bc:	f107 0314 	add.w	r3, r7, #20
    25c0:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
    25c2:	683a      	ldr	r2, [r7, #0]
    25c4:	6939      	ldr	r1, [r7, #16]
    25c6:	480a      	ldr	r0, [pc, #40]	; (25f0 <c_printf+0x3c>)
    25c8:	f000 fb24 	bl	2c14 <vsiprintf>
    25cc:	6078      	str	r0, [r7, #4]
    UART_WriteData(logUart, s_tmp_buf, r);
    25ce:	4b09      	ldr	r3, [pc, #36]	; (25f4 <c_printf+0x40>)
    25d0:	681b      	ldr	r3, [r3, #0]
    25d2:	687a      	ldr	r2, [r7, #4]
    25d4:	b292      	uxth	r2, r2
    25d6:	4906      	ldr	r1, [pc, #24]	; (25f0 <c_printf+0x3c>)
    25d8:	4618      	mov	r0, r3
    25da:	f7fe f98f 	bl	8fc <UART_WriteData>
    va_end(arglist);
    
    return r;
    25de:	687b      	ldr	r3, [r7, #4]
}
    25e0:	4618      	mov	r0, r3
    25e2:	3708      	adds	r7, #8
    25e4:	46bd      	mov	sp, r7
    25e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    25ea:	b004      	add	sp, #16
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop
    25f0:	20008304 	.word	0x20008304
    25f4:	20008008 	.word	0x20008008

000025f8 <SimulationEnd>:

void  SimulationEnd(void)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	af00      	add	r7, sp, #0
    while(!UART_LSRCheckBits(logUart,UART_LSR_BIT_THRE));
    25fc:	bf00      	nop
    25fe:	4b08      	ldr	r3, [pc, #32]	; (2620 <SimulationEnd+0x28>)
    2600:	681b      	ldr	r3, [r3, #0]
    2602:	2120      	movs	r1, #32
    2604:	4618      	mov	r0, r3
    2606:	f7fe f9f7 	bl	9f8 <UART_LSRCheckBits>
    260a:	4603      	mov	r3, r0
    260c:	2b00      	cmp	r3, #0
    260e:	d0f6      	beq.n	25fe <SimulationEnd+0x6>
    UART_WriteByte(logUart,0x04);
    2610:	4b03      	ldr	r3, [pc, #12]	; (2620 <SimulationEnd+0x28>)
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	2104      	movs	r1, #4
    2616:	4618      	mov	r0, r3
    2618:	f7fe f962 	bl	8e0 <UART_WriteByte>
}
    261c:	bf00      	nop
    261e:	bd80      	pop	{r7, pc}
    2620:	20008008 	.word	0x20008008

00002624 <main>:
#include "log_uart_config.h"
#include "qspi_icfg.h"


int main (void)
{
    2624:	b5f0      	push	{r4, r5, r6, r7, lr}
    2626:	b0bb      	sub	sp, #236	; 0xec
    2628:	af04      	add	r7, sp, #16
    uint16_t Fid = 0 ;
    262a:	2300      	movs	r3, #0
    262c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    sysTimeUpdataClk(SystemCoreClock);
    2630:	4bb8      	ldr	r3, [pc, #736]	; (2914 <main+0x2f0>)
    2632:	681b      	ldr	r3, [r3, #0]
    2634:	4618      	mov	r0, r3
    2636:	f7ff ff26 	bl	2486 <sysTimeUpdataClk>
    Verrify_SendPinConnect(UART0_OUTPUT);
    263a:	f24a 0002 	movw	r0, #40962	; 0xa002
    263e:	f7ff fed9 	bl	23f4 <Verrify_SendPinConnect>
    LOGUartInit();
    2642:	f7ff ff41 	bl	24c8 <LOGUartInit>
    c_printf("s_1_723_spim0_spim0_xip_quid case \r\n");
    2646:	48b4      	ldr	r0, [pc, #720]	; (2918 <main+0x2f4>)
    2648:	f7ff ffb4 	bl	25b4 <c_printf>
    {
        SSIC_InitInfo_Type  SSIC_InitStru ;
        SSIC_XIP_InitInfo_Type SSIC_XipInitStru;
      
        memset(&SSIC_InitStru,0,sizeof(SSIC_InitInfo_Type));
    264c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2650:	2230      	movs	r2, #48	; 0x30
    2652:	2100      	movs	r1, #0
    2654:	4618      	mov	r0, r3
    2656:	f000 fabf 	bl	2bd8 <memset>
        memset(&SSIC_XipInitStru,0,sizeof(SSIC_XIP_InitInfo_Type));
    265a:	1d3b      	adds	r3, r7, #4
    265c:	2224      	movs	r2, #36	; 0x24
    265e:	2100      	movs	r1, #0
    2660:	4618      	mov	r0, r3
    2662:	f000 fab9 	bl	2bd8 <memset>

        SCUQspiConfig(QSPI_PIN29,QSPI_CLK);
    2666:	2102      	movs	r1, #2
    2668:	201d      	movs	r0, #29
    266a:	f7fd ff9d 	bl	5a8 <SCUQspiConfig>
        SCUQspiConfig(QSPI_PIN30,QSPI_CS);
    266e:	2100      	movs	r1, #0
    2670:	201e      	movs	r0, #30
    2672:	f7fd ff99 	bl	5a8 <SCUQspiConfig>
        SCUQspiConfig(QSPI_PIN31,QSPI_D0);
    2676:	2101      	movs	r1, #1
    2678:	201f      	movs	r0, #31
    267a:	f7fd ff95 	bl	5a8 <SCUQspiConfig>
        SCUQspiConfig(QSPI_PIN32,QSPI_D1);
    267e:	2105      	movs	r1, #5
    2680:	2020      	movs	r0, #32
    2682:	f7fd ff91 	bl	5a8 <SCUQspiConfig>
        SCUQspiConfig(QSPI_PIN33,QSPI_D2);
    2686:	2104      	movs	r1, #4
    2688:	2021      	movs	r0, #33	; 0x21
    268a:	f7fd ff8d 	bl	5a8 <SCUQspiConfig>
        SCUQspiConfig(QSPI_PIN34,QSPI_D3);
    268e:	2103      	movs	r1, #3
    2690:	2022      	movs	r0, #34	; 0x22
    2692:	f7fd ff89 	bl	5a8 <SCUQspiConfig>
        
        SSIC_InitStru.clock_divider             =  0x10;
    2696:	2310      	movs	r3, #16
    2698:	853b      	strh	r3, [r7, #40]	; 0x28
        SSIC_InitStru.frame_format_size         =  SSI_DATA_FRAME_SIZE_8BIT;
    269a:	2307      	movs	r3, #7
    269c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        SSIC_InitStru.ssi_frame_format          =  SSI_FRAME_FORMAT_MOTOROLA_SPI ;
    26a0:	2300      	movs	r3, #0
    26a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        SSIC_InitStru.clock_phase               =  SSI_CLOCK_TOGGLES_MIDDLE ;
    26a6:	2300      	movs	r3, #0
    26a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        SSIC_InitStru.clock_polarity            =  SSI_INACTIVE_STATE_LOW;
    26ac:	2300      	movs	r3, #0
    26ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        SSIC_InitStru.transfer_mode             =  SSI_EEPROM_READ;
    26b2:	2303      	movs	r3, #3
    26b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        SSIC_InitStru.slave_output_enable       =  SSI_SLAVE_TXD_IS_ENABLE;
    26b8:	2300      	movs	r3, #0
    26ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SSIC_InitStru.operation_mode            =  SSI_NORMAL_MODE ;
    26be:	2300      	movs	r3, #0
    26c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        SSIC_InitStru.slave_select_toggle_en    =  SSIC_SLAVE_SELECT_TOHHLE_DISABLE;
    26c4:	2300      	movs	r3, #0
    26c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        SSIC_InitStru.control_farme_size        =  SSI_CONTROL_FRAME_1BIT_WORD;
    26ca:	2300      	movs	r3, #0
    26cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        SSIC_InitStru.spi_frame_format          =  STANDARD_SPI_FORMAT;
    26d0:	2300      	movs	r3, #0
    26d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        SSIC_InitStru.spi_hyperbus_en           =  SSIC_SPI_HYPERBUS_DISABLE;
    26d6:	2300      	movs	r3, #0
    26d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

        SSIC_InitStru.data_frames_number =0;
    26dc:	2300      	movs	r3, #0
    26de:	86fb      	strh	r3, [r7, #54]	; 0x36
        SSIC_InitStru.slaves_select = 1 ;
    26e0:	2301      	movs	r3, #1
    26e2:	63bb      	str	r3, [r7, #56]	; 0x38
        SSIC_InitStru.tx_fifo_threshold_level =0;
    26e4:	2300      	movs	r3, #0
    26e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        SSIC_InitStru.tx_fifo_start_fifo_level =0;
    26e8:	2300      	movs	r3, #0
    26ea:	643b      	str	r3, [r7, #64]	; 0x40
        SSIC_InitStru.rx_fifo_threshold_level =0;
    26ec:	2300      	movs	r3, #0
    26ee:	647b      	str	r3, [r7, #68]	; 0x44
        SSIC_InitStru.dma_rx_data_level = 0;
    26f0:	2300      	movs	r3, #0
    26f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        SSIC_InitStru.dma_tx_data_level = 0;
    26f4:	2300      	movs	r3, #0
    26f6:	653b      	str	r3, [r7, #80]	; 0x50

        SSIC_InitStru.unmask_interrupt = FIFO_MASK_ALL;
    26f8:	2300      	movs	r3, #0
    26fa:	657b      	str	r3, [r7, #84]	; 0x54
        //SystemDevClockCtl(SPIM0_CKEn, ENABLE);
        SystemDevClockCtl(SPIM0_CKEn,true);
    26fc:	2101      	movs	r1, #1
    26fe:	2011      	movs	r0, #17
    2700:	f7fd fe06 	bl	310 <SystemDevClockCtl>
        SSIC_Init(&SSIC_InitStru);
    2704:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2708:	4618      	mov	r0, r3
    270a:	f7ff f9ed 	bl	1ae8 <SSIC_Init>
        Fid = FLASH_ReadManufDeviceId();
    270e:	f7fe fbf5 	bl	efc <FLASH_ReadManufDeviceId>
    2712:	4603      	mov	r3, r0
    2714:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        c_printf("FLASH id:[%X]\r\n",Fid);
    2718:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
    271c:	4619      	mov	r1, r3
    271e:	487f      	ldr	r0, [pc, #508]	; (291c <main+0x2f8>)
    2720:	f7ff ff48 	bl	25b4 <c_printf>
        {
            uint8_t data[50]={0};
    2724:	f107 0358 	add.w	r3, r7, #88	; 0x58
    2728:	2232      	movs	r2, #50	; 0x32
    272a:	2100      	movs	r1, #0
    272c:	4618      	mov	r0, r3
    272e:	f000 fa53 	bl	2bd8 <memset>
            FLASH_SectorErase(0);
    2732:	2000      	movs	r0, #0
    2734:	f7fe fb18 	bl	d68 <FLASH_SectorErase>
            FLASH_ReadData(0,data,50);
    2738:	f107 0358 	add.w	r3, r7, #88	; 0x58
    273c:	2232      	movs	r2, #50	; 0x32
    273e:	4619      	mov	r1, r3
    2740:	2000      	movs	r0, #0
    2742:	f7fe fad1 	bl	ce8 <FLASH_ReadData>

            for(uint16_t i=0;i<50;i++)
    2746:	2300      	movs	r3, #0
    2748:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    274c:	e011      	b.n	2772 <main+0x14e>
            {
                if(data[i] !=0xff){
    274e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
    2752:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
    2756:	4413      	add	r3, r2
    2758:	f813 3c80 	ldrb.w	r3, [r3, #-128]
    275c:	2bff      	cmp	r3, #255	; 0xff
    275e:	d003      	beq.n	2768 <main+0x144>
                    c_printf("spim0 Erase false\r\n");
    2760:	486f      	ldr	r0, [pc, #444]	; (2920 <main+0x2fc>)
    2762:	f7ff ff27 	bl	25b4 <c_printf>
                    break;
    2766:	e008      	b.n	277a <main+0x156>
            for(uint16_t i=0;i<50;i++)
    2768:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
    276c:	3301      	adds	r3, #1
    276e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    2772:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
    2776:	2b31      	cmp	r3, #49	; 0x31
    2778:	d9e9      	bls.n	274e <main+0x12a>
                }
            }

            for(uint16_t i=0;i<50;i++)
    277a:	2300      	movs	r3, #0
    277c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    2780:	e00e      	b.n	27a0 <main+0x17c>
                data[i] = i;
    2782:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
    2786:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
    278a:	b2d2      	uxtb	r2, r2
    278c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
    2790:	440b      	add	r3, r1
    2792:	f803 2c80 	strb.w	r2, [r3, #-128]
            for(uint16_t i=0;i<50;i++)
    2796:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
    279a:	3301      	adds	r3, #1
    279c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    27a0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
    27a4:	2b31      	cmp	r3, #49	; 0x31
    27a6:	d9ec      	bls.n	2782 <main+0x15e>

            FLASH_PageProgram(0,data,50);
    27a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
    27ac:	2232      	movs	r2, #50	; 0x32
    27ae:	4619      	mov	r1, r3
    27b0:	2000      	movs	r0, #0
    27b2:	f7fe fb6a 	bl	e8a <FLASH_PageProgram>
            FLASH_WaitBusy();
    27b6:	f7fe fa25 	bl	c04 <FLASH_WaitBusy>
        }
#ifndef XIP_QUAD_SPI       
        FLASH_EnableEQI(true);
    27ba:	2001      	movs	r0, #1
    27bc:	f7fe fbbe 	bl	f3c <FLASH_EnableEQI>
#else
        FLASH_EnableEQI(false);
#endif         
        SSIC_InitStru.clock_divider             = 0x2;
    27c0:	2302      	movs	r3, #2
    27c2:	853b      	strh	r3, [r7, #40]	; 0x28

        SSIC_InitStru.frame_format_size         =  SSI_DATA_FRAME_SIZE_32BIT;
    27c4:	231f      	movs	r3, #31
    27c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        SSIC_InitStru.ssi_frame_format          =  SSI_FRAME_FORMAT_MOTOROLA_SPI ;
    27ca:	2300      	movs	r3, #0
    27cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        SSIC_InitStru.clock_phase               =  SSI_CLOCK_TOGGLES_MIDDLE ;
    27d0:	2300      	movs	r3, #0
    27d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        SSIC_InitStru.clock_polarity            =  SSI_INACTIVE_STATE_LOW;
    27d6:	2300      	movs	r3, #0
    27d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        SSIC_InitStru.transfer_mode             =  SSI_EEPROM_READ;
    27dc:	2303      	movs	r3, #3
    27de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        SSIC_InitStru.slave_output_enable       =  SSI_SLAVE_TXD_IS_ENABLE;
    27e2:	2300      	movs	r3, #0
    27e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SSIC_InitStru.operation_mode            =  SSI_NORMAL_MODE ;
    27e8:	2300      	movs	r3, #0
    27ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        SSIC_InitStru.slave_select_toggle_en    =  SSIC_SLAVE_SELECT_TOHHLE_DISABLE;
    27ee:	2300      	movs	r3, #0
    27f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        SSIC_InitStru.control_farme_size        =  SSI_CONTROL_FRAME_1BIT_WORD;
    27f4:	2300      	movs	r3, #0
    27f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
#ifndef XIP_QUAD_SPI
        SSIC_InitStru.spi_frame_format          =  QUAD_SPI_FORMAT;
    27fa:	2302      	movs	r3, #2
    27fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#else
        SSIC_InitStru.spi_frame_format          =  DUAL_SPI_FORMAT;
#endif
        SSIC_InitStru.spi_hyperbus_en           =  SSIC_SPI_HYPERBUS_DISABLE;
    2800:	2300      	movs	r3, #0
    2802:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

        SSIC_InitStru.data_frames_number =0;
    2806:	2300      	movs	r3, #0
    2808:	86fb      	strh	r3, [r7, #54]	; 0x36
        SSIC_InitStru.slaves_select = 1 ;
    280a:	2301      	movs	r3, #1
    280c:	63bb      	str	r3, [r7, #56]	; 0x38
        SSIC_InitStru.tx_fifo_threshold_level =0;
    280e:	2300      	movs	r3, #0
    2810:	63fb      	str	r3, [r7, #60]	; 0x3c
        SSIC_InitStru.tx_fifo_start_fifo_level =0;
    2812:	2300      	movs	r3, #0
    2814:	643b      	str	r3, [r7, #64]	; 0x40
        SSIC_InitStru.rx_fifo_threshold_level =0;
    2816:	2300      	movs	r3, #0
    2818:	647b      	str	r3, [r7, #68]	; 0x44
        SSIC_InitStru.dma_rx_data_level = 0;
    281a:	2300      	movs	r3, #0
    281c:	64fb      	str	r3, [r7, #76]	; 0x4c
        SSIC_InitStru.dma_tx_data_level = 0;
    281e:	2300      	movs	r3, #0
    2820:	653b      	str	r3, [r7, #80]	; 0x50

        SSIC_InitStru.unmask_interrupt = FIFO_MASK_ALL;
    2822:	2300      	movs	r3, #0
    2824:	657b      	str	r3, [r7, #84]	; 0x54
        //SystemDevClockCtl(SPIM0_CKEn, ENABLE);

        SSIC_Init(&SSIC_InitStru);
    2826:	f107 0328 	add.w	r3, r7, #40	; 0x28
    282a:	4618      	mov	r0, r3
    282c:	f7ff f95c 	bl	1ae8 <SSIC_Init>
        
#ifndef XIP_QUAD_SPI       
        SSIC_XipInitStru.spi_frame_format = QUAD_SPI_FORMAT;
    2830:	2302      	movs	r3, #2
    2832:	713b      	strb	r3, [r7, #4]
#else
        SSIC_XipInitStru.spi_frame_format = DUAL_SPI_FORMAT;
#endif       
        
        SSIC_XipInitStru.transfer_type = TT0;
    2834:	2300      	movs	r3, #0
    2836:	717b      	strb	r3, [r7, #5]
        SSIC_XipInitStru.address_length = ADDR_L24;
    2838:	2306      	movs	r3, #6
    283a:	71bb      	strb	r3, [r7, #6]
        SSIC_XipInitStru.instruction_length = INST_L8;
    283c:	2302      	movs	r3, #2
    283e:	71fb      	strb	r3, [r7, #7]
        SSIC_XipInitStru.xip_mode_bit_en =false;
    2840:	2300      	movs	r3, #0
    2842:	723b      	strb	r3, [r7, #8]
        SSIC_XipInitStru.wait_cycles = 0x8; /*Wait cycles in Dual/Quad/Octal mode between control frames transmit and data reception. Specified as number of SPI clock cycles.*/
    2844:	2308      	movs	r3, #8
    2846:	60fb      	str	r3, [r7, #12]
        SSIC_XipInitStru.xip_dfs_hsize_hburst_en =false;
    2848:	2300      	movs	r3, #0
    284a:	743b      	strb	r3, [r7, #16]
        SSIC_XipInitStru.xip_spi_ddr_en =false;
    284c:	2300      	movs	r3, #0
    284e:	747b      	strb	r3, [r7, #17]
        SSIC_XipInitStru.instruction_ddr_enable =false;
    2850:	2300      	movs	r3, #0
    2852:	74bb      	strb	r3, [r7, #18]
        SSIC_XipInitStru.read_data_strobe_enable =false;
    2854:	2300      	movs	r3, #0
    2856:	74fb      	strb	r3, [r7, #19]
        SSIC_XipInitStru.xip_instruction_enable =true;
    2858:	2301      	movs	r3, #1
    285a:	753b      	strb	r3, [r7, #20]
        SSIC_XipInitStru.xip_continuous_transfer_enable =true;
    285c:	2301      	movs	r3, #1
    285e:	757b      	strb	r3, [r7, #21]
        SSIC_XipInitStru.xip_spi_hyerbus_format_enable =false;
    2860:	2300      	movs	r3, #0
    2862:	75bb      	strb	r3, [r7, #22]
        SSIC_XipInitStru.xip_rxds_signaling_enable  =false; /*Enable rxds signaling during address and command phase of Hypebus transfer*/
    2864:	2300      	movs	r3, #0
    2866:	75fb      	strb	r3, [r7, #23]

        SSIC_XipInitStru.xip_mode_bit_length = MBL_2;
    2868:	2300      	movs	r3, #0
    286a:	763b      	strb	r3, [r7, #24]
        /*Enables XIP pre-fetch functionality in DWC_ssi. Once
        enabled DWC_ssi will pre-fetch data frames from next
        contigous location, to reduce the latency for the upcoming
        contiguous transfer. If the next XIP request is not contigous
        then pre-fetched bits will be discarded.*/
        SSIC_XipInitStru.xip_pre_fetch_enable=false;
    286c:	2300      	movs	r3, #0
    286e:	767b      	strb	r3, [r7, #25]

#ifndef XIP_QUAD_SPI
        SSIC_XipInitStru.xip_inst_transfer_opcode = 0x6b;     //QUAD_SPI_FORMAT
    2870:	236b      	movs	r3, #107	; 0x6b
    2872:	837b      	strh	r3, [r7, #26]
#else
        SSIC_XipInitStru.xip_inst_transfer_opcode = 0x3b;   //DUAL_SPI_FORMAT
#endif
        SSIC_XipInitStru.xip_wrap_transfer_opcode = 0;
    2874:	2300      	movs	r3, #0
    2876:	83bb      	strh	r3, [r7, #28]
        SSIC_XipInitStru.slaves_enbale_mask = 1;
    2878:	2301      	movs	r3, #1
    287a:	623b      	str	r3, [r7, #32]
        SSIC_XipInitStru.spi_clk_stretch_en = 0;
    287c:	2300      	movs	r3, #0
    287e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        SSIC_XipInitStru.spi_data_mask_en = 0;
    2882:	2300      	movs	r3, #0
    2884:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        SSIC_XipInitStru.xip_time_out = 50;
    2888:	2332      	movs	r3, #50	; 0x32
    288a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        //SystemDevClockCtl(SPIM0_CKEn, ENABLE);
        SSIC_XipInit(&SSIC_XipInitStru);
    288e:	1d3b      	adds	r3, r7, #4
    2890:	4618      	mov	r0, r3
    2892:	f7ff f9a6 	bl	1be2 <SSIC_XipInit>
        {
#if  defined(BR002)||defined(BR003)
            
            {
                volatile uint8_t  *addr     = (uint8_t  *)CODE_ROM_BASE;
    2896:	2300      	movs	r3, #0
    2898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                volatile uint16_t *addr16   = (uint16_t *)CODE_ROM_BASE;
    289c:	2300      	movs	r3, #0
    289e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                volatile uint32_t *addr32   = (uint32_t *)CODE_ROM_BASE;
    28a2:	2300      	movs	r3, #0
    28a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	b2db      	uxtb	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28b0:	461c      	mov	r4, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    28b6:	3301      	adds	r3, #1
    28b8:	781b      	ldrb	r3, [r3, #0]
    28ba:	b2db      	uxtb	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28bc:	461d      	mov	r5, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    28c2:	3302      	adds	r3, #2
    28c4:	781b      	ldrb	r3, [r3, #0]
    28c6:	b2db      	uxtb	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28c8:	461e      	mov	r6, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    28ce:	3303      	adds	r3, #3
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	b2db      	uxtb	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28d4:	461a      	mov	r2, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
    28da:	881b      	ldrh	r3, [r3, #0]
    28dc:	b29b      	uxth	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28de:	4619      	mov	r1, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    28e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
    28e4:	3302      	adds	r3, #2
    28e6:	881b      	ldrh	r3, [r3, #0]
    28e8:	b29b      	uxth	r3, r3
                c_printf("spim0 ROM:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    28ea:	4618      	mov	r0, r3
    28ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	9303      	str	r3, [sp, #12]
    28f4:	9002      	str	r0, [sp, #8]
    28f6:	9101      	str	r1, [sp, #4]
    28f8:	9200      	str	r2, [sp, #0]
    28fa:	4633      	mov	r3, r6
    28fc:	462a      	mov	r2, r5
    28fe:	4621      	mov	r1, r4
    2900:	4808      	ldr	r0, [pc, #32]	; (2924 <main+0x300>)
    2902:	f7ff fe57 	bl	25b4 <c_printf>
                
            }
            FC->CCR=0;
    2906:	4b08      	ldr	r3, [pc, #32]	; (2928 <main+0x304>)
    2908:	2200      	movs	r2, #0
    290a:	601a      	str	r2, [r3, #0]
            for(uint16_t i=0;i<100;i++){};
    290c:	2300      	movs	r3, #0
    290e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    2912:	e010      	b.n	2936 <main+0x312>
    2914:	20008000 	.word	0x20008000
    2918:	000034b4 	.word	0x000034b4
    291c:	000034dc 	.word	0x000034dc
    2920:	000034ec 	.word	0x000034ec
    2924:	00003500 	.word	0x00003500
    2928:	9000d000 	.word	0x9000d000
    292c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
    2930:	3301      	adds	r3, #1
    2932:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    2936:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
    293a:	2b63      	cmp	r3, #99	; 0x63
    293c:	d9f6      	bls.n	292c <main+0x308>
                
            {
                volatile uint8_t  *addr     = (uint8_t  *)SPI_FLASH_BASE;
    293e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                volatile uint16_t *addr16   = (uint16_t *)SPI_FLASH_BASE;
    2946:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    294a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                volatile uint32_t *addr32   = (uint32_t *)SPI_FLASH_BASE;
    294e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    295e:	461c      	mov	r4, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    2964:	3301      	adds	r3, #1
    2966:	781b      	ldrb	r3, [r3, #0]
    2968:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    296a:	461d      	mov	r5, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    296c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    2970:	3302      	adds	r3, #2
    2972:	781b      	ldrb	r3, [r3, #0]
    2974:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2976:	461e      	mov	r6, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    297c:	3303      	adds	r3, #3
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2982:	461a      	mov	r2, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    2988:	881b      	ldrh	r3, [r3, #0]
    298a:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    298c:	4619      	mov	r1, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    298e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    2992:	3302      	adds	r3, #2
    2994:	881b      	ldrh	r3, [r3, #0]
    2996:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2998:	4618      	mov	r0, r3
    299a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	9303      	str	r3, [sp, #12]
    29a2:	9002      	str	r0, [sp, #8]
    29a4:	9101      	str	r1, [sp, #4]
    29a6:	9200      	str	r2, [sp, #0]
    29a8:	4633      	mov	r3, r6
    29aa:	462a      	mov	r2, r5
    29ac:	4621      	mov	r1, r4
    29ae:	4876      	ldr	r0, [pc, #472]	; (2b88 <main+0x564>)
    29b0:	f7ff fe00 	bl	25b4 <c_printf>
            }
            FC->CCR=1;
    29b4:	4b75      	ldr	r3, [pc, #468]	; (2b8c <main+0x568>)
    29b6:	2201      	movs	r2, #1
    29b8:	601a      	str	r2, [r3, #0]
            for(uint16_t i=0;i<100;i++){};
    29ba:	2300      	movs	r3, #0
    29bc:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    29c0:	e004      	b.n	29cc <main+0x3a8>
    29c2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
    29c6:	3301      	adds	r3, #1
    29c8:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    29cc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
    29d0:	2b63      	cmp	r3, #99	; 0x63
    29d2:	d9f6      	bls.n	29c2 <main+0x39e>
            {
                volatile uint8_t  *addr     = (uint8_t  *)SPI_FLASH_BASE;
    29d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                volatile uint16_t *addr16   = (uint16_t *)SPI_FLASH_BASE;
    29dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                volatile uint32_t *addr32   = (uint32_t *)SPI_FLASH_BASE;
    29e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    29ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    29f0:	781b      	ldrb	r3, [r3, #0]
    29f2:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    29f4:	461c      	mov	r4, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    29f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    29fa:	3301      	adds	r3, #1
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a00:	461d      	mov	r5, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    2a06:	3302      	adds	r3, #2
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a0c:	461e      	mov	r6, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    2a12:	3303      	adds	r3, #3
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a18:	461a      	mov	r2, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    2a1e:	881b      	ldrh	r3, [r3, #0]
    2a20:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a22:	4619      	mov	r1, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    2a28:	3302      	adds	r3, #2
    2a2a:	881b      	ldrh	r3, [r3, #0]
    2a2c:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a2e:	4618      	mov	r0, r3
    2a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	9303      	str	r3, [sp, #12]
    2a38:	9002      	str	r0, [sp, #8]
    2a3a:	9101      	str	r1, [sp, #4]
    2a3c:	9200      	str	r2, [sp, #0]
    2a3e:	4633      	mov	r3, r6
    2a40:	462a      	mov	r2, r5
    2a42:	4621      	mov	r1, r4
    2a44:	4850      	ldr	r0, [pc, #320]	; (2b88 <main+0x564>)
    2a46:	f7ff fdb5 	bl	25b4 <c_printf>
            }
             FC->CCR=0x41;
    2a4a:	4b50      	ldr	r3, [pc, #320]	; (2b8c <main+0x568>)
    2a4c:	2241      	movs	r2, #65	; 0x41
    2a4e:	601a      	str	r2, [r3, #0]
            for(uint16_t i=0;i<100;i++){};
    2a50:	2300      	movs	r3, #0
    2a52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    2a56:	e004      	b.n	2a62 <main+0x43e>
    2a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
    2a5c:	3301      	adds	r3, #1
    2a5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    2a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
    2a66:	2b63      	cmp	r3, #99	; 0x63
    2a68:	d9f6      	bls.n	2a58 <main+0x434>
            {
                volatile uint8_t  *addr     = (uint8_t  *)SPI_FLASH_BASE;
    2a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                volatile uint16_t *addr16   = (uint16_t *)SPI_FLASH_BASE;
    2a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                volatile uint32_t *addr32   = (uint32_t *)SPI_FLASH_BASE;
    2a7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2a86:	781b      	ldrb	r3, [r3, #0]
    2a88:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a8a:	461c      	mov	r4, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2a90:	3301      	adds	r3, #1
    2a92:	781b      	ldrb	r3, [r3, #0]
    2a94:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2a96:	461d      	mov	r5, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2a9c:	3302      	adds	r3, #2
    2a9e:	781b      	ldrb	r3, [r3, #0]
    2aa0:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2aa2:	461e      	mov	r6, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2aa8:	3303      	adds	r3, #3
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2aae:	461a      	mov	r2, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    2ab4:	881b      	ldrh	r3, [r3, #0]
    2ab6:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2ab8:	4619      	mov	r1, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    2abe:	3302      	adds	r3, #2
    2ac0:	881b      	ldrh	r3, [r3, #0]
    2ac2:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2ac4:	4618      	mov	r0, r3
    2ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    2aca:	681b      	ldr	r3, [r3, #0]
    2acc:	9303      	str	r3, [sp, #12]
    2ace:	9002      	str	r0, [sp, #8]
    2ad0:	9101      	str	r1, [sp, #4]
    2ad2:	9200      	str	r2, [sp, #0]
    2ad4:	4633      	mov	r3, r6
    2ad6:	462a      	mov	r2, r5
    2ad8:	4621      	mov	r1, r4
    2ada:	482b      	ldr	r0, [pc, #172]	; (2b88 <main+0x564>)
    2adc:	f7ff fd6a 	bl	25b4 <c_printf>
            }
             FC->CCR=0x61;
    2ae0:	4b2a      	ldr	r3, [pc, #168]	; (2b8c <main+0x568>)
    2ae2:	2261      	movs	r2, #97	; 0x61
    2ae4:	601a      	str	r2, [r3, #0]
            for(uint16_t i=0;i<100;i++){};
    2ae6:	2300      	movs	r3, #0
    2ae8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    2aec:	e004      	b.n	2af8 <main+0x4d4>
    2aee:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    2af2:	3301      	adds	r3, #1
    2af4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    2af8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    2afc:	2b63      	cmp	r3, #99	; 0x63
    2afe:	d9f6      	bls.n	2aee <main+0x4ca>
            {
                volatile uint8_t  *addr     = (uint8_t  *)SPI_FLASH_BASE;
    2b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                volatile uint16_t *addr16   = (uint16_t *)SPI_FLASH_BASE;
    2b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                volatile uint32_t *addr32   = (uint32_t *)SPI_FLASH_BASE;
    2b10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b20:	461c      	mov	r4, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    2b26:	3301      	adds	r3, #1
    2b28:	781b      	ldrb	r3, [r3, #0]
    2b2a:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b2c:	461d      	mov	r5, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    2b32:	3302      	adds	r3, #2
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b38:	461e      	mov	r6, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    2b3e:	3303      	adds	r3, #3
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	b2db      	uxtb	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b44:	461a      	mov	r2, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    2b4a:	881b      	ldrh	r3, [r3, #0]
    2b4c:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b4e:	4619      	mov	r1, r3
                    *(addr+0),*(addr+1),*(addr+2),*(addr+3),*addr16,*(addr16+1),*addr32);
    2b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    2b54:	3302      	adds	r3, #2
    2b56:	881b      	ldrh	r3, [r3, #0]
    2b58:	b29b      	uxth	r3, r3
                c_printf("spim0 XIP:u8[%2X][%2X][%2X][%2X],u16[%4X][%4X],u32[%8X]\r\n",\
    2b5a:	4618      	mov	r0, r3
    2b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	9303      	str	r3, [sp, #12]
    2b64:	9002      	str	r0, [sp, #8]
    2b66:	9101      	str	r1, [sp, #4]
    2b68:	9200      	str	r2, [sp, #0]
    2b6a:	4633      	mov	r3, r6
    2b6c:	462a      	mov	r2, r5
    2b6e:	4621      	mov	r1, r4
    2b70:	4805      	ldr	r0, [pc, #20]	; (2b88 <main+0x564>)
    2b72:	f7ff fd1f 	bl	25b4 <c_printf>
            }
        }
            
#endif
    }
    c_printf("s_1_723_spim0_spim0_xip_quid case completed \r\n");
    2b76:	4806      	ldr	r0, [pc, #24]	; (2b90 <main+0x56c>)
    2b78:	f7ff fd1c 	bl	25b4 <c_printf>
	MCU_Sleep(3);
    2b7c:	2003      	movs	r0, #3
    2b7e:	f7ff fc6d 	bl	245c <MCU_Sleep>
    SimulationEnd();
    2b82:	f7ff fd39 	bl	25f8 <SimulationEnd>
    while(1){     
    2b86:	e7fe      	b.n	2b86 <main+0x562>
    2b88:	0000353c 	.word	0x0000353c
    2b8c:	9000d000 	.word	0x9000d000
    2b90:	00003578 	.word	0x00003578

00002b94 <exit>:
    2b94:	b508      	push	{r3, lr}
    2b96:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <exit+0x20>)
    2b98:	4604      	mov	r4, r0
    2b9a:	b113      	cbz	r3, 2ba2 <exit+0xe>
    2b9c:	2100      	movs	r1, #0
    2b9e:	f3af 8000 	nop.w
    2ba2:	4b05      	ldr	r3, [pc, #20]	; (2bb8 <exit+0x24>)
    2ba4:	6818      	ldr	r0, [r3, #0]
    2ba6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2ba8:	b103      	cbz	r3, 2bac <exit+0x18>
    2baa:	4798      	blx	r3
    2bac:	4620      	mov	r0, r4
    2bae:	f000 fc43 	bl	3438 <_exit>
    2bb2:	bf00      	nop
    2bb4:	00000000 	.word	0x00000000
    2bb8:	000035a8 	.word	0x000035a8

00002bbc <memcpy>:
    2bbc:	440a      	add	r2, r1
    2bbe:	4291      	cmp	r1, r2
    2bc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    2bc4:	d100      	bne.n	2bc8 <memcpy+0xc>
    2bc6:	4770      	bx	lr
    2bc8:	b510      	push	{r4, lr}
    2bca:	f811 4b01 	ldrb.w	r4, [r1], #1
    2bce:	4291      	cmp	r1, r2
    2bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
    2bd4:	d1f9      	bne.n	2bca <memcpy+0xe>
    2bd6:	bd10      	pop	{r4, pc}

00002bd8 <memset>:
    2bd8:	4603      	mov	r3, r0
    2bda:	4402      	add	r2, r0
    2bdc:	4293      	cmp	r3, r2
    2bde:	d100      	bne.n	2be2 <memset+0xa>
    2be0:	4770      	bx	lr
    2be2:	f803 1b01 	strb.w	r1, [r3], #1
    2be6:	e7f9      	b.n	2bdc <memset+0x4>

00002be8 <_vsiprintf_r>:
    2be8:	b500      	push	{lr}
    2bea:	b09b      	sub	sp, #108	; 0x6c
    2bec:	9100      	str	r1, [sp, #0]
    2bee:	9104      	str	r1, [sp, #16]
    2bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2bf4:	9105      	str	r1, [sp, #20]
    2bf6:	9102      	str	r1, [sp, #8]
    2bf8:	4905      	ldr	r1, [pc, #20]	; (2c10 <_vsiprintf_r+0x28>)
    2bfa:	9103      	str	r1, [sp, #12]
    2bfc:	4669      	mov	r1, sp
    2bfe:	f000 f86f 	bl	2ce0 <_svfiprintf_r>
    2c02:	2200      	movs	r2, #0
    2c04:	9b00      	ldr	r3, [sp, #0]
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	b01b      	add	sp, #108	; 0x6c
    2c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    2c0e:	bf00      	nop
    2c10:	ffff0208 	.word	0xffff0208

00002c14 <vsiprintf>:
    2c14:	4613      	mov	r3, r2
    2c16:	460a      	mov	r2, r1
    2c18:	4601      	mov	r1, r0
    2c1a:	4802      	ldr	r0, [pc, #8]	; (2c24 <vsiprintf+0x10>)
    2c1c:	6800      	ldr	r0, [r0, #0]
    2c1e:	f7ff bfe3 	b.w	2be8 <_vsiprintf_r>
    2c22:	bf00      	nop
    2c24:	2000800c 	.word	0x2000800c

00002c28 <__ssputs_r>:
    2c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c2c:	688e      	ldr	r6, [r1, #8]
    2c2e:	4682      	mov	sl, r0
    2c30:	429e      	cmp	r6, r3
    2c32:	460c      	mov	r4, r1
    2c34:	4691      	mov	r9, r2
    2c36:	4698      	mov	r8, r3
    2c38:	d838      	bhi.n	2cac <__ssputs_r+0x84>
    2c3a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    2c3e:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    2c42:	d031      	beq.n	2ca8 <__ssputs_r+0x80>
    2c44:	6962      	ldr	r2, [r4, #20]
    2c46:	6825      	ldr	r5, [r4, #0]
    2c48:	6909      	ldr	r1, [r1, #16]
    2c4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2c4e:	1a6f      	subs	r7, r5, r1
    2c50:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    2c54:	3301      	adds	r3, #1
    2c56:	1055      	asrs	r5, r2, #1
    2c58:	443b      	add	r3, r7
    2c5a:	429d      	cmp	r5, r3
    2c5c:	bf38      	it	cc
    2c5e:	461d      	movcc	r5, r3
    2c60:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    2c64:	d030      	beq.n	2cc8 <__ssputs_r+0xa0>
    2c66:	4629      	mov	r1, r5
    2c68:	f000 fb32 	bl	32d0 <_malloc_r>
    2c6c:	4606      	mov	r6, r0
    2c6e:	b950      	cbnz	r0, 2c86 <__ssputs_r+0x5e>
    2c70:	230c      	movs	r3, #12
    2c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c76:	f8ca 3000 	str.w	r3, [sl]
    2c7a:	89a3      	ldrh	r3, [r4, #12]
    2c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c80:	81a3      	strh	r3, [r4, #12]
    2c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c86:	463a      	mov	r2, r7
    2c88:	6921      	ldr	r1, [r4, #16]
    2c8a:	f7ff ff97 	bl	2bbc <memcpy>
    2c8e:	89a3      	ldrh	r3, [r4, #12]
    2c90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    2c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2c98:	81a3      	strh	r3, [r4, #12]
    2c9a:	6126      	str	r6, [r4, #16]
    2c9c:	443e      	add	r6, r7
    2c9e:	6026      	str	r6, [r4, #0]
    2ca0:	4646      	mov	r6, r8
    2ca2:	6165      	str	r5, [r4, #20]
    2ca4:	1bed      	subs	r5, r5, r7
    2ca6:	60a5      	str	r5, [r4, #8]
    2ca8:	4546      	cmp	r6, r8
    2caa:	d900      	bls.n	2cae <__ssputs_r+0x86>
    2cac:	4646      	mov	r6, r8
    2cae:	4632      	mov	r2, r6
    2cb0:	4649      	mov	r1, r9
    2cb2:	6820      	ldr	r0, [r4, #0]
    2cb4:	f000 faa6 	bl	3204 <memmove>
    2cb8:	68a3      	ldr	r3, [r4, #8]
    2cba:	2000      	movs	r0, #0
    2cbc:	1b9b      	subs	r3, r3, r6
    2cbe:	60a3      	str	r3, [r4, #8]
    2cc0:	6823      	ldr	r3, [r4, #0]
    2cc2:	441e      	add	r6, r3
    2cc4:	6026      	str	r6, [r4, #0]
    2cc6:	e7dc      	b.n	2c82 <__ssputs_r+0x5a>
    2cc8:	462a      	mov	r2, r5
    2cca:	f000 fb5b 	bl	3384 <_realloc_r>
    2cce:	4606      	mov	r6, r0
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d1e2      	bne.n	2c9a <__ssputs_r+0x72>
    2cd4:	6921      	ldr	r1, [r4, #16]
    2cd6:	4650      	mov	r0, sl
    2cd8:	f000 faae 	bl	3238 <_free_r>
    2cdc:	e7c8      	b.n	2c70 <__ssputs_r+0x48>
	...

00002ce0 <_svfiprintf_r>:
    2ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ce4:	461e      	mov	r6, r3
    2ce6:	898b      	ldrh	r3, [r1, #12]
    2ce8:	b09d      	sub	sp, #116	; 0x74
    2cea:	061b      	lsls	r3, r3, #24
    2cec:	4607      	mov	r7, r0
    2cee:	460d      	mov	r5, r1
    2cf0:	4614      	mov	r4, r2
    2cf2:	d50e      	bpl.n	2d12 <_svfiprintf_r+0x32>
    2cf4:	690b      	ldr	r3, [r1, #16]
    2cf6:	b963      	cbnz	r3, 2d12 <_svfiprintf_r+0x32>
    2cf8:	2140      	movs	r1, #64	; 0x40
    2cfa:	f000 fae9 	bl	32d0 <_malloc_r>
    2cfe:	6028      	str	r0, [r5, #0]
    2d00:	6128      	str	r0, [r5, #16]
    2d02:	b920      	cbnz	r0, 2d0e <_svfiprintf_r+0x2e>
    2d04:	230c      	movs	r3, #12
    2d06:	603b      	str	r3, [r7, #0]
    2d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2d0c:	e0c9      	b.n	2ea2 <_svfiprintf_r+0x1c2>
    2d0e:	2340      	movs	r3, #64	; 0x40
    2d10:	616b      	str	r3, [r5, #20]
    2d12:	2300      	movs	r3, #0
    2d14:	9309      	str	r3, [sp, #36]	; 0x24
    2d16:	2320      	movs	r3, #32
    2d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2d1c:	2330      	movs	r3, #48	; 0x30
    2d1e:	f04f 0a01 	mov.w	sl, #1
    2d22:	f8df 9198 	ldr.w	r9, [pc, #408]	; 2ebc <_svfiprintf_r+0x1dc>
    2d26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2d2a:	9603      	str	r6, [sp, #12]
    2d2c:	4623      	mov	r3, r4
    2d2e:	461e      	mov	r6, r3
    2d30:	f813 2b01 	ldrb.w	r2, [r3], #1
    2d34:	b10a      	cbz	r2, 2d3a <_svfiprintf_r+0x5a>
    2d36:	2a25      	cmp	r2, #37	; 0x25
    2d38:	d1f9      	bne.n	2d2e <_svfiprintf_r+0x4e>
    2d3a:	ebb6 0b04 	subs.w	fp, r6, r4
    2d3e:	d00b      	beq.n	2d58 <_svfiprintf_r+0x78>
    2d40:	465b      	mov	r3, fp
    2d42:	4622      	mov	r2, r4
    2d44:	4629      	mov	r1, r5
    2d46:	4638      	mov	r0, r7
    2d48:	f7ff ff6e 	bl	2c28 <__ssputs_r>
    2d4c:	3001      	adds	r0, #1
    2d4e:	f000 80a3 	beq.w	2e98 <_svfiprintf_r+0x1b8>
    2d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d54:	445b      	add	r3, fp
    2d56:	9309      	str	r3, [sp, #36]	; 0x24
    2d58:	7833      	ldrb	r3, [r6, #0]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	f000 809c 	beq.w	2e98 <_svfiprintf_r+0x1b8>
    2d60:	2300      	movs	r3, #0
    2d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
    2d6a:	3601      	adds	r6, #1
    2d6c:	9304      	str	r3, [sp, #16]
    2d6e:	9307      	str	r3, [sp, #28]
    2d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2d74:	931a      	str	r3, [sp, #104]	; 0x68
    2d76:	4634      	mov	r4, r6
    2d78:	2205      	movs	r2, #5
    2d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
    2d7e:	484f      	ldr	r0, [pc, #316]	; (2ebc <_svfiprintf_r+0x1dc>)
    2d80:	f000 fa32 	bl	31e8 <memchr>
    2d84:	9b04      	ldr	r3, [sp, #16]
    2d86:	b9c0      	cbnz	r0, 2dba <_svfiprintf_r+0xda>
    2d88:	06d9      	lsls	r1, r3, #27
    2d8a:	bf44      	itt	mi
    2d8c:	2220      	movmi	r2, #32
    2d8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2d92:	071a      	lsls	r2, r3, #28
    2d94:	bf44      	itt	mi
    2d96:	222b      	movmi	r2, #43	; 0x2b
    2d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2d9c:	7832      	ldrb	r2, [r6, #0]
    2d9e:	2a2a      	cmp	r2, #42	; 0x2a
    2da0:	d013      	beq.n	2dca <_svfiprintf_r+0xea>
    2da2:	4634      	mov	r4, r6
    2da4:	2000      	movs	r0, #0
    2da6:	260a      	movs	r6, #10
    2da8:	9a07      	ldr	r2, [sp, #28]
    2daa:	4621      	mov	r1, r4
    2dac:	f811 3b01 	ldrb.w	r3, [r1], #1
    2db0:	3b30      	subs	r3, #48	; 0x30
    2db2:	2b09      	cmp	r3, #9
    2db4:	d94b      	bls.n	2e4e <_svfiprintf_r+0x16e>
    2db6:	b970      	cbnz	r0, 2dd6 <_svfiprintf_r+0xf6>
    2db8:	e014      	b.n	2de4 <_svfiprintf_r+0x104>
    2dba:	eba0 0009 	sub.w	r0, r0, r9
    2dbe:	fa0a f000 	lsl.w	r0, sl, r0
    2dc2:	4318      	orrs	r0, r3
    2dc4:	9004      	str	r0, [sp, #16]
    2dc6:	4626      	mov	r6, r4
    2dc8:	e7d5      	b.n	2d76 <_svfiprintf_r+0x96>
    2dca:	9a03      	ldr	r2, [sp, #12]
    2dcc:	1d11      	adds	r1, r2, #4
    2dce:	6812      	ldr	r2, [r2, #0]
    2dd0:	9103      	str	r1, [sp, #12]
    2dd2:	2a00      	cmp	r2, #0
    2dd4:	db01      	blt.n	2dda <_svfiprintf_r+0xfa>
    2dd6:	9207      	str	r2, [sp, #28]
    2dd8:	e004      	b.n	2de4 <_svfiprintf_r+0x104>
    2dda:	4252      	negs	r2, r2
    2ddc:	f043 0302 	orr.w	r3, r3, #2
    2de0:	9207      	str	r2, [sp, #28]
    2de2:	9304      	str	r3, [sp, #16]
    2de4:	7823      	ldrb	r3, [r4, #0]
    2de6:	2b2e      	cmp	r3, #46	; 0x2e
    2de8:	d10c      	bne.n	2e04 <_svfiprintf_r+0x124>
    2dea:	7863      	ldrb	r3, [r4, #1]
    2dec:	2b2a      	cmp	r3, #42	; 0x2a
    2dee:	d133      	bne.n	2e58 <_svfiprintf_r+0x178>
    2df0:	9b03      	ldr	r3, [sp, #12]
    2df2:	3402      	adds	r4, #2
    2df4:	1d1a      	adds	r2, r3, #4
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	9203      	str	r2, [sp, #12]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	bfb8      	it	lt
    2dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    2e02:	9305      	str	r3, [sp, #20]
    2e04:	4e2e      	ldr	r6, [pc, #184]	; (2ec0 <_svfiprintf_r+0x1e0>)
    2e06:	2203      	movs	r2, #3
    2e08:	7821      	ldrb	r1, [r4, #0]
    2e0a:	4630      	mov	r0, r6
    2e0c:	f000 f9ec 	bl	31e8 <memchr>
    2e10:	b138      	cbz	r0, 2e22 <_svfiprintf_r+0x142>
    2e12:	2340      	movs	r3, #64	; 0x40
    2e14:	1b80      	subs	r0, r0, r6
    2e16:	fa03 f000 	lsl.w	r0, r3, r0
    2e1a:	9b04      	ldr	r3, [sp, #16]
    2e1c:	3401      	adds	r4, #1
    2e1e:	4303      	orrs	r3, r0
    2e20:	9304      	str	r3, [sp, #16]
    2e22:	f814 1b01 	ldrb.w	r1, [r4], #1
    2e26:	2206      	movs	r2, #6
    2e28:	4826      	ldr	r0, [pc, #152]	; (2ec4 <_svfiprintf_r+0x1e4>)
    2e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2e2e:	f000 f9db 	bl	31e8 <memchr>
    2e32:	2800      	cmp	r0, #0
    2e34:	d038      	beq.n	2ea8 <_svfiprintf_r+0x1c8>
    2e36:	4b24      	ldr	r3, [pc, #144]	; (2ec8 <_svfiprintf_r+0x1e8>)
    2e38:	bb13      	cbnz	r3, 2e80 <_svfiprintf_r+0x1a0>
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	3307      	adds	r3, #7
    2e3e:	f023 0307 	bic.w	r3, r3, #7
    2e42:	3308      	adds	r3, #8
    2e44:	9303      	str	r3, [sp, #12]
    2e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e48:	4443      	add	r3, r8
    2e4a:	9309      	str	r3, [sp, #36]	; 0x24
    2e4c:	e76e      	b.n	2d2c <_svfiprintf_r+0x4c>
    2e4e:	fb06 3202 	mla	r2, r6, r2, r3
    2e52:	2001      	movs	r0, #1
    2e54:	460c      	mov	r4, r1
    2e56:	e7a8      	b.n	2daa <_svfiprintf_r+0xca>
    2e58:	2300      	movs	r3, #0
    2e5a:	260a      	movs	r6, #10
    2e5c:	4619      	mov	r1, r3
    2e5e:	3401      	adds	r4, #1
    2e60:	9305      	str	r3, [sp, #20]
    2e62:	4620      	mov	r0, r4
    2e64:	f810 2b01 	ldrb.w	r2, [r0], #1
    2e68:	3a30      	subs	r2, #48	; 0x30
    2e6a:	2a09      	cmp	r2, #9
    2e6c:	d903      	bls.n	2e76 <_svfiprintf_r+0x196>
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d0c8      	beq.n	2e04 <_svfiprintf_r+0x124>
    2e72:	9105      	str	r1, [sp, #20]
    2e74:	e7c6      	b.n	2e04 <_svfiprintf_r+0x124>
    2e76:	fb06 2101 	mla	r1, r6, r1, r2
    2e7a:	2301      	movs	r3, #1
    2e7c:	4604      	mov	r4, r0
    2e7e:	e7f0      	b.n	2e62 <_svfiprintf_r+0x182>
    2e80:	ab03      	add	r3, sp, #12
    2e82:	9300      	str	r3, [sp, #0]
    2e84:	462a      	mov	r2, r5
    2e86:	4b11      	ldr	r3, [pc, #68]	; (2ecc <_svfiprintf_r+0x1ec>)
    2e88:	a904      	add	r1, sp, #16
    2e8a:	4638      	mov	r0, r7
    2e8c:	f3af 8000 	nop.w
    2e90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2e94:	4680      	mov	r8, r0
    2e96:	d1d6      	bne.n	2e46 <_svfiprintf_r+0x166>
    2e98:	89ab      	ldrh	r3, [r5, #12]
    2e9a:	065b      	lsls	r3, r3, #25
    2e9c:	f53f af34 	bmi.w	2d08 <_svfiprintf_r+0x28>
    2ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ea2:	b01d      	add	sp, #116	; 0x74
    2ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ea8:	ab03      	add	r3, sp, #12
    2eaa:	9300      	str	r3, [sp, #0]
    2eac:	462a      	mov	r2, r5
    2eae:	4b07      	ldr	r3, [pc, #28]	; (2ecc <_svfiprintf_r+0x1ec>)
    2eb0:	a904      	add	r1, sp, #16
    2eb2:	4638      	mov	r0, r7
    2eb4:	f000 f882 	bl	2fbc <_printf_i>
    2eb8:	e7ea      	b.n	2e90 <_svfiprintf_r+0x1b0>
    2eba:	bf00      	nop
    2ebc:	000035ac 	.word	0x000035ac
    2ec0:	000035b2 	.word	0x000035b2
    2ec4:	000035b6 	.word	0x000035b6
    2ec8:	00000000 	.word	0x00000000
    2ecc:	00002c29 	.word	0x00002c29

00002ed0 <_printf_common>:
    2ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ed4:	4691      	mov	r9, r2
    2ed6:	461f      	mov	r7, r3
    2ed8:	688a      	ldr	r2, [r1, #8]
    2eda:	690b      	ldr	r3, [r1, #16]
    2edc:	4606      	mov	r6, r0
    2ede:	4293      	cmp	r3, r2
    2ee0:	bfb8      	it	lt
    2ee2:	4613      	movlt	r3, r2
    2ee4:	f8c9 3000 	str.w	r3, [r9]
    2ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2eec:	460c      	mov	r4, r1
    2eee:	f8dd 8020 	ldr.w	r8, [sp, #32]
    2ef2:	b112      	cbz	r2, 2efa <_printf_common+0x2a>
    2ef4:	3301      	adds	r3, #1
    2ef6:	f8c9 3000 	str.w	r3, [r9]
    2efa:	6823      	ldr	r3, [r4, #0]
    2efc:	0699      	lsls	r1, r3, #26
    2efe:	bf42      	ittt	mi
    2f00:	f8d9 3000 	ldrmi.w	r3, [r9]
    2f04:	3302      	addmi	r3, #2
    2f06:	f8c9 3000 	strmi.w	r3, [r9]
    2f0a:	6825      	ldr	r5, [r4, #0]
    2f0c:	f015 0506 	ands.w	r5, r5, #6
    2f10:	d107      	bne.n	2f22 <_printf_common+0x52>
    2f12:	f104 0a19 	add.w	sl, r4, #25
    2f16:	68e3      	ldr	r3, [r4, #12]
    2f18:	f8d9 2000 	ldr.w	r2, [r9]
    2f1c:	1a9b      	subs	r3, r3, r2
    2f1e:	42ab      	cmp	r3, r5
    2f20:	dc29      	bgt.n	2f76 <_printf_common+0xa6>
    2f22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2f26:	6822      	ldr	r2, [r4, #0]
    2f28:	3300      	adds	r3, #0
    2f2a:	bf18      	it	ne
    2f2c:	2301      	movne	r3, #1
    2f2e:	0692      	lsls	r2, r2, #26
    2f30:	d42e      	bmi.n	2f90 <_printf_common+0xc0>
    2f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2f36:	4639      	mov	r1, r7
    2f38:	4630      	mov	r0, r6
    2f3a:	47c0      	blx	r8
    2f3c:	3001      	adds	r0, #1
    2f3e:	d021      	beq.n	2f84 <_printf_common+0xb4>
    2f40:	6823      	ldr	r3, [r4, #0]
    2f42:	68e5      	ldr	r5, [r4, #12]
    2f44:	f003 0306 	and.w	r3, r3, #6
    2f48:	2b04      	cmp	r3, #4
    2f4a:	bf18      	it	ne
    2f4c:	2500      	movne	r5, #0
    2f4e:	f8d9 2000 	ldr.w	r2, [r9]
    2f52:	f04f 0900 	mov.w	r9, #0
    2f56:	bf08      	it	eq
    2f58:	1aad      	subeq	r5, r5, r2
    2f5a:	68a3      	ldr	r3, [r4, #8]
    2f5c:	6922      	ldr	r2, [r4, #16]
    2f5e:	bf08      	it	eq
    2f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2f64:	4293      	cmp	r3, r2
    2f66:	bfc4      	itt	gt
    2f68:	1a9b      	subgt	r3, r3, r2
    2f6a:	18ed      	addgt	r5, r5, r3
    2f6c:	341a      	adds	r4, #26
    2f6e:	454d      	cmp	r5, r9
    2f70:	d11a      	bne.n	2fa8 <_printf_common+0xd8>
    2f72:	2000      	movs	r0, #0
    2f74:	e008      	b.n	2f88 <_printf_common+0xb8>
    2f76:	2301      	movs	r3, #1
    2f78:	4652      	mov	r2, sl
    2f7a:	4639      	mov	r1, r7
    2f7c:	4630      	mov	r0, r6
    2f7e:	47c0      	blx	r8
    2f80:	3001      	adds	r0, #1
    2f82:	d103      	bne.n	2f8c <_printf_common+0xbc>
    2f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f8c:	3501      	adds	r5, #1
    2f8e:	e7c2      	b.n	2f16 <_printf_common+0x46>
    2f90:	2030      	movs	r0, #48	; 0x30
    2f92:	18e1      	adds	r1, r4, r3
    2f94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2f98:	1c5a      	adds	r2, r3, #1
    2f9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2f9e:	4422      	add	r2, r4
    2fa0:	3302      	adds	r3, #2
    2fa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2fa6:	e7c4      	b.n	2f32 <_printf_common+0x62>
    2fa8:	2301      	movs	r3, #1
    2faa:	4622      	mov	r2, r4
    2fac:	4639      	mov	r1, r7
    2fae:	4630      	mov	r0, r6
    2fb0:	47c0      	blx	r8
    2fb2:	3001      	adds	r0, #1
    2fb4:	d0e6      	beq.n	2f84 <_printf_common+0xb4>
    2fb6:	f109 0901 	add.w	r9, r9, #1
    2fba:	e7d8      	b.n	2f6e <_printf_common+0x9e>

00002fbc <_printf_i>:
    2fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fc0:	4606      	mov	r6, r0
    2fc2:	460c      	mov	r4, r1
    2fc4:	f101 0043 	add.w	r0, r1, #67	; 0x43
    2fc8:	7e09      	ldrb	r1, [r1, #24]
    2fca:	b085      	sub	sp, #20
    2fcc:	296e      	cmp	r1, #110	; 0x6e
    2fce:	4698      	mov	r8, r3
    2fd0:	4617      	mov	r7, r2
    2fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fd4:	f000 80bb 	beq.w	314e <_printf_i+0x192>
    2fd8:	d824      	bhi.n	3024 <_printf_i+0x68>
    2fda:	2963      	cmp	r1, #99	; 0x63
    2fdc:	d039      	beq.n	3052 <_printf_i+0x96>
    2fde:	d80a      	bhi.n	2ff6 <_printf_i+0x3a>
    2fe0:	2900      	cmp	r1, #0
    2fe2:	f000 80c4 	beq.w	316e <_printf_i+0x1b2>
    2fe6:	2958      	cmp	r1, #88	; 0x58
    2fe8:	f000 8092 	beq.w	3110 <_printf_i+0x154>
    2fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2ff0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2ff4:	e035      	b.n	3062 <_printf_i+0xa6>
    2ff6:	2964      	cmp	r1, #100	; 0x64
    2ff8:	d001      	beq.n	2ffe <_printf_i+0x42>
    2ffa:	2969      	cmp	r1, #105	; 0x69
    2ffc:	d1f6      	bne.n	2fec <_printf_i+0x30>
    2ffe:	6825      	ldr	r5, [r4, #0]
    3000:	681a      	ldr	r2, [r3, #0]
    3002:	f015 0f80 	tst.w	r5, #128	; 0x80
    3006:	f102 0104 	add.w	r1, r2, #4
    300a:	d02c      	beq.n	3066 <_printf_i+0xaa>
    300c:	6812      	ldr	r2, [r2, #0]
    300e:	6019      	str	r1, [r3, #0]
    3010:	2a00      	cmp	r2, #0
    3012:	da03      	bge.n	301c <_printf_i+0x60>
    3014:	232d      	movs	r3, #45	; 0x2d
    3016:	4252      	negs	r2, r2
    3018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    301c:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 31e0 <_printf_i+0x224>
    3020:	230a      	movs	r3, #10
    3022:	e03f      	b.n	30a4 <_printf_i+0xe8>
    3024:	2973      	cmp	r1, #115	; 0x73
    3026:	f000 80a6 	beq.w	3176 <_printf_i+0x1ba>
    302a:	d808      	bhi.n	303e <_printf_i+0x82>
    302c:	296f      	cmp	r1, #111	; 0x6f
    302e:	d021      	beq.n	3074 <_printf_i+0xb8>
    3030:	2970      	cmp	r1, #112	; 0x70
    3032:	d1db      	bne.n	2fec <_printf_i+0x30>
    3034:	6822      	ldr	r2, [r4, #0]
    3036:	f042 0220 	orr.w	r2, r2, #32
    303a:	6022      	str	r2, [r4, #0]
    303c:	e003      	b.n	3046 <_printf_i+0x8a>
    303e:	2975      	cmp	r1, #117	; 0x75
    3040:	d018      	beq.n	3074 <_printf_i+0xb8>
    3042:	2978      	cmp	r1, #120	; 0x78
    3044:	d1d2      	bne.n	2fec <_printf_i+0x30>
    3046:	2278      	movs	r2, #120	; 0x78
    3048:	f8df c198 	ldr.w	ip, [pc, #408]	; 31e4 <_printf_i+0x228>
    304c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    3050:	e062      	b.n	3118 <_printf_i+0x15c>
    3052:	681a      	ldr	r2, [r3, #0]
    3054:	f104 0542 	add.w	r5, r4, #66	; 0x42
    3058:	1d11      	adds	r1, r2, #4
    305a:	6019      	str	r1, [r3, #0]
    305c:	6813      	ldr	r3, [r2, #0]
    305e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3062:	2301      	movs	r3, #1
    3064:	e094      	b.n	3190 <_printf_i+0x1d4>
    3066:	6812      	ldr	r2, [r2, #0]
    3068:	f015 0f40 	tst.w	r5, #64	; 0x40
    306c:	6019      	str	r1, [r3, #0]
    306e:	bf18      	it	ne
    3070:	b212      	sxthne	r2, r2
    3072:	e7cd      	b.n	3010 <_printf_i+0x54>
    3074:	f8d4 c000 	ldr.w	ip, [r4]
    3078:	681a      	ldr	r2, [r3, #0]
    307a:	f01c 0f80 	tst.w	ip, #128	; 0x80
    307e:	f102 0504 	add.w	r5, r2, #4
    3082:	601d      	str	r5, [r3, #0]
    3084:	d001      	beq.n	308a <_printf_i+0xce>
    3086:	6812      	ldr	r2, [r2, #0]
    3088:	e003      	b.n	3092 <_printf_i+0xd6>
    308a:	f01c 0f40 	tst.w	ip, #64	; 0x40
    308e:	d0fa      	beq.n	3086 <_printf_i+0xca>
    3090:	8812      	ldrh	r2, [r2, #0]
    3092:	296f      	cmp	r1, #111	; 0x6f
    3094:	bf0c      	ite	eq
    3096:	2308      	moveq	r3, #8
    3098:	230a      	movne	r3, #10
    309a:	f8df c144 	ldr.w	ip, [pc, #324]	; 31e0 <_printf_i+0x224>
    309e:	2100      	movs	r1, #0
    30a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    30a4:	6865      	ldr	r5, [r4, #4]
    30a6:	2d00      	cmp	r5, #0
    30a8:	bfa8      	it	ge
    30aa:	6821      	ldrge	r1, [r4, #0]
    30ac:	60a5      	str	r5, [r4, #8]
    30ae:	bfa4      	itt	ge
    30b0:	f021 0104 	bicge.w	r1, r1, #4
    30b4:	6021      	strge	r1, [r4, #0]
    30b6:	b90a      	cbnz	r2, 30bc <_printf_i+0x100>
    30b8:	2d00      	cmp	r5, #0
    30ba:	d046      	beq.n	314a <_printf_i+0x18e>
    30bc:	4605      	mov	r5, r0
    30be:	fbb2 f1f3 	udiv	r1, r2, r3
    30c2:	fb03 2e11 	mls	lr, r3, r1, r2
    30c6:	f81c e00e 	ldrb.w	lr, [ip, lr]
    30ca:	4293      	cmp	r3, r2
    30cc:	f805 ed01 	strb.w	lr, [r5, #-1]!
    30d0:	d939      	bls.n	3146 <_printf_i+0x18a>
    30d2:	2b08      	cmp	r3, #8
    30d4:	d10b      	bne.n	30ee <_printf_i+0x132>
    30d6:	6823      	ldr	r3, [r4, #0]
    30d8:	07da      	lsls	r2, r3, #31
    30da:	d508      	bpl.n	30ee <_printf_i+0x132>
    30dc:	6923      	ldr	r3, [r4, #16]
    30de:	6862      	ldr	r2, [r4, #4]
    30e0:	429a      	cmp	r2, r3
    30e2:	bfde      	ittt	le
    30e4:	2330      	movle	r3, #48	; 0x30
    30e6:	f805 3c01 	strble.w	r3, [r5, #-1]
    30ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    30ee:	1b40      	subs	r0, r0, r5
    30f0:	6120      	str	r0, [r4, #16]
    30f2:	f8cd 8000 	str.w	r8, [sp]
    30f6:	463b      	mov	r3, r7
    30f8:	aa03      	add	r2, sp, #12
    30fa:	4621      	mov	r1, r4
    30fc:	4630      	mov	r0, r6
    30fe:	f7ff fee7 	bl	2ed0 <_printf_common>
    3102:	3001      	adds	r0, #1
    3104:	d149      	bne.n	319a <_printf_i+0x1de>
    3106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    310a:	b005      	add	sp, #20
    310c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3110:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 31e0 <_printf_i+0x224>
    3114:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    3118:	681d      	ldr	r5, [r3, #0]
    311a:	6821      	ldr	r1, [r4, #0]
    311c:	f855 2b04 	ldr.w	r2, [r5], #4
    3120:	601d      	str	r5, [r3, #0]
    3122:	060d      	lsls	r5, r1, #24
    3124:	d50b      	bpl.n	313e <_printf_i+0x182>
    3126:	07cd      	lsls	r5, r1, #31
    3128:	bf44      	itt	mi
    312a:	f041 0120 	orrmi.w	r1, r1, #32
    312e:	6021      	strmi	r1, [r4, #0]
    3130:	b91a      	cbnz	r2, 313a <_printf_i+0x17e>
    3132:	6823      	ldr	r3, [r4, #0]
    3134:	f023 0320 	bic.w	r3, r3, #32
    3138:	6023      	str	r3, [r4, #0]
    313a:	2310      	movs	r3, #16
    313c:	e7af      	b.n	309e <_printf_i+0xe2>
    313e:	064b      	lsls	r3, r1, #25
    3140:	bf48      	it	mi
    3142:	b292      	uxthmi	r2, r2
    3144:	e7ef      	b.n	3126 <_printf_i+0x16a>
    3146:	460a      	mov	r2, r1
    3148:	e7b9      	b.n	30be <_printf_i+0x102>
    314a:	4605      	mov	r5, r0
    314c:	e7c1      	b.n	30d2 <_printf_i+0x116>
    314e:	681a      	ldr	r2, [r3, #0]
    3150:	f8d4 c000 	ldr.w	ip, [r4]
    3154:	1d15      	adds	r5, r2, #4
    3156:	6961      	ldr	r1, [r4, #20]
    3158:	f01c 0f80 	tst.w	ip, #128	; 0x80
    315c:	601d      	str	r5, [r3, #0]
    315e:	6813      	ldr	r3, [r2, #0]
    3160:	d001      	beq.n	3166 <_printf_i+0x1aa>
    3162:	6019      	str	r1, [r3, #0]
    3164:	e003      	b.n	316e <_printf_i+0x1b2>
    3166:	f01c 0f40 	tst.w	ip, #64	; 0x40
    316a:	d0fa      	beq.n	3162 <_printf_i+0x1a6>
    316c:	8019      	strh	r1, [r3, #0]
    316e:	2300      	movs	r3, #0
    3170:	4605      	mov	r5, r0
    3172:	6123      	str	r3, [r4, #16]
    3174:	e7bd      	b.n	30f2 <_printf_i+0x136>
    3176:	681a      	ldr	r2, [r3, #0]
    3178:	1d11      	adds	r1, r2, #4
    317a:	6019      	str	r1, [r3, #0]
    317c:	6815      	ldr	r5, [r2, #0]
    317e:	2100      	movs	r1, #0
    3180:	6862      	ldr	r2, [r4, #4]
    3182:	4628      	mov	r0, r5
    3184:	f000 f830 	bl	31e8 <memchr>
    3188:	b108      	cbz	r0, 318e <_printf_i+0x1d2>
    318a:	1b40      	subs	r0, r0, r5
    318c:	6060      	str	r0, [r4, #4]
    318e:	6863      	ldr	r3, [r4, #4]
    3190:	6123      	str	r3, [r4, #16]
    3192:	2300      	movs	r3, #0
    3194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3198:	e7ab      	b.n	30f2 <_printf_i+0x136>
    319a:	6923      	ldr	r3, [r4, #16]
    319c:	462a      	mov	r2, r5
    319e:	4639      	mov	r1, r7
    31a0:	4630      	mov	r0, r6
    31a2:	47c0      	blx	r8
    31a4:	3001      	adds	r0, #1
    31a6:	d0ae      	beq.n	3106 <_printf_i+0x14a>
    31a8:	6823      	ldr	r3, [r4, #0]
    31aa:	079b      	lsls	r3, r3, #30
    31ac:	d413      	bmi.n	31d6 <_printf_i+0x21a>
    31ae:	68e0      	ldr	r0, [r4, #12]
    31b0:	9b03      	ldr	r3, [sp, #12]
    31b2:	4298      	cmp	r0, r3
    31b4:	bfb8      	it	lt
    31b6:	4618      	movlt	r0, r3
    31b8:	e7a7      	b.n	310a <_printf_i+0x14e>
    31ba:	2301      	movs	r3, #1
    31bc:	464a      	mov	r2, r9
    31be:	4639      	mov	r1, r7
    31c0:	4630      	mov	r0, r6
    31c2:	47c0      	blx	r8
    31c4:	3001      	adds	r0, #1
    31c6:	d09e      	beq.n	3106 <_printf_i+0x14a>
    31c8:	3501      	adds	r5, #1
    31ca:	68e3      	ldr	r3, [r4, #12]
    31cc:	9a03      	ldr	r2, [sp, #12]
    31ce:	1a9b      	subs	r3, r3, r2
    31d0:	42ab      	cmp	r3, r5
    31d2:	dcf2      	bgt.n	31ba <_printf_i+0x1fe>
    31d4:	e7eb      	b.n	31ae <_printf_i+0x1f2>
    31d6:	2500      	movs	r5, #0
    31d8:	f104 0919 	add.w	r9, r4, #25
    31dc:	e7f5      	b.n	31ca <_printf_i+0x20e>
    31de:	bf00      	nop
    31e0:	000035bd 	.word	0x000035bd
    31e4:	000035ce 	.word	0x000035ce

000031e8 <memchr>:
    31e8:	b510      	push	{r4, lr}
    31ea:	b2c9      	uxtb	r1, r1
    31ec:	4402      	add	r2, r0
    31ee:	4290      	cmp	r0, r2
    31f0:	4603      	mov	r3, r0
    31f2:	d101      	bne.n	31f8 <memchr+0x10>
    31f4:	2300      	movs	r3, #0
    31f6:	e003      	b.n	3200 <memchr+0x18>
    31f8:	781c      	ldrb	r4, [r3, #0]
    31fa:	3001      	adds	r0, #1
    31fc:	428c      	cmp	r4, r1
    31fe:	d1f6      	bne.n	31ee <memchr+0x6>
    3200:	4618      	mov	r0, r3
    3202:	bd10      	pop	{r4, pc}

00003204 <memmove>:
    3204:	4288      	cmp	r0, r1
    3206:	b510      	push	{r4, lr}
    3208:	eb01 0302 	add.w	r3, r1, r2
    320c:	d902      	bls.n	3214 <memmove+0x10>
    320e:	4283      	cmp	r3, r0
    3210:	461c      	mov	r4, r3
    3212:	d807      	bhi.n	3224 <memmove+0x20>
    3214:	1e42      	subs	r2, r0, #1
    3216:	4299      	cmp	r1, r3
    3218:	d008      	beq.n	322c <memmove+0x28>
    321a:	f811 4b01 	ldrb.w	r4, [r1], #1
    321e:	f802 4f01 	strb.w	r4, [r2, #1]!
    3222:	e7f8      	b.n	3216 <memmove+0x12>
    3224:	1883      	adds	r3, r0, r2
    3226:	1a9a      	subs	r2, r3, r2
    3228:	429a      	cmp	r2, r3
    322a:	d100      	bne.n	322e <memmove+0x2a>
    322c:	bd10      	pop	{r4, pc}
    322e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    3232:	f803 1d01 	strb.w	r1, [r3, #-1]!
    3236:	e7f7      	b.n	3228 <memmove+0x24>

00003238 <_free_r>:
    3238:	b538      	push	{r3, r4, r5, lr}
    323a:	4605      	mov	r5, r0
    323c:	2900      	cmp	r1, #0
    323e:	d043      	beq.n	32c8 <_free_r+0x90>
    3240:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3244:	1f0c      	subs	r4, r1, #4
    3246:	2b00      	cmp	r3, #0
    3248:	bfb8      	it	lt
    324a:	18e4      	addlt	r4, r4, r3
    324c:	f000 f8d0 	bl	33f0 <__malloc_lock>
    3250:	4a1e      	ldr	r2, [pc, #120]	; (32cc <_free_r+0x94>)
    3252:	6813      	ldr	r3, [r2, #0]
    3254:	4610      	mov	r0, r2
    3256:	b933      	cbnz	r3, 3266 <_free_r+0x2e>
    3258:	6063      	str	r3, [r4, #4]
    325a:	6014      	str	r4, [r2, #0]
    325c:	4628      	mov	r0, r5
    325e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3262:	f000 b8cb 	b.w	33fc <__malloc_unlock>
    3266:	42a3      	cmp	r3, r4
    3268:	d90b      	bls.n	3282 <_free_r+0x4a>
    326a:	6821      	ldr	r1, [r4, #0]
    326c:	1862      	adds	r2, r4, r1
    326e:	4293      	cmp	r3, r2
    3270:	bf01      	itttt	eq
    3272:	681a      	ldreq	r2, [r3, #0]
    3274:	685b      	ldreq	r3, [r3, #4]
    3276:	1852      	addeq	r2, r2, r1
    3278:	6022      	streq	r2, [r4, #0]
    327a:	6063      	str	r3, [r4, #4]
    327c:	6004      	str	r4, [r0, #0]
    327e:	e7ed      	b.n	325c <_free_r+0x24>
    3280:	4613      	mov	r3, r2
    3282:	685a      	ldr	r2, [r3, #4]
    3284:	b10a      	cbz	r2, 328a <_free_r+0x52>
    3286:	42a2      	cmp	r2, r4
    3288:	d9fa      	bls.n	3280 <_free_r+0x48>
    328a:	6819      	ldr	r1, [r3, #0]
    328c:	1858      	adds	r0, r3, r1
    328e:	42a0      	cmp	r0, r4
    3290:	d10b      	bne.n	32aa <_free_r+0x72>
    3292:	6820      	ldr	r0, [r4, #0]
    3294:	4401      	add	r1, r0
    3296:	1858      	adds	r0, r3, r1
    3298:	4282      	cmp	r2, r0
    329a:	6019      	str	r1, [r3, #0]
    329c:	d1de      	bne.n	325c <_free_r+0x24>
    329e:	6810      	ldr	r0, [r2, #0]
    32a0:	6852      	ldr	r2, [r2, #4]
    32a2:	4401      	add	r1, r0
    32a4:	6019      	str	r1, [r3, #0]
    32a6:	605a      	str	r2, [r3, #4]
    32a8:	e7d8      	b.n	325c <_free_r+0x24>
    32aa:	d902      	bls.n	32b2 <_free_r+0x7a>
    32ac:	230c      	movs	r3, #12
    32ae:	602b      	str	r3, [r5, #0]
    32b0:	e7d4      	b.n	325c <_free_r+0x24>
    32b2:	6820      	ldr	r0, [r4, #0]
    32b4:	1821      	adds	r1, r4, r0
    32b6:	428a      	cmp	r2, r1
    32b8:	bf01      	itttt	eq
    32ba:	6811      	ldreq	r1, [r2, #0]
    32bc:	6852      	ldreq	r2, [r2, #4]
    32be:	1809      	addeq	r1, r1, r0
    32c0:	6021      	streq	r1, [r4, #0]
    32c2:	6062      	str	r2, [r4, #4]
    32c4:	605c      	str	r4, [r3, #4]
    32c6:	e7c9      	b.n	325c <_free_r+0x24>
    32c8:	bd38      	pop	{r3, r4, r5, pc}
    32ca:	bf00      	nop
    32cc:	20008384 	.word	0x20008384

000032d0 <_malloc_r>:
    32d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32d2:	1ccd      	adds	r5, r1, #3
    32d4:	f025 0503 	bic.w	r5, r5, #3
    32d8:	3508      	adds	r5, #8
    32da:	2d0c      	cmp	r5, #12
    32dc:	bf38      	it	cc
    32de:	250c      	movcc	r5, #12
    32e0:	2d00      	cmp	r5, #0
    32e2:	4606      	mov	r6, r0
    32e4:	db01      	blt.n	32ea <_malloc_r+0x1a>
    32e6:	42a9      	cmp	r1, r5
    32e8:	d903      	bls.n	32f2 <_malloc_r+0x22>
    32ea:	230c      	movs	r3, #12
    32ec:	6033      	str	r3, [r6, #0]
    32ee:	2000      	movs	r0, #0
    32f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32f2:	f000 f87d 	bl	33f0 <__malloc_lock>
    32f6:	4921      	ldr	r1, [pc, #132]	; (337c <_malloc_r+0xac>)
    32f8:	680a      	ldr	r2, [r1, #0]
    32fa:	4614      	mov	r4, r2
    32fc:	b99c      	cbnz	r4, 3326 <_malloc_r+0x56>
    32fe:	4f20      	ldr	r7, [pc, #128]	; (3380 <_malloc_r+0xb0>)
    3300:	683b      	ldr	r3, [r7, #0]
    3302:	b923      	cbnz	r3, 330e <_malloc_r+0x3e>
    3304:	4621      	mov	r1, r4
    3306:	4630      	mov	r0, r6
    3308:	f000 f862 	bl	33d0 <_sbrk_r>
    330c:	6038      	str	r0, [r7, #0]
    330e:	4629      	mov	r1, r5
    3310:	4630      	mov	r0, r6
    3312:	f000 f85d 	bl	33d0 <_sbrk_r>
    3316:	1c43      	adds	r3, r0, #1
    3318:	d123      	bne.n	3362 <_malloc_r+0x92>
    331a:	230c      	movs	r3, #12
    331c:	4630      	mov	r0, r6
    331e:	6033      	str	r3, [r6, #0]
    3320:	f000 f86c 	bl	33fc <__malloc_unlock>
    3324:	e7e3      	b.n	32ee <_malloc_r+0x1e>
    3326:	6823      	ldr	r3, [r4, #0]
    3328:	1b5b      	subs	r3, r3, r5
    332a:	d417      	bmi.n	335c <_malloc_r+0x8c>
    332c:	2b0b      	cmp	r3, #11
    332e:	d903      	bls.n	3338 <_malloc_r+0x68>
    3330:	6023      	str	r3, [r4, #0]
    3332:	441c      	add	r4, r3
    3334:	6025      	str	r5, [r4, #0]
    3336:	e004      	b.n	3342 <_malloc_r+0x72>
    3338:	6863      	ldr	r3, [r4, #4]
    333a:	42a2      	cmp	r2, r4
    333c:	bf0c      	ite	eq
    333e:	600b      	streq	r3, [r1, #0]
    3340:	6053      	strne	r3, [r2, #4]
    3342:	4630      	mov	r0, r6
    3344:	f000 f85a 	bl	33fc <__malloc_unlock>
    3348:	f104 000b 	add.w	r0, r4, #11
    334c:	1d23      	adds	r3, r4, #4
    334e:	f020 0007 	bic.w	r0, r0, #7
    3352:	1ac2      	subs	r2, r0, r3
    3354:	d0cc      	beq.n	32f0 <_malloc_r+0x20>
    3356:	1a1b      	subs	r3, r3, r0
    3358:	50a3      	str	r3, [r4, r2]
    335a:	e7c9      	b.n	32f0 <_malloc_r+0x20>
    335c:	4622      	mov	r2, r4
    335e:	6864      	ldr	r4, [r4, #4]
    3360:	e7cc      	b.n	32fc <_malloc_r+0x2c>
    3362:	1cc4      	adds	r4, r0, #3
    3364:	f024 0403 	bic.w	r4, r4, #3
    3368:	42a0      	cmp	r0, r4
    336a:	d0e3      	beq.n	3334 <_malloc_r+0x64>
    336c:	1a21      	subs	r1, r4, r0
    336e:	4630      	mov	r0, r6
    3370:	f000 f82e 	bl	33d0 <_sbrk_r>
    3374:	3001      	adds	r0, #1
    3376:	d1dd      	bne.n	3334 <_malloc_r+0x64>
    3378:	e7cf      	b.n	331a <_malloc_r+0x4a>
    337a:	bf00      	nop
    337c:	20008384 	.word	0x20008384
    3380:	20008388 	.word	0x20008388

00003384 <_realloc_r>:
    3384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3386:	4607      	mov	r7, r0
    3388:	4614      	mov	r4, r2
    338a:	460e      	mov	r6, r1
    338c:	b921      	cbnz	r1, 3398 <_realloc_r+0x14>
    338e:	4611      	mov	r1, r2
    3390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3394:	f7ff bf9c 	b.w	32d0 <_malloc_r>
    3398:	b922      	cbnz	r2, 33a4 <_realloc_r+0x20>
    339a:	f7ff ff4d 	bl	3238 <_free_r>
    339e:	4625      	mov	r5, r4
    33a0:	4628      	mov	r0, r5
    33a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33a4:	f000 f830 	bl	3408 <_malloc_usable_size_r>
    33a8:	42a0      	cmp	r0, r4
    33aa:	d20f      	bcs.n	33cc <_realloc_r+0x48>
    33ac:	4621      	mov	r1, r4
    33ae:	4638      	mov	r0, r7
    33b0:	f7ff ff8e 	bl	32d0 <_malloc_r>
    33b4:	4605      	mov	r5, r0
    33b6:	2800      	cmp	r0, #0
    33b8:	d0f2      	beq.n	33a0 <_realloc_r+0x1c>
    33ba:	4631      	mov	r1, r6
    33bc:	4622      	mov	r2, r4
    33be:	f7ff fbfd 	bl	2bbc <memcpy>
    33c2:	4631      	mov	r1, r6
    33c4:	4638      	mov	r0, r7
    33c6:	f7ff ff37 	bl	3238 <_free_r>
    33ca:	e7e9      	b.n	33a0 <_realloc_r+0x1c>
    33cc:	4635      	mov	r5, r6
    33ce:	e7e7      	b.n	33a0 <_realloc_r+0x1c>

000033d0 <_sbrk_r>:
    33d0:	b538      	push	{r3, r4, r5, lr}
    33d2:	2300      	movs	r3, #0
    33d4:	4c05      	ldr	r4, [pc, #20]	; (33ec <_sbrk_r+0x1c>)
    33d6:	4605      	mov	r5, r0
    33d8:	4608      	mov	r0, r1
    33da:	6023      	str	r3, [r4, #0]
    33dc:	f000 f81e 	bl	341c <_sbrk>
    33e0:	1c43      	adds	r3, r0, #1
    33e2:	d102      	bne.n	33ea <_sbrk_r+0x1a>
    33e4:	6823      	ldr	r3, [r4, #0]
    33e6:	b103      	cbz	r3, 33ea <_sbrk_r+0x1a>
    33e8:	602b      	str	r3, [r5, #0]
    33ea:	bd38      	pop	{r3, r4, r5, pc}
    33ec:	20008394 	.word	0x20008394

000033f0 <__malloc_lock>:
    33f0:	4801      	ldr	r0, [pc, #4]	; (33f8 <__malloc_lock+0x8>)
    33f2:	f000 b811 	b.w	3418 <__retarget_lock_acquire_recursive>
    33f6:	bf00      	nop
    33f8:	2000839c 	.word	0x2000839c

000033fc <__malloc_unlock>:
    33fc:	4801      	ldr	r0, [pc, #4]	; (3404 <__malloc_unlock+0x8>)
    33fe:	f000 b80c 	b.w	341a <__retarget_lock_release_recursive>
    3402:	bf00      	nop
    3404:	2000839c 	.word	0x2000839c

00003408 <_malloc_usable_size_r>:
    3408:	f851 3c04 	ldr.w	r3, [r1, #-4]
    340c:	1f18      	subs	r0, r3, #4
    340e:	2b00      	cmp	r3, #0
    3410:	bfbc      	itt	lt
    3412:	580b      	ldrlt	r3, [r1, r0]
    3414:	18c0      	addlt	r0, r0, r3
    3416:	4770      	bx	lr

00003418 <__retarget_lock_acquire_recursive>:
    3418:	4770      	bx	lr

0000341a <__retarget_lock_release_recursive>:
    341a:	4770      	bx	lr

0000341c <_sbrk>:
    341c:	4a04      	ldr	r2, [pc, #16]	; (3430 <_sbrk+0x14>)
    341e:	4905      	ldr	r1, [pc, #20]	; (3434 <_sbrk+0x18>)
    3420:	6813      	ldr	r3, [r2, #0]
    3422:	2b00      	cmp	r3, #0
    3424:	bf08      	it	eq
    3426:	460b      	moveq	r3, r1
    3428:	4418      	add	r0, r3
    342a:	6010      	str	r0, [r2, #0]
    342c:	4618      	mov	r0, r3
    342e:	4770      	bx	lr
    3430:	2000838c 	.word	0x2000838c
    3434:	200083a8 	.word	0x200083a8

00003438 <_exit>:
    3438:	e7fe      	b.n	3438 <_exit>
    343a:	bf00      	nop

0000343c <_init>:
    343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    343e:	bf00      	nop

00003440 <_fini>:
    3440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3442:	bf00      	nop
    3444:	4d495053 	.word	0x4d495053
    3448:	203a2030 	.word	0x203a2030
    344c:	6f727265 	.word	0x6f727265
    3450:	000a0d72 	.word	0x000a0d72
    3454:	70746553 	.word	0x70746553
    3458:	20642520 	.word	0x20642520
    345c:	646e6553 	.word	0x646e6553
    3460:	000a0d20 	.word	0x000a0d20
    3464:	70746553 	.word	0x70746553
    3468:	20642520 	.word	0x20642520
    346c:	65636552 	.word	0x65636552
    3470:	0d657669 	.word	0x0d657669
    3474:	0000000a 	.word	0x0000000a
    3478:	70746553 	.word	0x70746553
    347c:	20642520 	.word	0x20642520
    3480:	65636552 	.word	0x65636552
    3484:	20657669 	.word	0x20657669
    3488:	5d58255b 	.word	0x5d58255b
    348c:	00000a0d 	.word	0x00000a0d
    3490:	20554353 	.word	0x20554353
    3494:	444d4352 	.word	0x444d4352
    3498:	5d58255b 	.word	0x5d58255b
    349c:	00000a20 	.word	0x00000a20
    34a0:	20554353 	.word	0x20554353
    34a4:	5b3a6463 	.word	0x5b3a6463
    34a8:	2c5d5825 	.word	0x2c5d5825
    34ac:	255b6176 	.word	0x255b6176
    34b0:	000a5d58 	.word	0x000a5d58
    34b4:	5f315f73 	.word	0x5f315f73
    34b8:	5f333237 	.word	0x5f333237
    34bc:	6d697073 	.word	0x6d697073
    34c0:	70735f30 	.word	0x70735f30
    34c4:	5f306d69 	.word	0x5f306d69
    34c8:	5f706978 	.word	0x5f706978
    34cc:	64697571 	.word	0x64697571
    34d0:	73616320 	.word	0x73616320
    34d4:	0a0d2065 	.word	0x0a0d2065
    34d8:	00000000 	.word	0x00000000
    34dc:	53414c46 	.word	0x53414c46
    34e0:	64692048 	.word	0x64692048
    34e4:	58255b3a 	.word	0x58255b3a
    34e8:	000a0d5d 	.word	0x000a0d5d
    34ec:	6d697073 	.word	0x6d697073
    34f0:	72452030 	.word	0x72452030
    34f4:	20657361 	.word	0x20657361
    34f8:	736c6166 	.word	0x736c6166
    34fc:	000a0d65 	.word	0x000a0d65
    3500:	6d697073 	.word	0x6d697073
    3504:	4f522030 	.word	0x4f522030
    3508:	38753a4d 	.word	0x38753a4d
    350c:	5832255b 	.word	0x5832255b
    3510:	32255b5d 	.word	0x32255b5d
    3514:	255b5d58 	.word	0x255b5d58
    3518:	5b5d5832 	.word	0x5b5d5832
    351c:	5d583225 	.word	0x5d583225
    3520:	3631752c 	.word	0x3631752c
    3524:	5834255b 	.word	0x5834255b
    3528:	34255b5d 	.word	0x34255b5d
    352c:	752c5d58 	.word	0x752c5d58
    3530:	255b3233 	.word	0x255b3233
    3534:	0d5d5838 	.word	0x0d5d5838
    3538:	0000000a 	.word	0x0000000a
    353c:	6d697073 	.word	0x6d697073
    3540:	49582030 	.word	0x49582030
    3544:	38753a50 	.word	0x38753a50
    3548:	5832255b 	.word	0x5832255b
    354c:	32255b5d 	.word	0x32255b5d
    3550:	255b5d58 	.word	0x255b5d58
    3554:	5b5d5832 	.word	0x5b5d5832
    3558:	5d583225 	.word	0x5d583225
    355c:	3631752c 	.word	0x3631752c
    3560:	5834255b 	.word	0x5834255b
    3564:	34255b5d 	.word	0x34255b5d
    3568:	752c5d58 	.word	0x752c5d58
    356c:	255b3233 	.word	0x255b3233
    3570:	0d5d5838 	.word	0x0d5d5838
    3574:	0000000a 	.word	0x0000000a
    3578:	5f315f73 	.word	0x5f315f73
    357c:	5f333237 	.word	0x5f333237
    3580:	6d697073 	.word	0x6d697073
    3584:	70735f30 	.word	0x70735f30
    3588:	5f306d69 	.word	0x5f306d69
    358c:	5f706978 	.word	0x5f706978
    3590:	64697571 	.word	0x64697571
    3594:	73616320 	.word	0x73616320
    3598:	6f632065 	.word	0x6f632065
    359c:	656c706d 	.word	0x656c706d
    35a0:	20646574 	.word	0x20646574
    35a4:	00000a0d 	.word	0x00000a0d

000035a8 <_global_impure_ptr>:
    35a8:	20008010 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    35b8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    35c8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    35d8:	64636261                                 abcdef.
