
.//s_1_761_i2c_i2c_tx.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20010000 	.word	0x20010000
       4:	00000201 	.word	0x00000201
       8:	00000249 	.word	0x00000249
       c:	0000024b 	.word	0x0000024b
      10:	0000024d 	.word	0x0000024d
      14:	0000024f 	.word	0x0000024f
      18:	00000251 	.word	0x00000251
	...
      2c:	00000253 	.word	0x00000253
      30:	00000255 	.word	0x00000255
      34:	00000000 	.word	0x00000000
      38:	00000257 	.word	0x00000257
      3c:	000019dd 	.word	0x000019dd
      40:	0000025b 	.word	0x0000025b
      44:	0000025d 	.word	0x0000025d
      48:	0000025f 	.word	0x0000025f
      4c:	00000261 	.word	0x00000261
      50:	00000263 	.word	0x00000263
      54:	00000265 	.word	0x00000265
      58:	00000267 	.word	0x00000267
      5c:	00000269 	.word	0x00000269
      60:	0000026b 	.word	0x0000026b
      64:	0000026d 	.word	0x0000026d
      68:	0000026f 	.word	0x0000026f
      6c:	00000271 	.word	0x00000271
      70:	00000273 	.word	0x00000273
      74:	00000275 	.word	0x00000275
      78:	00000277 	.word	0x00000277
      7c:	00000279 	.word	0x00000279
      80:	0000027b 	.word	0x0000027b
      84:	0000027d 	.word	0x0000027d
      88:	0000027f 	.word	0x0000027f
      8c:	00000281 	.word	0x00000281
      90:	00000283 	.word	0x00000283
      94:	00000285 	.word	0x00000285
      98:	00000287 	.word	0x00000287
      9c:	00000289 	.word	0x00000289
      a0:	0000028b 	.word	0x0000028b
      a4:	0000028d 	.word	0x0000028d
      a8:	0000028f 	.word	0x0000028f
      ac:	00000291 	.word	0x00000291
      b0:	00000293 	.word	0x00000293
      b4:	00000295 	.word	0x00000295
      b8:	00000297 	.word	0x00000297
      bc:	00000299 	.word	0x00000299
      c0:	0000029b 	.word	0x0000029b
      c4:	0000029d 	.word	0x0000029d
      c8:	0000029f 	.word	0x0000029f
      cc:	000002a1 	.word	0x000002a1
      d0:	000002a3 	.word	0x000002a3
      d4:	000002a5 	.word	0x000002a5
      d8:	000002a7 	.word	0x000002a7
      dc:	000002a9 	.word	0x000002a9
      e0:	000002ab 	.word	0x000002ab
      e4:	000002ad 	.word	0x000002ad
      e8:	000002af 	.word	0x000002af
      ec:	000002b1 	.word	0x000002b1
      f0:	000002b3 	.word	0x000002b3
      f4:	000002b5 	.word	0x000002b5
      f8:	000002b7 	.word	0x000002b7
      fc:	000002b9 	.word	0x000002b9
     100:	000002bb 	.word	0x000002bb
     104:	000002bd 	.word	0x000002bd
     108:	000002bf 	.word	0x000002bf
     10c:	000002c1 	.word	0x000002c1
     110:	000002c3 	.word	0x000002c3
     114:	000002c5 	.word	0x000002c5
     118:	000002c7 	.word	0x000002c7
     11c:	000002c9 	.word	0x000002c9
     120:	000002cb 	.word	0x000002cb
     124:	000002cd 	.word	0x000002cd
     128:	000002cf 	.word	0x000002cf
     12c:	000002d1 	.word	0x000002d1
     130:	000002d3 	.word	0x000002d3
     134:	000002d5 	.word	0x000002d5
     138:	000002d7 	.word	0x000002d7

0000013c <boot_flag>:
     13c:	52554e58 	.word	0x52554e58

00000140 <program_size>:
     140:	00000000 	.word	0x00000000

00000144 <ram_addr>:
     144:	00000000 	.word	0x00000000

00000148 <copy_unit_size>:
     148:	00000000 	.word	0x00000000

0000014c <cpu_clk_type>:
     14c:	03d09000 	.word	0x03d09000

00000150 <qspi_clk_type>:
     150:	03d09000 	.word	0x03d09000

00000154 <cache_cfg>:
     154:	00000061 	.word	0x00000061

00000158 <clock_divider>:
     158:	00000002 	.word	0x00000002

0000015c <frame_format_size>:
     15c:	0000001f 	.word	0x0000001f

00000160 <ssi_frame_format>:
     160:	00000000 	.word	0x00000000

00000164 <clock_phase>:
     164:	00000000 	.word	0x00000000

00000168 <clock_polarity>:
     168:	00000000 	.word	0x00000000

0000016c <transfer_mode>:
     16c:	00000003 	.word	0x00000003

00000170 <slave_output_enable>:
     170:	00000000 	.word	0x00000000

00000174 <operation_mode>:
     174:	00000000 	.word	0x00000000

00000178 <slave_select_toggle_en>:
     178:	00000000 	.word	0x00000000

0000017c <control_farme_size>:
     17c:	00000000 	.word	0x00000000

00000180 <spi_frame_format>:
     180:	00000001 	.word	0x00000001

00000184 <spi_hyperbus_en>:
     184:	00000000 	.word	0x00000000

00000188 <data_frames_number>:
     188:	00000000 	.word	0x00000000

0000018c <slaves_select>:
     18c:	00000001 	.word	0x00000001

00000190 <tx_fifo_threshold_level>:
     190:	00000000 	.word	0x00000000

00000194 <tx_fifo_start_fifo_level>:
     194:	00000000 	.word	0x00000000

00000198 <rx_fifo_threshold_level>:
     198:	00000000 	.word	0x00000000

0000019c <dma_rx_data_level>:
     19c:	00000000 	.word	0x00000000

000001a0 <dma_tx_data_level>:
     1a0:	00000000 	.word	0x00000000

000001a4 <unmask_interrupt>:
     1a4:	00000000 	.word	0x00000000

000001a8 <xip_spi_frame_format>:
     1a8:	00000001 	.word	0x00000001

000001ac <transfer_type>:
     1ac:	00000000 	.word	0x00000000

000001b0 <address_length>:
     1b0:	00000006 	.word	0x00000006

000001b4 <instruction_length>:
     1b4:	00000002 	.word	0x00000002

000001b8 <xip_mode_bit_en>:
     1b8:	00000000 	.word	0x00000000

000001bc <wait_cycles>:
     1bc:	00000008 	.word	0x00000008

000001c0 <xip_dfs_hsize_hburst_en>:
     1c0:	00000000 	.word	0x00000000

000001c4 <xip_spi_ddr_en>:
     1c4:	00000000 	.word	0x00000000

000001c8 <instruction_ddr_enable>:
     1c8:	00000000 	.word	0x00000000

000001cc <read_data_strobe_enable>:
     1cc:	00000000 	.word	0x00000000

000001d0 <xip_instruction_enable>:
     1d0:	00000001 	.word	0x00000001

000001d4 <xip_continuous_transfer_enable>:
     1d4:	00000000 	.word	0x00000000

000001d8 <xip_spi_hyerbus_format_enable>:
     1d8:	00000000 	.word	0x00000000

000001dc <xip_rxds_signaling_enable>:
     1dc:	00000000 	.word	0x00000000

000001e0 <xip_mode_bit_length>:
     1e0:	00000000 	.word	0x00000000

000001e4 <xip_pre_fetch_enable>:
     1e4:	00000000 	.word	0x00000000

000001e8 <xip_inst_transfer_opcode>:
     1e8:	0000003b 	.word	0x0000003b

000001ec <xip_wrap_transfer_opcode>:
     1ec:	00000000 	.word	0x00000000

000001f0 <slaves_enbale_mask>:
     1f0:	00000001 	.word	0x00000001

000001f4 <spi_clk_stretch_en>:
     1f4:	00000000 	.word	0x00000000

000001f8 <spi_data_mask_en>:
     1f8:	00000000 	.word	0x00000000

000001fc <xip_time_out>:
     1fc:	00000032 	.word	0x00000032

00000200 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     200:	490b      	ldr	r1, [pc, #44]	; (230 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     202:	4a0c      	ldr	r2, [pc, #48]	; (234 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     204:	4b0c      	ldr	r3, [pc, #48]	; (238 <Reset_Handler+0x38>)

    subs    r3, r2
     206:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     208:	dd03      	ble.n	212 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     20a:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     20c:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     20e:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     210:	dcfb      	bgt.n	20a <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     212:	490a      	ldr	r1, [pc, #40]	; (23c <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     214:	4a0a      	ldr	r2, [pc, #40]	; (240 <Reset_Handler+0x40>)

    movs    r0, 0
     216:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     218:	4291      	cmp	r1, r2
    itt    lt
     21a:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     21c:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     220:	e7fa      	blt.n	218 <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     222:	4808      	ldr	r0, [pc, #32]	; (244 <Reset_Handler+0x44>)
    blx     r0
     224:	4780      	blx	r0
#endif

    bl    main
     226:	f001 fccb 	bl	1bc0 <main>
    bl    exit
     22a:	f001 fdf9 	bl	1e20 <exit>
     22e:	0000      	.short	0x0000
    ldr    r1, =__etext
     230:	000027eb 	.word	0x000027eb
    ldr    r2, =__data_start__
     234:	20008000 	.word	0x20008000
    ldr    r3, =__data_end__
     238:	2000806c 	.word	0x2000806c
    ldr r1, =__bss_start__
     23c:	2000806c 	.word	0x2000806c
    ldr r2, =__bss_end__
     240:	200082ac 	.word	0x200082ac
    ldr     r0,=SystemInit
     244:	000002f5 	.word	0x000002f5

00000248 <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     248:	e7fe      	b.n	248 <NMI_Handler>

0000024a <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     24a:	e7fe      	b.n	24a <HardFault_Handler>

0000024c <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     24c:	e7fe      	b.n	24c <MemManage_Handler>

0000024e <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     24e:	e7fe      	b.n	24e <BusFault_Handler>

00000250 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     250:	e7fe      	b.n	250 <UsageFault_Handler>

00000252 <SVC_Handler>:
    def_default_handler    SVC_Handler
     252:	e7fe      	b.n	252 <SVC_Handler>

00000254 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     254:	e7fe      	b.n	254 <DebugMon_Handler>

00000256 <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     256:	e7fe      	b.n	256 <PendSV_Handler>
    def_default_handler    SysTick_Handler
     258:	e7fe      	b.n	258 <PendSV_Handler+0x2>

0000025a <UART0_IRQHandler>:

/* IRQ Handlers */

    def_default_handler     UART0_IRQHandler 
     25a:	e7fe      	b.n	25a <UART0_IRQHandler>

0000025c <UART1_IRQHandler>:
    def_default_handler     UART1_IRQHandler        
     25c:	e7fe      	b.n	25c <UART1_IRQHandler>

0000025e <DMA_IRQHandler>:
    def_default_handler     DMA_IRQHandler          
     25e:	e7fe      	b.n	25e <DMA_IRQHandler>

00000260 <SPIM0_IRQHandler>:
    def_default_handler     SPIM0_IRQHandler        
     260:	e7fe      	b.n	260 <SPIM0_IRQHandler>

00000262 <SPIM1_IRQHandler>:
    def_default_handler     SPIM1_IRQHandler        
     262:	e7fe      	b.n	262 <SPIM1_IRQHandler>

00000264 <SPIS1_IRQHandler>:
    def_default_handler     SPIS1_IRQHandler        
     264:	e7fe      	b.n	264 <SPIS1_IRQHandler>

00000266 <I2C0_IRQHandler>:
    def_default_handler     I2C0_IRQHandler         
     266:	e7fe      	b.n	266 <I2C0_IRQHandler>

00000268 <I2C1_IRQHandler>:
    def_default_handler     I2C1_IRQHandler         
     268:	e7fe      	b.n	268 <I2C1_IRQHandler>

0000026a <I2SM_IRQHandler>:
    def_default_handler     I2SM_IRQHandler         
     26a:	e7fe      	b.n	26a <I2SM_IRQHandler>

0000026c <I2SS_IRQHandler>:
    def_default_handler     I2SS_IRQHandler         
     26c:	e7fe      	b.n	26c <I2SS_IRQHandler>

0000026e <RTC_IRQHandler>:
    def_default_handler     RTC_IRQHandler          
     26e:	e7fe      	b.n	26e <RTC_IRQHandler>

00000270 <QDEC_IRQHandler>:
    def_default_handler     QDEC_IRQHandler         
     270:	e7fe      	b.n	270 <QDEC_IRQHandler>

00000272 <TIMER0_IRQHandler>:
    def_default_handler     TIMER0_IRQHandler       
     272:	e7fe      	b.n	272 <TIMER0_IRQHandler>

00000274 <TIMER1_IRQHandler>:
    def_default_handler     TIMER1_IRQHandler       
     274:	e7fe      	b.n	274 <TIMER1_IRQHandler>

00000276 <TIMER2_IRQHandler>:
    def_default_handler     TIMER2_IRQHandler       
     276:	e7fe      	b.n	276 <TIMER2_IRQHandler>

00000278 <TIMER3_IRQHandler>:
    def_default_handler     TIMER3_IRQHandler       
     278:	e7fe      	b.n	278 <TIMER3_IRQHandler>

0000027a <TIMER4_IRQHandler>:
    def_default_handler     TIMER4_IRQHandler       
     27a:	e7fe      	b.n	27a <TIMER4_IRQHandler>

0000027c <TIMER5_IRQHandler>:
    def_default_handler     TIMER5_IRQHandler       
     27c:	e7fe      	b.n	27c <TIMER5_IRQHandler>

0000027e <TIMER6_IRQHandler>:
    def_default_handler     TIMER6_IRQHandler       
     27e:	e7fe      	b.n	27e <TIMER6_IRQHandler>

00000280 <TIMER7_IRQHandler>:
    def_default_handler     TIMER7_IRQHandler       
     280:	e7fe      	b.n	280 <TIMER7_IRQHandler>

00000282 <GPIO0_IRQHandler>:
    def_default_handler     GPIO0_IRQHandler        
     282:	e7fe      	b.n	282 <GPIO0_IRQHandler>

00000284 <GPIO1_IRQHandler>:
    def_default_handler     GPIO1_IRQHandler        
     284:	e7fe      	b.n	284 <GPIO1_IRQHandler>

00000286 <GPIO2_IRQHandler>:
    def_default_handler     GPIO2_IRQHandler        
     286:	e7fe      	b.n	286 <GPIO2_IRQHandler>

00000288 <GPIO3_IRQHandler>:
    def_default_handler     GPIO3_IRQHandler        
     288:	e7fe      	b.n	288 <GPIO3_IRQHandler>

0000028a <GPIO4_IRQHandler>:
    def_default_handler     GPIO4_IRQHandler        
     28a:	e7fe      	b.n	28a <GPIO4_IRQHandler>

0000028c <GPIO5_IRQHandler>:
    def_default_handler     GPIO5_IRQHandler        
     28c:	e7fe      	b.n	28c <GPIO5_IRQHandler>

0000028e <GPIO6_IRQHandler>:
    def_default_handler     GPIO6_IRQHandler        
     28e:	e7fe      	b.n	28e <GPIO6_IRQHandler>

00000290 <GPIO7_IRQHandler>:
    def_default_handler     GPIO7_IRQHandler        
     290:	e7fe      	b.n	290 <GPIO7_IRQHandler>

00000292 <GPIO8_IRQHandler>:
    def_default_handler     GPIO8_IRQHandler        
     292:	e7fe      	b.n	292 <GPIO8_IRQHandler>

00000294 <GPIO9_IRQHandler>:
    def_default_handler     GPIO9_IRQHandler        
     294:	e7fe      	b.n	294 <GPIO9_IRQHandler>

00000296 <GPIO10_IRQHandler>:
    def_default_handler     GPIO10_IRQHandler        
     296:	e7fe      	b.n	296 <GPIO10_IRQHandler>

00000298 <GPIO11_IRQHandler>:
    def_default_handler     GPIO11_IRQHandler       
     298:	e7fe      	b.n	298 <GPIO11_IRQHandler>

0000029a <GPIO12_IRQHandler>:
    def_default_handler     GPIO12_IRQHandler       
     29a:	e7fe      	b.n	29a <GPIO12_IRQHandler>

0000029c <GPIO13_IRQHandler>:
    def_default_handler     GPIO13_IRQHandler       
     29c:	e7fe      	b.n	29c <GPIO13_IRQHandler>

0000029e <GPIO14_IRQHandler>:
    def_default_handler     GPIO14_IRQHandler       
     29e:	e7fe      	b.n	29e <GPIO14_IRQHandler>

000002a0 <GPIO15_IRQHandler>:
    def_default_handler     GPIO15_IRQHandler       
     2a0:	e7fe      	b.n	2a0 <GPIO15_IRQHandler>

000002a2 <GPIO16_IRQHandler>:
    def_default_handler     GPIO16_IRQHandler       
     2a2:	e7fe      	b.n	2a2 <GPIO16_IRQHandler>

000002a4 <GPIO17_IRQHandler>:
    def_default_handler     GPIO17_IRQHandler       
     2a4:	e7fe      	b.n	2a4 <GPIO17_IRQHandler>

000002a6 <GPIO18_IRQHandler>:
    def_default_handler     GPIO18_IRQHandler       
     2a6:	e7fe      	b.n	2a6 <GPIO18_IRQHandler>

000002a8 <GPIO19_IRQHandler>:
    def_default_handler     GPIO19_IRQHandler       
     2a8:	e7fe      	b.n	2a8 <GPIO19_IRQHandler>

000002aa <GPIO20_IRQHandler>:
    def_default_handler     GPIO20_IRQHandler       
     2aa:	e7fe      	b.n	2aa <GPIO20_IRQHandler>

000002ac <GPIO21_IRQHandler>:
    def_default_handler     GPIO21_IRQHandler       
     2ac:	e7fe      	b.n	2ac <GPIO21_IRQHandler>

000002ae <GPIO22_IRQHandler>:
    def_default_handler     GPIO22_IRQHandler       
     2ae:	e7fe      	b.n	2ae <GPIO22_IRQHandler>

000002b0 <GPIO23_IRQHandler>:
    def_default_handler     GPIO23_IRQHandler       
     2b0:	e7fe      	b.n	2b0 <GPIO23_IRQHandler>

000002b2 <GPIO24_IRQHandler>:
    def_default_handler     GPIO24_IRQHandler       
     2b2:	e7fe      	b.n	2b2 <GPIO24_IRQHandler>

000002b4 <GPIO25_IRQHandler>:
    def_default_handler     GPIO25_IRQHandler       
     2b4:	e7fe      	b.n	2b4 <GPIO25_IRQHandler>

000002b6 <GPIO26_IRQHandler>:
    def_default_handler     GPIO26_IRQHandler       
     2b6:	e7fe      	b.n	2b6 <GPIO26_IRQHandler>

000002b8 <GPIO27_IRQHandler>:
    def_default_handler     GPIO27_IRQHandler       
     2b8:	e7fe      	b.n	2b8 <GPIO27_IRQHandler>

000002ba <GPIO28_IRQHandler>:
    def_default_handler     GPIO28_IRQHandler       
     2ba:	e7fe      	b.n	2ba <GPIO28_IRQHandler>

000002bc <GPIO29_IRQHandler>:
    def_default_handler     GPIO29_IRQHandler       
     2bc:	e7fe      	b.n	2bc <GPIO29_IRQHandler>

000002be <GPIO30_IRQHandler>:
    def_default_handler     GPIO30_IRQHandler       
     2be:	e7fe      	b.n	2be <GPIO30_IRQHandler>

000002c0 <GPIO31_IRQHandler>:
    def_default_handler     GPIO31_IRQHandler       
     2c0:	e7fe      	b.n	2c0 <GPIO31_IRQHandler>

000002c2 <rwbt_isr>:
    def_default_handler     rwbt_isr   			   
     2c2:	e7fe      	b.n	2c2 <rwbt_isr>

000002c4 <rwble_isr>:
    def_default_handler     rwble_isr   			   
     2c4:	e7fe      	b.n	2c4 <rwble_isr>

000002c6 <rwip_isr>:
    def_default_handler     rwip_isr				   
     2c6:	e7fe      	b.n	2c6 <rwip_isr>

000002c8 <pcm_isr>:
    def_default_handler     pcm_isr				   
     2c8:	e7fe      	b.n	2c8 <pcm_isr>

000002ca <apb2dpv_isr>:
    def_default_handler     apb2dpv_isr			   
     2ca:	e7fe      	b.n	2ca <apb2dpv_isr>

000002cc <bboscen_isr>:
    def_default_handler     bboscen_isr			   
     2cc:	e7fe      	b.n	2cc <bboscen_isr>

000002ce <RF_IRQHandler>:
    def_default_handler     RF_IRQHandler           
     2ce:	e7fe      	b.n	2ce <RF_IRQHandler>

000002d0 <USBSRT_IRQHandler>:
    def_default_handler     USBSRT_IRQHandler       
     2d0:	e7fe      	b.n	2d0 <USBSRT_IRQHandler>

000002d2 <USBSTO_IRQHandler>:
    def_default_handler     USBSTO_IRQHandler	   
     2d2:	e7fe      	b.n	2d2 <USBSTO_IRQHandler>

000002d4 <USB_IRQHandler>:
    def_default_handler     USB_IRQHandler          
     2d4:	e7fe      	b.n	2d4 <USB_IRQHandler>

000002d6 <info_init_get>:
    def_default_handler     info_init_get           
     2d6:	e7fe      	b.n	2d6 <info_init_get>

000002d8 <SystemCoreClockUpdate>:
  System Core Clock Variable
 *----------------------------------------------------------------------------*/
unsigned long int SystemCoreClock = SYSTEM_CLOCK;  /* System Core Clock Frequency      */

void SystemCoreClockUpdate(unsigned long int clock)
{
     2d8:	b480      	push	{r7}
     2da:	b083      	sub	sp, #12
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
    SystemCoreClock = clock;
     2e0:	4a03      	ldr	r2, [pc, #12]	; (2f0 <SystemCoreClockUpdate+0x18>)
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	6013      	str	r3, [r2, #0]
}
     2e6:	bf00      	nop
     2e8:	370c      	adds	r7, #12
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	20008000 	.word	0x20008000

000002f4 <SystemInit>:

void SystemInit (void)
{
     2f4:	b480      	push	{r7}
     2f6:	af00      	add	r7, sp, #0
    SystemCoreClock = SYSTEM_CLOCK;
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <SystemInit+0x14>)
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <SystemInit+0x18>)
     2fc:	601a      	str	r2, [r3, #0]
}
     2fe:	bf00      	nop
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20008000 	.word	0x20008000
     30c:	016e3600 	.word	0x016e3600

00000310 <SystemDevClockCtl>:

void SystemDevClockCtl(CKEnId_Type id, uint8_t enable)
{
     310:	b480      	push	{r7}
     312:	b083      	sub	sp, #12
     314:	af00      	add	r7, sp, #0
     316:	4603      	mov	r3, r0
     318:	460a      	mov	r2, r1
     31a:	71fb      	strb	r3, [r7, #7]
     31c:	4613      	mov	r3, r2
     31e:	71bb      	strb	r3, [r7, #6]
   if (enable) {
     320:	79bb      	ldrb	r3, [r7, #6]
     322:	2b00      	cmp	r3, #0
     324:	d00b      	beq.n	33e <SystemDevClockCtl+0x2e>
       SCU->CLK_EN |= 0x01ul << id;
     326:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	79fb      	ldrb	r3, [r7, #7]
     32e:	2101      	movs	r1, #1
     330:	fa01 f303 	lsl.w	r3, r1, r3
     334:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     338:	4313      	orrs	r3, r2
     33a:	600b      	str	r3, [r1, #0]
   }
   else {
       SCU->CLK_EN &= ~(0x01ul << id);
   }
}
     33c:	e00b      	b.n	356 <SystemDevClockCtl+0x46>
       SCU->CLK_EN &= ~(0x01ul << id);
     33e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     342:	681a      	ldr	r2, [r3, #0]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	2101      	movs	r1, #1
     348:	fa01 f303 	lsl.w	r3, r1, r3
     34c:	43db      	mvns	r3, r3
     34e:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     352:	4013      	ands	r3, r2
     354:	600b      	str	r3, [r1, #0]
}
     356:	bf00      	nop
     358:	370c      	adds	r7, #12
     35a:	46bd      	mov	sp, r7
     35c:	bc80      	pop	{r7}
     35e:	4770      	bx	lr

00000360 <SystemDevRstCtl>:

void SystemDevRstCtl(SwRstId_Type id)
{
     360:	b480      	push	{r7}
     362:	b083      	sub	sp, #12
     364:	af00      	add	r7, sp, #0
     366:	4603      	mov	r3, r0
     368:	71fb      	strb	r3, [r7, #7]
    SCU->SW_RST = 1 << id;
     36a:	79fb      	ldrb	r3, [r7, #7]
     36c:	2201      	movs	r2, #1
     36e:	409a      	lsls	r2, r3
     370:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     374:	605a      	str	r2, [r3, #4]
    /* The SoC need us set it to zero when reset request is triggered! */
    SCU->SW_RST = 0 << id;
     376:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     37a:	2200      	movs	r2, #0
     37c:	605a      	str	r2, [r3, #4]
}
     37e:	bf00      	nop
     380:	370c      	adds	r7, #12
     382:	46bd      	mov	sp, r7
     384:	bc80      	pop	{r7}
     386:	4770      	bx	lr

00000388 <SystemPADConfig>:

void SystemPADConfig(PADId_Type pad_id, PADConfig_Type *config)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	4603      	mov	r3, r0
     390:	6039      	str	r1, [r7, #0]
     392:	71fb      	strb	r3, [r7, #7]
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     394:	683b      	ldr	r3, [r7, #0]
     396:	781b      	ldrb	r3, [r3, #0]
     398:	f3c3 0300 	ubfx	r3, r3, #0, #1
     39c:	b2db      	uxtb	r3, r3
     39e:	f003 0201 	and.w	r2, r3, #1
                            (config->ie     &0x01) << 1 | 
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
     3aa:	b2db      	uxtb	r3, r3
     3ac:	005b      	lsls	r3, r3, #1
     3ae:	f003 0302 	and.w	r3, r3, #2
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3b2:	431a      	orrs	r2, r3
                            (config->oen    &0x01) << 2 | 
     3b4:	683b      	ldr	r3, [r7, #0]
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
     3bc:	b2db      	uxtb	r3, r3
     3be:	009b      	lsls	r3, r3, #2
     3c0:	f003 0304 	and.w	r3, r3, #4
                            (config->ie     &0x01) << 1 | 
     3c4:	431a      	orrs	r2, r3
                            (config->ren    &0x01) << 3 | 
     3c6:	683b      	ldr	r3, [r7, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     3ce:	b2db      	uxtb	r3, r3
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0308 	and.w	r3, r3, #8
                            (config->oen    &0x01) << 2 | 
     3d6:	431a      	orrs	r2, r3
                            (config->pad_ctl&0x07) << 4 );
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
     3e0:	b2db      	uxtb	r3, r3
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
                            (config->ren    &0x01) << 3 | 
     3e8:	ea42 0103 	orr.w	r1, r2, r3
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3ec:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	331c      	adds	r3, #28
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	4413      	add	r3, r2
     3f8:	6059      	str	r1, [r3, #4]
}
     3fa:	bf00      	nop
     3fc:	370c      	adds	r7, #12
     3fe:	46bd      	mov	sp, r7
     400:	bc80      	pop	{r7}
     402:	4770      	bx	lr

00000404 <SystemIOConfigQspi>:


void SystemIOConfigQspi(IOConfig_Type *config)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
    uint32_t cfg = SCU->IO_CONFIG ;
     40c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     412:	60fb      	str	r3, [r7, #12]
    cfg  &=~(0x07ul<<8|0x07ul<<11|0x07ul<<14|0x07ul<<17);
     414:	68fb      	ldr	r3, [r7, #12]
     416:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
     41a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
     41e:	60fb      	str	r3, [r7, #12]
    cfg  |= (	(config->d0&0x07) << 8  | 
     420:	687b      	ldr	r3, [r7, #4]
     422:	781b      	ldrb	r3, [r3, #0]
     424:	f3c3 0302 	ubfx	r3, r3, #0, #3
     428:	b2db      	uxtb	r3, r3
     42a:	021b      	lsls	r3, r3, #8
     42c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
                (config->d1&0x07) << 11 | 
     430:	687b      	ldr	r3, [r7, #4]
     432:	781b      	ldrb	r3, [r3, #0]
     434:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     438:	b2db      	uxtb	r3, r3
     43a:	02db      	lsls	r3, r3, #11
     43c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    cfg  |= (	(config->d0&0x07) << 8  | 
     440:	431a      	orrs	r2, r3
                (config->d2&0x07) << 14 | 
     442:	687b      	ldr	r3, [r7, #4]
     444:	881b      	ldrh	r3, [r3, #0]
     446:	f3c3 1382 	ubfx	r3, r3, #6, #3
     44a:	b2db      	uxtb	r3, r3
     44c:	039b      	lsls	r3, r3, #14
     44e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
                (config->d1&0x07) << 11 | 
     452:	431a      	orrs	r2, r3
                (config->d3&0x07) << 17 );	
     454:	687b      	ldr	r3, [r7, #4]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	f3c3 0342 	ubfx	r3, r3, #1, #3
     45c:	b2db      	uxtb	r3, r3
     45e:	045b      	lsls	r3, r3, #17
     460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
                (config->d2&0x07) << 14 | 
     464:	4313      	orrs	r3, r2
     466:	461a      	mov	r2, r3
    cfg  |= (	(config->d0&0x07) << 8  | 
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	4313      	orrs	r3, r2
     46c:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     46e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     472:	68fb      	ldr	r3, [r7, #12]
     474:	6293      	str	r3, [r2, #40]	; 0x28
}
     476:	bf00      	nop
     478:	3714      	adds	r7, #20
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <SystemIOConfigQspiOne>:


void SystemIOConfigQspiOne(uint32_t config,PadIoConfig_Type io)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	460b      	mov	r3, r1
     48a:	70fb      	strb	r3, [r7, #3]
    uint32_t cfg = SCU->IO_CONFIG ;
     48c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     492:	60fb      	str	r3, [r7, #12]
    if(io>3 || config >5)
     494:	78fb      	ldrb	r3, [r7, #3]
     496:	2b03      	cmp	r3, #3
     498:	d820      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2b05      	cmp	r3, #5
     49e:	d81d      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
        return ;
        
    cfg &=~(0x7ul<<(8 + 3*io));
     4a0:	78fa      	ldrb	r2, [r7, #3]
     4a2:	4613      	mov	r3, r2
     4a4:	005b      	lsls	r3, r3, #1
     4a6:	4413      	add	r3, r2
     4a8:	3308      	adds	r3, #8
     4aa:	2207      	movs	r2, #7
     4ac:	fa02 f303 	lsl.w	r3, r2, r3
     4b0:	43db      	mvns	r3, r3
     4b2:	68fa      	ldr	r2, [r7, #12]
     4b4:	4013      	ands	r3, r2
     4b6:	60fb      	str	r3, [r7, #12]
    cfg  |= ((config&0x07) << (8 + 3*io));	
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	f003 0107 	and.w	r1, r3, #7
     4be:	78fa      	ldrb	r2, [r7, #3]
     4c0:	4613      	mov	r3, r2
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	4413      	add	r3, r2
     4c6:	3308      	adds	r3, #8
     4c8:	fa01 f303 	lsl.w	r3, r1, r3
     4cc:	68fa      	ldr	r2, [r7, #12]
     4ce:	4313      	orrs	r3, r2
     4d0:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     4d2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     4d6:	68fb      	ldr	r3, [r7, #12]
     4d8:	6293      	str	r3, [r2, #40]	; 0x28
     4da:	e000      	b.n	4de <SystemIOConfigQspiOne+0x5e>
        return ;
     4dc:	bf00      	nop
}
     4de:	3714      	adds	r7, #20
     4e0:	46bd      	mov	sp, r7
     4e2:	bc80      	pop	{r7}
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop

000004e8 <cm_printf>:
//    return ch;
//}


int cm_printf(const char *fmt, ...)
{
     4e8:	b40f      	push	{r0, r1, r2, r3}
     4ea:	b580      	push	{r7, lr}
     4ec:	b082      	sub	sp, #8
     4ee:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
     4f0:	f107 0314 	add.w	r3, r7, #20
     4f4:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
     4f6:	683a      	ldr	r2, [r7, #0]
     4f8:	6939      	ldr	r1, [r7, #16]
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <cm_printf+0x38>)
     4fc:	f001 fcd0 	bl	1ea0 <vsiprintf>
     500:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_tmp_buf, r);
     502:	687b      	ldr	r3, [r7, #4]
     504:	b29b      	uxth	r3, r3
     506:	461a      	mov	r2, r3
     508:	4905      	ldr	r1, [pc, #20]	; (520 <cm_printf+0x38>)
     50a:	4806      	ldr	r0, [pc, #24]	; (524 <cm_printf+0x3c>)
     50c:	f000 f986 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
     510:	687b      	ldr	r3, [r7, #4]
}
     512:	4618      	mov	r0, r3
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     51c:	b004      	add	sp, #16
     51e:	4770      	bx	lr
     520:	2000806c 	.word	0x2000806c
     524:	90002000 	.word	0x90002000

00000528 <at_eventInd>:

int at_eventInd(const char *fmt, ...)
{
     528:	b40f      	push	{r0, r1, r2, r3}
     52a:	b580      	push	{r7, lr}
     52c:	b082      	sub	sp, #8
     52e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     530:	f107 0314 	add.w	r3, r7, #20
     534:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     536:	683a      	ldr	r2, [r7, #0]
     538:	6939      	ldr	r1, [r7, #16]
     53a:	4809      	ldr	r0, [pc, #36]	; (560 <at_eventInd+0x38>)
     53c:	f001 fcb0 	bl	1ea0 <vsiprintf>
     540:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_dbg_tmp_buf, r);
     542:	687b      	ldr	r3, [r7, #4]
     544:	b29b      	uxth	r3, r3
     546:	461a      	mov	r2, r3
     548:	4905      	ldr	r1, [pc, #20]	; (560 <at_eventInd+0x38>)
     54a:	4806      	ldr	r0, [pc, #24]	; (564 <at_eventInd+0x3c>)
     54c:	f000 f966 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     550:	687b      	ldr	r3, [r7, #4]
}
     552:	4618      	mov	r0, r3
     554:	3708      	adds	r7, #8
     556:	46bd      	mov	sp, r7
     558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     55c:	b004      	add	sp, #16
     55e:	4770      	bx	lr
     560:	200080ec 	.word	0x200080ec
     564:	90002000 	.word	0x90002000

00000568 <cm_printf_Uart1>:

int cm_printf_Uart1(const char *fmt, ...)
{
     568:	b40f      	push	{r0, r1, r2, r3}
     56a:	b580      	push	{r7, lr}
     56c:	b082      	sub	sp, #8
     56e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     570:	f107 0314 	add.w	r3, r7, #20
     574:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     576:	683a      	ldr	r2, [r7, #0]
     578:	6939      	ldr	r1, [r7, #16]
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <cm_printf_Uart1+0x38>)
     57c:	f001 fc90 	bl	1ea0 <vsiprintf>
     580:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART1, s_dbg_tmp_buf, r);
     582:	687b      	ldr	r3, [r7, #4]
     584:	b29b      	uxth	r3, r3
     586:	461a      	mov	r2, r3
     588:	4905      	ldr	r1, [pc, #20]	; (5a0 <cm_printf_Uart1+0x38>)
     58a:	4806      	ldr	r0, [pc, #24]	; (5a4 <cm_printf_Uart1+0x3c>)
     58c:	f000 f946 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     590:	687b      	ldr	r3, [r7, #4]
}
     592:	4618      	mov	r0, r3
     594:	3708      	adds	r7, #8
     596:	46bd      	mov	sp, r7
     598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     59c:	b004      	add	sp, #16
     59e:	4770      	bx	lr
     5a0:	2000816c 	.word	0x2000816c
     5a4:	90002800 	.word	0x90002800

000005a8 <UART_DeInit>:

UART_write_handle  UWrite_handle;


void UART_DeInit(UART_TypeDef *UARTx)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
    #if  defined(BR002)||defined(BR003)
    if (UARTx == UART0) {
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	4a0c      	ldr	r2, [pc, #48]	; (5e4 <UART_DeInit+0x3c>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d108      	bne.n	5ca <UART_DeInit+0x22>
        SystemDevRstCtl(UART0_SwRst);
     5b8:	2004      	movs	r0, #4
     5ba:	f7ff fed1 	bl	360 <SystemDevRstCtl>
        memset(UART0,0,sizeof(UART_TypeDef));
     5be:	22d0      	movs	r2, #208	; 0xd0
     5c0:	2100      	movs	r1, #0
     5c2:	4808      	ldr	r0, [pc, #32]	; (5e4 <UART_DeInit+0x3c>)
     5c4:	f001 fc4e 	bl	1e64 <memset>
    else {
        SystemDevRstCtl(UART1_PCLK_SwRst);
        memset(UART1,0,sizeof(UART_TypeDef));
    }
    #endif
}
     5c8:	e007      	b.n	5da <UART_DeInit+0x32>
        SystemDevRstCtl(UART1_SwRst);
     5ca:	2005      	movs	r0, #5
     5cc:	f7ff fec8 	bl	360 <SystemDevRstCtl>
        memset(UART1,0,sizeof(UART_TypeDef));
     5d0:	22d0      	movs	r2, #208	; 0xd0
     5d2:	2100      	movs	r1, #0
     5d4:	4804      	ldr	r0, [pc, #16]	; (5e8 <UART_DeInit+0x40>)
     5d6:	f001 fc45 	bl	1e64 <memset>
}
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bd80      	pop	{r7, pc}
     5e2:	bf00      	nop
     5e4:	90002000 	.word	0x90002000
     5e8:	90002800 	.word	0x90002800

000005ec <UART_Init>:

void UART_Init(UART_TypeDef *UARTx, UART_InitInfo_Type *UART_InitStruct)
{
     5ec:	b480      	push	{r7}
     5ee:	b085      	sub	sp, #20
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
     5f4:	6039      	str	r1, [r7, #0]
    uint32_t BR_div;
    uint32_t fcr_cfg = 0;
     5f6:	2300      	movs	r3, #0
     5f8:	60fb      	str	r3, [r7, #12]
    
    if (UARTx->USR & 0x01) {
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     5fe:	f003 0301 	and.w	r3, r3, #1
     602:	2b00      	cmp	r3, #0
     604:	f040 80dc 	bne.w	7c0 <UART_Init+0x1d4>
        //UART is busy now, we can init it!
        return;
    }
    UARTx->IER &= ~(0xFF);
     608:	687b      	ldr	r3, [r7, #4]
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     610:	687b      	ldr	r3, [r7, #4]
     612:	605a      	str	r2, [r3, #4]
    UARTx->LCR |= 0x01 << 7; //Enable the DLL/DLH to writable
     614:	687b      	ldr	r3, [r7, #4]
     616:	68db      	ldr	r3, [r3, #12]
     618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	60da      	str	r2, [r3, #12]
    BR_div = (SystemCoreClock/UART_InitStruct->UART_BaudRate);
     620:	4b6a      	ldr	r3, [pc, #424]	; (7cc <UART_Init+0x1e0>)
     622:	681a      	ldr	r2, [r3, #0]
     624:	683b      	ldr	r3, [r7, #0]
     626:	681b      	ldr	r3, [r3, #0]
     628:	fbb2 f3f3 	udiv	r3, r2, r3
     62c:	60bb      	str	r3, [r7, #8]

    UARTx->DLL =  ((BR_div>>4 ) & 0xFF);
     62e:	68bb      	ldr	r3, [r7, #8]
     630:	091b      	lsrs	r3, r3, #4
     632:	b2da      	uxtb	r2, r3
     634:	687b      	ldr	r3, [r7, #4]
     636:	601a      	str	r2, [r3, #0]
    UARTx->DLH =  ((BR_div>>12) & 0xFF);
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	0b1b      	lsrs	r3, r3, #12
     63c:	b2da      	uxtb	r2, r3
     63e:	687b      	ldr	r3, [r7, #4]
     640:	605a      	str	r2, [r3, #4]
    UARTx->DLF =  ((BR_div) & 0xf);
     642:	68bb      	ldr	r3, [r7, #8]
     644:	f003 020f 	and.w	r2, r3, #15
     648:	687b      	ldr	r3, [r7, #4]
     64a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable
     64e:	687b      	ldr	r3, [r7, #4]
     650:	68db      	ldr	r3, [r3, #12]
     652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
     656:	687b      	ldr	r3, [r7, #4]
     658:	60da      	str	r2, [r3, #12]
    UARTx->LCR &= ~(0xFF);
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	68db      	ldr	r3, [r3, #12]
     65e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     662:	687b      	ldr	r3, [r7, #4]
     664:	60da      	str	r2, [r3, #12]
    UARTx->LCR_EXT &= ~(0xFF);
     666:	687b      	ldr	r3, [r7, #4]
     668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
     66c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     670:	687b      	ldr	r3, [r7, #4]
     672:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if (UART_InitStruct->UART_WordLength == UART_WL_9BITS) {
     676:	683b      	ldr	r3, [r7, #0]
     678:	889b      	ldrh	r3, [r3, #4]
     67a:	2b04      	cmp	r3, #4
     67c:	d006      	beq.n	68c <UART_Init+0xa0>
        //Supported  ???
        //UARTx->LCR_EXT |= 0x01 << 0;
    }
    else {
        UARTx->LCR |= UART_InitStruct->UART_WordLength;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	68db      	ldr	r3, [r3, #12]
     682:	683a      	ldr	r2, [r7, #0]
     684:	8892      	ldrh	r2, [r2, #4]
     686:	431a      	orrs	r2, r3
     688:	687b      	ldr	r3, [r7, #4]
     68a:	60da      	str	r2, [r3, #12]
    }
    UARTx->LCR |= UART_InitStruct->UART_StopBits << 2;
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	68db      	ldr	r3, [r3, #12]
     690:	683a      	ldr	r2, [r7, #0]
     692:	88d2      	ldrh	r2, [r2, #6]
     694:	0092      	lsls	r2, r2, #2
     696:	431a      	orrs	r2, r3
     698:	687b      	ldr	r3, [r7, #4]
     69a:	60da      	str	r2, [r3, #12]
    if (UART_InitStruct->UART_ParityMode != UART_PM_NONE) {
     69c:	683b      	ldr	r3, [r7, #0]
     69e:	891b      	ldrh	r3, [r3, #8]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d025      	beq.n	6f0 <UART_Init+0x104>
        UARTx->LCR |= 0x01 << 3;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	68db      	ldr	r3, [r3, #12]
     6a8:	f043 0208 	orr.w	r2, r3, #8
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	60da      	str	r2, [r3, #12]
        //For ODD parity mode, the EPS/Stick Parity have be cleard.
        if (UART_InitStruct->UART_ParityMode == UART_PM_EVEN) {
     6b0:	683b      	ldr	r3, [r7, #0]
     6b2:	891b      	ldrh	r3, [r3, #8]
     6b4:	2b02      	cmp	r3, #2
     6b6:	d106      	bne.n	6c6 <UART_Init+0xda>
            UARTx->LCR |= 0x01 << 4;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	68db      	ldr	r3, [r3, #12]
     6bc:	f043 0210 	orr.w	r2, r3, #16
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	60da      	str	r2, [r3, #12]
     6c4:	e014      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG0) {
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	891b      	ldrh	r3, [r3, #8]
     6ca:	2b03      	cmp	r3, #3
     6cc:	d106      	bne.n	6dc <UART_Init+0xf0>
            UARTx->LCR |= 0x03 << 4;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	68db      	ldr	r3, [r3, #12]
     6d2:	f043 0230 	orr.w	r2, r3, #48	; 0x30
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	60da      	str	r2, [r3, #12]
     6da:	e009      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG1) {
     6dc:	683b      	ldr	r3, [r7, #0]
     6de:	891b      	ldrh	r3, [r3, #8]
     6e0:	2b04      	cmp	r3, #4
     6e2:	d105      	bne.n	6f0 <UART_Init+0x104>
            UARTx->LCR |= 0x02 << 4;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	68db      	ldr	r3, [r3, #12]
     6e8:	f043 0220 	orr.w	r2, r3, #32
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	60da      	str	r2, [r3, #12]
        }
    }
    UARTx->MCR &= ~(0xFF);
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	691b      	ldr	r3, [r3, #16]
     6f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	611a      	str	r2, [r3, #16]
    if (UART_InitStruct->UART_HardwareFlowControl      == UART_FC_DTRDSR) 
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	895b      	ldrh	r3, [r3, #10]
     700:	2b01      	cmp	r3, #1
     702:	d106      	bne.n	712 <UART_Init+0x126>
         UARTx->MCR |= 0x01;
     704:	687b      	ldr	r3, [r7, #4]
     706:	691b      	ldr	r3, [r3, #16]
     708:	f043 0201 	orr.w	r2, r3, #1
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	611a      	str	r2, [r3, #16]
     710:	e02a      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS) 
     712:	683b      	ldr	r3, [r7, #0]
     714:	895b      	ldrh	r3, [r3, #10]
     716:	2b02      	cmp	r3, #2
     718:	d106      	bne.n	728 <UART_Init+0x13c>
         UARTx->MCR |= 0x02;
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	f043 0202 	orr.w	r2, r3, #2
     722:	687b      	ldr	r3, [r7, #4]
     724:	611a      	str	r2, [r3, #16]
     726:	e01f      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS) 
     728:	683b      	ldr	r3, [r7, #0]
     72a:	895b      	ldrh	r3, [r3, #10]
     72c:	2b03      	cmp	r3, #3
     72e:	d106      	bne.n	73e <UART_Init+0x152>
        UARTx->MCR  |= 0x22;
     730:	687b      	ldr	r3, [r7, #4]
     732:	691b      	ldr	r3, [r3, #16]
     734:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     738:	687b      	ldr	r3, [r7, #4]
     73a:	611a      	str	r2, [r3, #16]
     73c:	e014      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS_DTRDSR) 
     73e:	683b      	ldr	r3, [r7, #0]
     740:	895b      	ldrh	r3, [r3, #10]
     742:	2b04      	cmp	r3, #4
     744:	d106      	bne.n	754 <UART_Init+0x168>
        UARTx->MCR  |= 0x3;
     746:	687b      	ldr	r3, [r7, #4]
     748:	691b      	ldr	r3, [r3, #16]
     74a:	f043 0203 	orr.w	r2, r3, #3
     74e:	687b      	ldr	r3, [r7, #4]
     750:	611a      	str	r2, [r3, #16]
     752:	e009      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS_DTRDSR) 
     754:	683b      	ldr	r3, [r7, #0]
     756:	895b      	ldrh	r3, [r3, #10]
     758:	2b05      	cmp	r3, #5
     75a:	d105      	bne.n	768 <UART_Init+0x17c>
        UARTx->MCR  |= 0x23;
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	691b      	ldr	r3, [r3, #16]
     760:	f043 0223 	orr.w	r2, r3, #35	; 0x23
     764:	687b      	ldr	r3, [r7, #4]
     766:	611a      	str	r2, [r3, #16]
    
    UARTx->FCR &= ~(0xFF);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	689b      	ldr	r3, [r3, #8]
     76c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     770:	687b      	ldr	r3, [r7, #4]
     772:	609a      	str	r2, [r3, #8]
    if (UART_InitStruct->UART_DMAMode == UART_DM_MODE_1) 
     774:	683b      	ldr	r3, [r7, #0]
     776:	899b      	ldrh	r3, [r3, #12]
     778:	2b01      	cmp	r3, #1
     77a:	d103      	bne.n	784 <UART_Init+0x198>
        fcr_cfg |= 0x01 << 3;
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	f043 0308 	orr.w	r3, r3, #8
     782:	60fb      	str	r3, [r7, #12]
    
    if (UART_InitStruct->UART_FIFOMode == UART_FM_ENABLE) {
     784:	683b      	ldr	r3, [r7, #0]
     786:	89db      	ldrh	r3, [r3, #14]
     788:	2b01      	cmp	r3, #1
     78a:	d10d      	bne.n	7a8 <UART_Init+0x1bc>
        
        fcr_cfg |= UART_InitStruct->UART_RX_FIFOTriggerMode << 6;
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	8a5b      	ldrh	r3, [r3, #18]
     790:	019b      	lsls	r3, r3, #6
     792:	461a      	mov	r2, r3
     794:	68fb      	ldr	r3, [r7, #12]
     796:	4313      	orrs	r3, r2
     798:	60fb      	str	r3, [r7, #12]
        fcr_cfg |= UART_InitStruct->UART_TX_FIFOTriggerMode << 4;       
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	8a1b      	ldrh	r3, [r3, #16]
     79e:	011b      	lsls	r3, r3, #4
     7a0:	461a      	mov	r2, r3
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	4313      	orrs	r3, r2
     7a6:	60fb      	str	r3, [r7, #12]
    }
    
    fcr_cfg |= 0x03 << 1; //Reset XMIT/RCVR FIFO
     7a8:	68fb      	ldr	r3, [r7, #12]
     7aa:	f043 0306 	orr.w	r3, r3, #6
     7ae:	60fb      	str	r3, [r7, #12]
    fcr_cfg |= 0x01 << 0;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	f043 0301 	orr.w	r3, r3, #1
     7b6:	60fb      	str	r3, [r7, #12]
    UARTx->FCR = fcr_cfg;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	68fa      	ldr	r2, [r7, #12]
     7bc:	609a      	str	r2, [r3, #8]
     7be:	e000      	b.n	7c2 <UART_Init+0x1d6>
        return;
     7c0:	bf00      	nop
}
     7c2:	3714      	adds	r7, #20
     7c4:	46bd      	mov	sp, r7
     7c6:	bc80      	pop	{r7}
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop
     7cc:	20008000 	.word	0x20008000

000007d0 <UART_InterruptSet>:

void UART_InterruptSet(UART_TypeDef *UARTx, uint16_t UART_IntMask)
{
     7d0:	b480      	push	{r7}
     7d2:	b083      	sub	sp, #12
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	460b      	mov	r3, r1
     7da:	807b      	strh	r3, [r7, #2]
    // UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable    
    UARTx->IER &= ~UART_IntMask;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	685b      	ldr	r3, [r3, #4]
     7e0:	887a      	ldrh	r2, [r7, #2]
     7e2:	43d2      	mvns	r2, r2
     7e4:	401a      	ands	r2, r3
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	605a      	str	r2, [r3, #4]
    UARTx->IER |= UART_IntMask;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	685a      	ldr	r2, [r3, #4]
     7ee:	887b      	ldrh	r3, [r7, #2]
     7f0:	431a      	orrs	r2, r3
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	605a      	str	r2, [r3, #4]
}
     7f6:	bf00      	nop
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	bc80      	pop	{r7}
     7fe:	4770      	bx	lr

00000800 <UART_WriteByte>:

void UART_WriteByte(UART_TypeDef *UARTx, uint8_t byte)
{
     800:	b480      	push	{r7}
     802:	b083      	sub	sp, #12
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	460b      	mov	r3, r1
     80a:	70fb      	strb	r3, [r7, #3]
    UARTx->THR = byte;
     80c:	78fa      	ldrb	r2, [r7, #3]
     80e:	687b      	ldr	r3, [r7, #4]
     810:	601a      	str	r2, [r3, #0]
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	bc80      	pop	{r7}
     81a:	4770      	bx	lr

0000081c <UART_WriteData>:

void UART_WriteData(UART_TypeDef *UARTx, uint8_t *data, uint16_t length)
{
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	60f8      	str	r0, [r7, #12]
     824:	60b9      	str	r1, [r7, #8]
     826:	4613      	mov	r3, r2
     828:	80fb      	strh	r3, [r7, #6]
    while (length--) {
     82a:	e013      	b.n	854 <UART_WriteData+0x38>
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
        {
            if(UWrite_handle)
     82c:	4b0e      	ldr	r3, [pc, #56]	; (868 <UART_WriteData+0x4c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2b00      	cmp	r3, #0
     832:	d002      	beq.n	83a <UART_WriteData+0x1e>
                UWrite_handle();
     834:	4b0c      	ldr	r3, [pc, #48]	; (868 <UART_WriteData+0x4c>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	4798      	blx	r3
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	695b      	ldr	r3, [r3, #20]
     83e:	f003 0320 	and.w	r3, r3, #32
     842:	2b00      	cmp	r3, #0
     844:	d0f2      	beq.n	82c <UART_WriteData+0x10>
        };
        UARTx->THR = *data++;
     846:	68bb      	ldr	r3, [r7, #8]
     848:	1c5a      	adds	r2, r3, #1
     84a:	60ba      	str	r2, [r7, #8]
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	461a      	mov	r2, r3
     850:	68fb      	ldr	r3, [r7, #12]
     852:	601a      	str	r2, [r3, #0]
    while (length--) {
     854:	88fb      	ldrh	r3, [r7, #6]
     856:	1e5a      	subs	r2, r3, #1
     858:	80fa      	strh	r2, [r7, #6]
     85a:	2b00      	cmp	r3, #0
     85c:	d1ed      	bne.n	83a <UART_WriteData+0x1e>
    }
}
     85e:	bf00      	nop
     860:	3710      	adds	r7, #16
     862:	46bd      	mov	sp, r7
     864:	bd80      	pop	{r7, pc}
     866:	bf00      	nop
     868:	20008298 	.word	0x20008298

0000086c <UART_SetUWriteHandle>:

void UART_SetUWriteHandle(UART_write_handle handle)
{
     86c:	b480      	push	{r7}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
    UWrite_handle = handle;
     874:	4a03      	ldr	r2, [pc, #12]	; (884 <UART_SetUWriteHandle+0x18>)
     876:	687b      	ldr	r3, [r7, #4]
     878:	6013      	str	r3, [r2, #0]
}
     87a:	bf00      	nop
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr
     884:	20008298 	.word	0x20008298

00000888 <UART_ReadByte>:

uint8_t UART_ReadByte(UART_TypeDef *UARTx)
{
     888:	b480      	push	{r7}
     88a:	b083      	sub	sp, #12
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
    return (UARTx->RBR & 0xFF);
     890:	687b      	ldr	r3, [r7, #4]
     892:	681b      	ldr	r3, [r3, #0]
     894:	b2db      	uxtb	r3, r3
}
     896:	4618      	mov	r0, r3
     898:	370c      	adds	r7, #12
     89a:	46bd      	mov	sp, r7
     89c:	bc80      	pop	{r7}
     89e:	4770      	bx	lr

000008a0 <UART_AutoFlow>:

void  UART_AutoFlow(UART_TypeDef *UARTx,bool En)
{
     8a0:	b480      	push	{r7}
     8a2:	b083      	sub	sp, #12
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
     8a8:	460b      	mov	r3, r1
     8aa:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ac:	78fb      	ldrb	r3, [r7, #3]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d00c      	beq.n	8cc <UART_AutoFlow+0x2c>
    {
        UARTx->MCR  |=0x22;  
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	691b      	ldr	r3, [r3, #16]
     8b6:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	611a      	str	r2, [r3, #16]
        UARTx->FCR  |=1<<0;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	689b      	ldr	r3, [r3, #8]
     8c2:	f043 0201 	orr.w	r2, r3, #1
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	609a      	str	r2, [r3, #8]
    else
    {
        UARTx->MCR  &= ~0x22;  
    }
        
}
     8ca:	e005      	b.n	8d8 <UART_AutoFlow+0x38>
        UARTx->MCR  &= ~0x22;  
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	691b      	ldr	r3, [r3, #16]
     8d0:	f023 0222 	bic.w	r2, r3, #34	; 0x22
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	611a      	str	r2, [r3, #16]
}
     8d8:	bf00      	nop
     8da:	370c      	adds	r7, #12
     8dc:	46bd      	mov	sp, r7
     8de:	bc80      	pop	{r7}
     8e0:	4770      	bx	lr

000008e2 <UART_SetRts>:

void  UART_SetRts(UART_TypeDef *UARTx,bool En)
{
     8e2:	b480      	push	{r7}
     8e4:	b083      	sub	sp, #12
     8e6:	af00      	add	r7, sp, #0
     8e8:	6078      	str	r0, [r7, #4]
     8ea:	460b      	mov	r3, r1
     8ec:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ee:	78fb      	ldrb	r3, [r7, #3]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d006      	beq.n	902 <UART_SetRts+0x20>
    {
        UARTx->MCR  |=0x02;  
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	691b      	ldr	r3, [r3, #16]
     8f8:	f043 0202 	orr.w	r2, r3, #2
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	611a      	str	r2, [r3, #16]
    else
    {
        UARTx->MCR  &= ~0x02;  
    }
        
}
     900:	e005      	b.n	90e <UART_SetRts+0x2c>
        UARTx->MCR  &= ~0x02;  
     902:	687b      	ldr	r3, [r7, #4]
     904:	691b      	ldr	r3, [r3, #16]
     906:	f023 0202 	bic.w	r2, r3, #2
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	611a      	str	r2, [r3, #16]
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	bc80      	pop	{r7}
     916:	4770      	bx	lr

00000918 <UART_LSRCheckBits>:

FlagStatus UART_LSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     918:	b480      	push	{r7}
     91a:	b085      	sub	sp, #20
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->LSR & 0x1FF;
     922:	687b      	ldr	r3, [r7, #4]
     924:	695b      	ldr	r3, [r3, #20]
     926:	f3c3 0308 	ubfx	r3, r3, #0, #9
     92a:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     92c:	68fa      	ldr	r2, [r7, #12]
     92e:	683b      	ldr	r3, [r7, #0]
     930:	4013      	ands	r3, r2
     932:	2b00      	cmp	r3, #0
     934:	d001      	beq.n	93a <UART_LSRCheckBits+0x22>
        return SET;
     936:	2301      	movs	r3, #1
     938:	e000      	b.n	93c <UART_LSRCheckBits+0x24>
    }
    else {
        return RESET;
     93a:	2300      	movs	r3, #0
    }
}
     93c:	4618      	mov	r0, r3
     93e:	3714      	adds	r7, #20
     940:	46bd      	mov	sp, r7
     942:	bc80      	pop	{r7}
     944:	4770      	bx	lr

00000946 <UART_MSRCheckBits>:

FlagStatus UART_MSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     946:	b480      	push	{r7}
     948:	b085      	sub	sp, #20
     94a:	af00      	add	r7, sp, #0
     94c:	6078      	str	r0, [r7, #4]
     94e:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->MSR;
     950:	687b      	ldr	r3, [r7, #4]
     952:	699b      	ldr	r3, [r3, #24]
     954:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     956:	68fa      	ldr	r2, [r7, #12]
     958:	683b      	ldr	r3, [r7, #0]
     95a:	4013      	ands	r3, r2
     95c:	2b00      	cmp	r3, #0
     95e:	d001      	beq.n	964 <UART_MSRCheckBits+0x1e>
        return SET;
     960:	2301      	movs	r3, #1
     962:	e000      	b.n	966 <UART_MSRCheckBits+0x20>
    }
    else {
        return RESET;
     964:	2300      	movs	r3, #0
    }
}
     966:	4618      	mov	r0, r3
     968:	3714      	adds	r7, #20
     96a:	46bd      	mov	sp, r7
     96c:	bc80      	pop	{r7}
     96e:	4770      	bx	lr

00000970 <UART_GetInterruptID>:

UART_InterID_Tpye UART_GetInterruptID(UART_TypeDef *UARTx)
{
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
    return (UART_InterID_Tpye)(UARTx->IIR & 0xf);
     978:	687b      	ldr	r3, [r7, #4]
     97a:	689b      	ldr	r3, [r3, #8]
     97c:	b2db      	uxtb	r3, r3
     97e:	f003 030f 	and.w	r3, r3, #15
     982:	b2db      	uxtb	r3, r3
}
     984:	4618      	mov	r0, r3
     986:	370c      	adds	r7, #12
     988:	46bd      	mov	sp, r7
     98a:	bc80      	pop	{r7}
     98c:	4770      	bx	lr

0000098e <UART_GetInterruptStatus>:

ITStatus UART_GetInterruptStatus(UART_TypeDef *UARTx, uint16_t UART_IntIds)
{
     98e:	b480      	push	{r7}
     990:	b083      	sub	sp, #12
     992:	af00      	add	r7, sp, #0
     994:	6078      	str	r0, [r7, #4]
     996:	460b      	mov	r3, r1
     998:	807b      	strh	r3, [r7, #2]
    if (UARTx->IER & UART_IntIds) {
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	685a      	ldr	r2, [r3, #4]
     99e:	887b      	ldrh	r3, [r7, #2]
     9a0:	4013      	ands	r3, r2
     9a2:	2b00      	cmp	r3, #0
     9a4:	d007      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
        if (UARTx->IIR & UART_IntIds) {
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	689a      	ldr	r2, [r3, #8]
     9aa:	887b      	ldrh	r3, [r7, #2]
     9ac:	4013      	ands	r3, r2
     9ae:	2b00      	cmp	r3, #0
     9b0:	d001      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
            return SET;
     9b2:	2301      	movs	r3, #1
     9b4:	e000      	b.n	9b8 <UART_GetInterruptStatus+0x2a>
        }
    }
    return RESET;
     9b6:	2300      	movs	r3, #0
}
     9b8:	4618      	mov	r0, r3
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr

000009c2 <UART_GetStatus>:

uint32_t UART_GetStatus(UART_TypeDef *UARTx)
{
     9c2:	b480      	push	{r7}
     9c4:	b083      	sub	sp, #12
     9c6:	af00      	add	r7, sp, #0
     9c8:	6078      	str	r0, [r7, #4]
    return(UARTx->USR );
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
     9ce:	4618      	mov	r0, r3
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	bc80      	pop	{r7}
     9d6:	4770      	bx	lr

000009d8 <i2c_SubData>:
static void I2C_SetClockSclCountParams(I2C_TypeDef  *I2Cx , I2C_ParamMaxSpeedMode max_speed, uint32_t sclH,uint32_t sclL);
static uint32_t I2C_SetTargerAddressConfigParams(I2C_InitInof_Type *I2C_InitStru);


static  uint32_t   i2c_SubData(i2c_DataCmd data)
{
     9d8:	b480      	push	{r7}
     9da:	b083      	sub	sp, #12
     9dc:	af00      	add	r7, sp, #0
     9de:	6078      	str	r0, [r7, #4]
    return (data.data|data.com<<8|data.stop<<9|data.restart<<10|data.non_seq <<11);
     9e0:	793b      	ldrb	r3, [r7, #4]
     9e2:	461a      	mov	r2, r3
     9e4:	797b      	ldrb	r3, [r7, #5]
     9e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
     9ea:	b2db      	uxtb	r3, r3
     9ec:	021b      	lsls	r3, r3, #8
     9ee:	431a      	orrs	r2, r3
     9f0:	797b      	ldrb	r3, [r7, #5]
     9f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
     9f6:	b2db      	uxtb	r3, r3
     9f8:	025b      	lsls	r3, r3, #9
     9fa:	431a      	orrs	r2, r3
     9fc:	797b      	ldrb	r3, [r7, #5]
     9fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
     a02:	b2db      	uxtb	r3, r3
     a04:	029b      	lsls	r3, r3, #10
     a06:	431a      	orrs	r2, r3
     a08:	797b      	ldrb	r3, [r7, #5]
     a0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     a0e:	b2db      	uxtb	r3, r3
     a10:	02db      	lsls	r3, r3, #11
     a12:	4313      	orrs	r3, r2
}
     a14:	4618      	mov	r0, r3
     a16:	370c      	adds	r7, #12
     a18:	46bd      	mov	sp, r7
     a1a:	bc80      	pop	{r7}
     a1c:	4770      	bx	lr

00000a1e <I2C_GetControlParams>:


/*This function is primarily used to get a parameter by returning the configuration that is worth to the register */
static uint32_t I2C_GetControlParams(I2C_InitInof_Type  *I2C_InitStru)
{
     a1e:	b480      	push	{r7}
     a20:	b085      	sub	sp, #20
     a22:	af00      	add	r7, sp, #0
     a24:	6078      	str	r0, [r7, #4]
    uint32_t reg_control_mask = (\
    ((I2C_InitStru->master_en << I2C_IC_CON_MASTER_MODE_POS)&I2C_IC_CON_MASTER_MODE_MSK )|
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	781b      	ldrb	r3, [r3, #0]
     a2a:	f003 0201 	and.w	r2, r3, #1
    ((I2C_InitStru->max_speed<< I2C_IC_CON_SPEED_POS)&I2C_IC_CON_SPEED_MSK) |
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	785b      	ldrb	r3, [r3, #1]
     a32:	005b      	lsls	r3, r3, #1
     a34:	f003 0306 	and.w	r3, r3, #6
    ((I2C_InitStru->master_en << I2C_IC_CON_MASTER_MODE_POS)&I2C_IC_CON_MASTER_MODE_MSK )|
     a38:	431a      	orrs	r2, r3
    ((I2C_InitStru->slave_addr_type << I2C_IC_CON_IC_10BITADDR_SLAVE_POS)&I2C_IC_CON_IC_10BITADDR_SLAVE_MSK) |
     a3a:	687b      	ldr	r3, [r7, #4]
     a3c:	789b      	ldrb	r3, [r3, #2]
     a3e:	00db      	lsls	r3, r3, #3
     a40:	f003 0308 	and.w	r3, r3, #8
    ((I2C_InitStru->max_speed<< I2C_IC_CON_SPEED_POS)&I2C_IC_CON_SPEED_MSK) |
     a44:	431a      	orrs	r2, r3
    ((I2C_InitStru->master_addr_type << I2C_IC_CON_IC_10BITADDR_MASTER_POS)&I2C_IC_CON_IC_10BITADDR_MASTER_MSK) |
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	78db      	ldrb	r3, [r3, #3]
     a4a:	011b      	lsls	r3, r3, #4
     a4c:	f003 0310 	and.w	r3, r3, #16
    ((I2C_InitStru->slave_addr_type << I2C_IC_CON_IC_10BITADDR_SLAVE_POS)&I2C_IC_CON_IC_10BITADDR_SLAVE_MSK) |
     a50:	431a      	orrs	r2, r3
    ((I2C_InitStru->restart_en << I2C_IC_CON_IC_RESTART_EN_POS) &I2C_IC_CON_IC_RESTART_EN_MSK)|
     a52:	687b      	ldr	r3, [r7, #4]
     a54:	791b      	ldrb	r3, [r3, #4]
     a56:	015b      	lsls	r3, r3, #5
     a58:	f003 0320 	and.w	r3, r3, #32
    ((I2C_InitStru->master_addr_type << I2C_IC_CON_IC_10BITADDR_MASTER_POS)&I2C_IC_CON_IC_10BITADDR_MASTER_MSK) |
     a5c:	431a      	orrs	r2, r3
    ((I2C_InitStru->slave_en << I2C_IC_CON_IC_SLAVE_DISABLE_POS) &I2C_IC_CON_IC_SLAVE_DISABLE_MSK)|
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	795b      	ldrb	r3, [r3, #5]
     a62:	019b      	lsls	r3, r3, #6
     a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ((I2C_InitStru->restart_en << I2C_IC_CON_IC_RESTART_EN_POS) &I2C_IC_CON_IC_RESTART_EN_MSK)|
     a68:	431a      	orrs	r2, r3

    ((I2C_InitStru->slave_stop_det_if_addressed_en   << I2C_IC_CON_STOP_DET_IFADDRESSED_POS) &I2C_IC_CON_STOP_DET_IFADDRESSED_MSK)|
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	799b      	ldrb	r3, [r3, #6]
     a6e:	01db      	lsls	r3, r3, #7
     a70:	b2db      	uxtb	r3, r3
    ((I2C_InitStru->slave_en << I2C_IC_CON_IC_SLAVE_DISABLE_POS) &I2C_IC_CON_IC_SLAVE_DISABLE_MSK)|
     a72:	431a      	orrs	r2, r3
    ((I2C_InitStru->master_stop_det_if_addressed_en << I2C_IC_CON_STOP_DET_IF_MASTER_ACTIVE_POS)&I2C_IC_CON_STOP_DET_IF_MASTER_ACTIVE_MSK) |
     a74:	687b      	ldr	r3, [r7, #4]
     a76:	79db      	ldrb	r3, [r3, #7]
     a78:	029b      	lsls	r3, r3, #10
     a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ((I2C_InitStru->slave_stop_det_if_addressed_en   << I2C_IC_CON_STOP_DET_IFADDRESSED_POS) &I2C_IC_CON_STOP_DET_IFADDRESSED_MSK)|
     a7e:	431a      	orrs	r2, r3
    ((I2C_InitStru->tx_empty_intr_en << I2C_IC_CON_TX_EMPTY_CTRL_POS) &I2C_IC_CON_TX_EMPTY_CTRL_MSK)|
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	7a1b      	ldrb	r3, [r3, #8]
     a84:	021b      	lsls	r3, r3, #8
     a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ((I2C_InitStru->master_stop_det_if_addressed_en << I2C_IC_CON_STOP_DET_IF_MASTER_ACTIVE_POS)&I2C_IC_CON_STOP_DET_IF_MASTER_ACTIVE_MSK) |
     a8a:	431a      	orrs	r2, r3
    ((I2C_InitStru->rx_fifo_full_hold_control_en << I2C_IC_CON_RX_FIFO_FULL_HLD_CTRL_POS) &I2C_IC_CON_RX_FIFO_FULL_HLD_CTRL_MSK)|
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	7a5b      	ldrb	r3, [r3, #9]
     a90:	025b      	lsls	r3, r3, #9
     a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ((I2C_InitStru->tx_empty_intr_en << I2C_IC_CON_TX_EMPTY_CTRL_POS) &I2C_IC_CON_TX_EMPTY_CTRL_MSK)|
     a96:	431a      	orrs	r2, r3

    ((I2C_InitStru->master_bus_clear_feature_en << I2C_IC_CON_BUS_CLEAR_FEATURE_CTRL_POS) &I2C_IC_CON_BUS_CLEAR_FEATURE_CTRL_MSK)|
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	7a9b      	ldrb	r3, [r3, #10]
     a9c:	02db      	lsls	r3, r3, #11
     a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ((I2C_InitStru->rx_fifo_full_hold_control_en << I2C_IC_CON_RX_FIFO_FULL_HLD_CTRL_POS) &I2C_IC_CON_RX_FIFO_FULL_HLD_CTRL_MSK)|
     aa2:	431a      	orrs	r2, r3
    ((I2C_InitStru->optional_SAR_address_en << I2C_IC_CON_OPTIONAL_SAR_CTRL_POS) &I2C_IC_CON_OPTIONAL_SAR_CTRL_MSK)|
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	7adb      	ldrb	r3, [r3, #11]
     aa8:	041b      	lsls	r3, r3, #16
     aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ((I2C_InitStru->master_bus_clear_feature_en << I2C_IC_CON_BUS_CLEAR_FEATURE_CTRL_POS) &I2C_IC_CON_BUS_CLEAR_FEATURE_CTRL_MSK)|
     aae:	431a      	orrs	r2, r3
    ((I2C_InitStru->SMBUS_slave_quick_en << I2C_IC_CON_SMBUS_SLAVE_QUICK_EN_POS)&I2C_IC_CON_SMBUS_SLAVE_QUICK_EN_MSK) |
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	7b1b      	ldrb	r3, [r3, #12]
     ab4:	045b      	lsls	r3, r3, #17
     ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    ((I2C_InitStru->optional_SAR_address_en << I2C_IC_CON_OPTIONAL_SAR_CTRL_POS) &I2C_IC_CON_OPTIONAL_SAR_CTRL_MSK)|
     aba:	431a      	orrs	r2, r3
    ((I2C_InitStru->SMBUS_ARP_contral_en << I2C_IC_CON_SMBUS_ARP_EN_POS)&I2C_IC_CON_SMBUS_ARP_EN_MSK) |
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	7b5b      	ldrb	r3, [r3, #13]
     ac0:	049b      	lsls	r3, r3, #18
     ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    ((I2C_InitStru->SMBUS_slave_quick_en << I2C_IC_CON_SMBUS_SLAVE_QUICK_EN_POS)&I2C_IC_CON_SMBUS_SLAVE_QUICK_EN_MSK) |
     ac6:	431a      	orrs	r2, r3
    ((I2C_InitStru->SMBUS_persistent_slave_addr_en << I2C_IC_CON_SMBUS_PERSISTENT_SLV_ADDR_EN_POS)&I2C_IC_CON_SMBUS_PERSISTENT_SLV_ADDR_EN_MSK));
     ac8:	687b      	ldr	r3, [r7, #4]
     aca:	7b9b      	ldrb	r3, [r3, #14]
     acc:	04db      	lsls	r3, r3, #19
     ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    uint32_t reg_control_mask = (\
     ad2:	4313      	orrs	r3, r2
     ad4:	60fb      	str	r3, [r7, #12]
                                   
    return reg_control_mask;
     ad6:	68fb      	ldr	r3, [r7, #12]
}
     ad8:	4618      	mov	r0, r3
     ada:	3714      	adds	r7, #20
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr

00000ae2 <I2C_SetClockSclCountParams>:


static void I2C_SetClockSclCountParams(I2C_TypeDef  *I2Cx , I2C_ParamMaxSpeedMode max_speed, uint32_t sclH,uint32_t sclL)
{
     ae2:	b480      	push	{r7}
     ae4:	b085      	sub	sp, #20
     ae6:	af00      	add	r7, sp, #0
     ae8:	60f8      	str	r0, [r7, #12]
     aea:	607a      	str	r2, [r7, #4]
     aec:	603b      	str	r3, [r7, #0]
     aee:	460b      	mov	r3, r1
     af0:	72fb      	strb	r3, [r7, #11]
    switch(max_speed)
     af2:	7afb      	ldrb	r3, [r7, #11]
     af4:	2b03      	cmp	r3, #3
     af6:	d827      	bhi.n	b48 <I2C_SetClockSclCountParams+0x66>
     af8:	a201      	add	r2, pc, #4	; (adr r2, b00 <I2C_SetClockSclCountParams+0x1e>)
     afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     afe:	bf00      	nop
     b00:	00000b47 	.word	0x00000b47
     b04:	00000b11 	.word	0x00000b11
     b08:	00000b23 	.word	0x00000b23
     b0c:	00000b35 	.word	0x00000b35
    {
        case PARAM_MAX_SPEED_RESERVED:
            break;
        case PARAM_MAX_SPEED_STANDARD:
            I2Cx->IC_SS_SCL_HCNT =  (sclH)&I2C_IC_IC_SS_SCL_HCNT_MSK;
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	b29a      	uxth	r2, r3
     b14:	68fb      	ldr	r3, [r7, #12]
     b16:	615a      	str	r2, [r3, #20]
            I2Cx->IC_SS_SCL_LCNT  = (sclL)&I2C_IC_IC_SS_SCL_LCNT_MSK;
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	b29a      	uxth	r2, r3
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	619a      	str	r2, [r3, #24]
            break;
     b20:	e012      	b.n	b48 <I2C_SetClockSclCountParams+0x66>
        case PARAM_MAX_SPEED_FAST:
            I2Cx->IC_FS_SCL_HCNT =  (sclH)&I2C_IC_IC_FS_SCL_HCNT_MSK;
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	b29a      	uxth	r2, r3
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	61da      	str	r2, [r3, #28]
            I2Cx->IC_FS_SCL_LCNT  = (sclL)&I2C_IC_IC_FS_SCL_LCNT_MSK;
     b2a:	683b      	ldr	r3, [r7, #0]
     b2c:	b29a      	uxth	r2, r3
     b2e:	68fb      	ldr	r3, [r7, #12]
     b30:	621a      	str	r2, [r3, #32]
            break;
     b32:	e009      	b.n	b48 <I2C_SetClockSclCountParams+0x66>
        case PARAM_MAX_SPEED_HIGH:
            I2Cx->IC_HS_SCL_HCNT =  (sclH)&I2C_IC_IC_HS_SCL_HCNT_MSK;
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	b29a      	uxth	r2, r3
     b38:	68fb      	ldr	r3, [r7, #12]
     b3a:	625a      	str	r2, [r3, #36]	; 0x24
            I2Cx->IC_HS_SCL_LCNT  = (sclL)&I2C_IC_IC_HS_SCL_LCNT_MSK;
     b3c:	683b      	ldr	r3, [r7, #0]
     b3e:	b29a      	uxth	r2, r3
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	629a      	str	r2, [r3, #40]	; 0x28
            break;
     b44:	e000      	b.n	b48 <I2C_SetClockSclCountParams+0x66>
            break;
     b46:	bf00      	nop
    }

}
     b48:	bf00      	nop
     b4a:	3714      	adds	r7, #20
     b4c:	46bd      	mov	sp, r7
     b4e:	bc80      	pop	{r7}
     b50:	4770      	bx	lr

00000b52 <I2C_SetTargerAddressConfigParams>:



static uint32_t I2C_SetTargerAddressConfigParams(I2C_InitInof_Type  *I2C_InitStru) 
{
     b52:	b480      	push	{r7}
     b54:	b085      	sub	sp, #20
     b56:	af00      	add	r7, sp, #0
     b58:	6078      	str	r0, [r7, #4]
    uint32_t targer_address_mask  =  ((( I2C_InitStru->I2C_target_address & I2C_IC_TAR_IC_TAR_MSK))<<I2C_IC_TAR_IC_TAR_POS |
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	8a1b      	ldrh	r3, [r3, #16]
     b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    (I2C_InitStru->general_call_or_start_byte<<I2C_IC_TAR_GC_OR_START_POS)|
     b62:	687a      	ldr	r2, [r7, #4]
     b64:	7cd2      	ldrb	r2, [r2, #19]
     b66:	0292      	lsls	r2, r2, #10
    uint32_t targer_address_mask  =  ((( I2C_InitStru->I2C_target_address & I2C_IC_TAR_IC_TAR_MSK))<<I2C_IC_TAR_IC_TAR_POS |
     b68:	4313      	orrs	r3, r2
    (I2C_InitStru->general_call_or_start_byte_en<<I2C_IC_TAR_SPECIAL_POS)|
     b6a:	687a      	ldr	r2, [r7, #4]
     b6c:	7d12      	ldrb	r2, [r2, #20]
     b6e:	02d2      	lsls	r2, r2, #11
    (I2C_InitStru->general_call_or_start_byte<<I2C_IC_TAR_GC_OR_START_POS)|
     b70:	4313      	orrs	r3, r2
    (I2C_InitStru->targer_address_type<<I2C_IC_TAR_IC_10BITADDR_MASTER_POS)|
     b72:	687a      	ldr	r2, [r7, #4]
     b74:	7c92      	ldrb	r2, [r2, #18]
     b76:	0312      	lsls	r2, r2, #12
    (I2C_InitStru->general_call_or_start_byte_en<<I2C_IC_TAR_SPECIAL_POS)|
     b78:	4313      	orrs	r3, r2
    (I2C_InitStru->programming_device_id_en<<I2C_IC_TAR_DEVICE_ID_POS)|
     b7a:	687a      	ldr	r2, [r7, #4]
     b7c:	7d52      	ldrb	r2, [r2, #21]
     b7e:	0352      	lsls	r2, r2, #13
    (I2C_InitStru->targer_address_type<<I2C_IC_TAR_IC_10BITADDR_MASTER_POS)|
     b80:	4313      	orrs	r3, r2
    (I2C_InitStru->programming_SMBUS_quick_cmd_en<<I2C_IC_TAR_SMBUS_QUICK_CMD_POS));
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	7d92      	ldrb	r2, [r2, #22]
     b86:	0412      	lsls	r2, r2, #16
    uint32_t targer_address_mask  =  ((( I2C_InitStru->I2C_target_address & I2C_IC_TAR_IC_TAR_MSK))<<I2C_IC_TAR_IC_TAR_POS |
     b88:	4313      	orrs	r3, r2
     b8a:	60fb      	str	r3, [r7, #12]

    return targer_address_mask;
     b8c:	68fb      	ldr	r3, [r7, #12]
     
}
     b8e:	4618      	mov	r0, r3
     b90:	3714      	adds	r7, #20
     b92:	46bd      	mov	sp, r7
     b94:	bc80      	pop	{r7}
     b96:	4770      	bx	lr

00000b98 <I2C_DeInit>:

void I2C_DeInit(I2C_TypeDef  *I2Cx)
{
     b98:	b580      	push	{r7, lr}
     b9a:	b082      	sub	sp, #8
     b9c:	af00      	add	r7, sp, #0
     b9e:	6078      	str	r0, [r7, #4]
    }
#endif
    
#if  defined(BR002)||defined(BR003)

    SystemDevRstCtl(I2C_SwRst);
     ba0:	200b      	movs	r0, #11
     ba2:	f7ff fbdd 	bl	360 <SystemDevRstCtl>
    
#endif
}
     ba6:	bf00      	nop
     ba8:	3708      	adds	r7, #8
     baa:	46bd      	mov	sp, r7
     bac:	bd80      	pop	{r7, pc}

00000bae <I2C_ReadingDeviceId>:


void I2C_ReadingDeviceId(I2C_TypeDef  *I2Cx )
{
     bae:	b480      	push	{r7}
     bb0:	b083      	sub	sp, #12
     bb2:	af00      	add	r7, sp, #0
     bb4:	6078      	str	r0, [r7, #4]
    I2Cx->IC_ENABLE  &= ~I2C_IC_IC_ENABLE_ENBALE_MSK;
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     bba:	f023 0201 	bic.w	r2, r3, #1
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	66da      	str	r2, [r3, #108]	; 0x6c
    I2Cx->IC_TAR   |= I2C_IC_TAR_SPECIAL_MSK|I2C_IC_TAR_DEVICE_ID_MSK;
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	685b      	ldr	r3, [r3, #4]
     bc6:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	605a      	str	r2, [r3, #4]
    I2Cx->IC_ENABLE  |= I2C_IC_IC_ENABLE_ENBALE_MSK;
     bce:	687b      	ldr	r3, [r7, #4]
     bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     bd2:	f043 0201 	orr.w	r2, r3, #1
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	66da      	str	r2, [r3, #108]	; 0x6c
    I2Cx->IC_ENABLE =0x03;
     bda:	687b      	ldr	r3, [r7, #4]
     bdc:	2203      	movs	r2, #3
     bde:	66da      	str	r2, [r3, #108]	; 0x6c
}
     be0:	bf00      	nop
     be2:	370c      	adds	r7, #12
     be4:	46bd      	mov	sp, r7
     be6:	bc80      	pop	{r7}
     be8:	4770      	bx	lr

00000bea <I2C_Init>:
  * @param  I2C_InitStru: pointer to a I2C_InitInfo_Type structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef  *I2Cx,I2C_InitInof_Type  *I2C_InitStru)
{
     bea:	b580      	push	{r7, lr}
     bec:	b082      	sub	sp, #8
     bee:	af00      	add	r7, sp, #0
     bf0:	6078      	str	r0, [r7, #4]
     bf2:	6039      	str	r1, [r7, #0]
    I2C_ClearCombinedInterruptAll(I2Cx);
     bf4:	6878      	ldr	r0, [r7, #4]
     bf6:	f000 fa4c 	bl	1092 <I2C_ClearCombinedInterruptAll>
 
    /* Write to IC_ENABLE  register to disable*/
    I2Cx->IC_ENABLE  &= ~I2C_IC_IC_ENABLE_ENBALE_MSK;
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     bfe:	f023 0201 	bic.w	r2, r3, #1
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Program IC_CON register fields  */ 
    I2Cx->IC_CON  = I2C_GetControlParams(I2C_InitStru);
     c06:	6838      	ldr	r0, [r7, #0]
     c08:	f7ff ff09 	bl	a1e <I2C_GetControlParams>
     c0c:	4602      	mov	r2, r0
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	601a      	str	r2, [r3, #0]

    /*Set address of target Slave by writing it to SAR*/
    I2Cx->IC_TAR  = I2C_SetTargerAddressConfigParams(I2C_InitStru);
     c12:	6838      	ldr	r0, [r7, #0]
     c14:	f7ff ff9d 	bl	b52 <I2C_SetTargerAddressConfigParams>
     c18:	4602      	mov	r2, r0
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	605a      	str	r2, [r3, #4]
    I2Cx->IC_SAR  =(I2C_InitStru->salve_address &I2C_IC_SAR_IC_SAR_MSK);
     c1e:	683b      	ldr	r3, [r7, #0]
     c20:	8b1b      	ldrh	r3, [r3, #24]
     c22:	f3c3 0209 	ubfx	r2, r3, #0, #10
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	609a      	str	r2, [r3, #8]

    /* Write to IC_SS_HCNT to set HIGH and LOW  period of SCL*/
    I2C_SetClockSclCountParams(I2Cx,I2C_InitStru->max_speed,I2C_InitStru->slc_h,I2C_InitStru->slc_l);
     c2a:	683b      	ldr	r3, [r7, #0]
     c2c:	7859      	ldrb	r1, [r3, #1]
     c2e:	683b      	ldr	r3, [r7, #0]
     c30:	69da      	ldr	r2, [r3, #28]
     c32:	683b      	ldr	r3, [r7, #0]
     c34:	6a1b      	ldr	r3, [r3, #32]
     c36:	6878      	ldr	r0, [r7, #4]
     c38:	f7ff ff53 	bl	ae2 <I2C_SetClockSclCountParams>
    
    /* Write to IC_INTR_MASK to enable all interrupts*/
    I2Cx->INTR_MASK  = I2C_InitStru->interrupt_unmask;
     c3c:	683b      	ldr	r3, [r7, #0]
     c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	631a      	str	r2, [r3, #48]	; 0x30

    /*configuration  RX /TX threshold level*/
    I2Cx->RX_TL  = I2C_InitStru->fifo_receive_threshold_level;
     c44:	683b      	ldr	r3, [r7, #0]
     c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
     c4a:	461a      	mov	r2, r3
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	639a      	str	r2, [r3, #56]	; 0x38
    I2Cx->TX_TL  = I2C_InitStru->fifo_transmit_threshold_level;
     c50:	683b      	ldr	r3, [r7, #0]
     c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
     c56:	461a      	mov	r2, r3
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /*configuration DMA */
    I2Cx->IC_DMA_CR  |= ((I2C_InitStru->dma_rx_en & 0x01) <<I2C_IC_DMA_CR_RDMAE_POS ) |
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     c62:	683a      	ldr	r2, [r7, #0]
     c64:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
     c68:	f002 0101 	and.w	r1, r2, #1
        ((I2C_InitStru->dma_tx_en & 0x01 )<<I2C_IC_DMA_CR_TDMAE_POS);
     c6c:	683a      	ldr	r2, [r7, #0]
     c6e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
     c72:	0052      	lsls	r2, r2, #1
     c74:	f002 0202 	and.w	r2, r2, #2
    I2Cx->IC_DMA_CR  |= ((I2C_InitStru->dma_rx_en & 0x01) <<I2C_IC_DMA_CR_RDMAE_POS ) |
     c78:	430a      	orrs	r2, r1
     c7a:	431a      	orrs	r2, r3
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    
    I2Cx->IC_DMA_TDLR |= I2C_InitStru->dma_tx_data_level;
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
     c88:	683b      	ldr	r3, [r7, #0]
     c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c8c:	431a      	orrs	r2, r3
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    I2Cx->IC_DMA_RDLR |= I2C_InitStru->dma_rx_data_level;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
     c9a:	683b      	ldr	r3, [r7, #0]
     c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     c9e:	431a      	orrs	r2, r3
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* enable i2c */
    I2Cx->IC_ENABLE |= I2C_IC_IC_ENABLE_ENBALE_MSK;
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     caa:	f043 0201 	orr.w	r2, r3, #1
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	66da      	str	r2, [r3, #108]	; 0x6c
   
}
     cb2:	bf00      	nop
     cb4:	3708      	adds	r7, #8
     cb6:	46bd      	mov	sp, r7
     cb8:	bd80      	pop	{r7, pc}

00000cba <I2C_ReadDate>:


bool  I2C_ReadDate(I2C_TypeDef  *I2Cx  ,uint8_t *rx, uint16_t rlen,bool rstop)
{
     cba:	b590      	push	{r4, r7, lr}
     cbc:	b087      	sub	sp, #28
     cbe:	af00      	add	r7, sp, #0
     cc0:	60f8      	str	r0, [r7, #12]
     cc2:	60b9      	str	r1, [r7, #8]
     cc4:	4611      	mov	r1, r2
     cc6:	461a      	mov	r2, r3
     cc8:	460b      	mov	r3, r1
     cca:	80fb      	strh	r3, [r7, #6]
     ccc:	4613      	mov	r3, r2
     cce:	717b      	strb	r3, [r7, #5]
    uint16_t i = 0;
     cd0:	2300      	movs	r3, #0
     cd2:	82fb      	strh	r3, [r7, #22]
    bool success =false;
     cd4:	2300      	movs	r3, #0
     cd6:	757b      	strb	r3, [r7, #21]
    i2c_DataCmd  data;
    
    if((!rx)||(rlen ==0))
     cd8:	68bb      	ldr	r3, [r7, #8]
     cda:	2b00      	cmp	r3, #0
     cdc:	d002      	beq.n	ce4 <I2C_ReadDate+0x2a>
     cde:	88fb      	ldrh	r3, [r7, #6]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d102      	bne.n	cea <I2C_ReadDate+0x30>
        success = false ;
     ce4:	2300      	movs	r3, #0
     ce6:	757b      	strb	r3, [r7, #21]
     ce8:	e041      	b.n	d6e <I2C_ReadDate+0xb4>
    else
    {
        for(i=0;i<rlen;i++)
     cea:	2300      	movs	r3, #0
     cec:	82fb      	strh	r3, [r7, #22]
     cee:	e03a      	b.n	d66 <I2C_ReadDate+0xac>
        {
            data.com = read;
     cf0:	7c7b      	ldrb	r3, [r7, #17]
     cf2:	f043 0301 	orr.w	r3, r3, #1
     cf6:	747b      	strb	r3, [r7, #17]
            data.non_seq = 0;
     cf8:	7c7b      	ldrb	r3, [r7, #17]
     cfa:	f36f 03c3 	bfc	r3, #3, #1
     cfe:	747b      	strb	r3, [r7, #17]
            data.stop = 0;
     d00:	7c7b      	ldrb	r3, [r7, #17]
     d02:	f36f 0341 	bfc	r3, #1, #1
     d06:	747b      	strb	r3, [r7, #17]
            data.restart = 1;
     d08:	7c7b      	ldrb	r3, [r7, #17]
     d0a:	f043 0304 	orr.w	r3, r3, #4
     d0e:	747b      	strb	r3, [r7, #17]
            data.data=0;
     d10:	2300      	movs	r3, #0
     d12:	743b      	strb	r3, [r7, #16]

            for(i=0;i<rlen;i++)
     d14:	2300      	movs	r3, #0
     d16:	82fb      	strh	r3, [r7, #22]
     d18:	e01e      	b.n	d58 <I2C_ReadDate+0x9e>
            {
                if(i==rlen-1 && rstop)
     d1a:	8afa      	ldrh	r2, [r7, #22]
     d1c:	88fb      	ldrh	r3, [r7, #6]
     d1e:	3b01      	subs	r3, #1
     d20:	429a      	cmp	r2, r3
     d22:	d106      	bne.n	d32 <I2C_ReadDate+0x78>
     d24:	797b      	ldrb	r3, [r7, #5]
     d26:	2b00      	cmp	r3, #0
     d28:	d003      	beq.n	d32 <I2C_ReadDate+0x78>
                data.stop = 1;
     d2a:	7c7b      	ldrb	r3, [r7, #17]
     d2c:	f043 0302 	orr.w	r3, r3, #2
     d30:	747b      	strb	r3, [r7, #17]
                rx[i] =  I2C_ReadByte(I2Cx,i2c_SubData(data));
     d32:	6938      	ldr	r0, [r7, #16]
     d34:	f7ff fe50 	bl	9d8 <i2c_SubData>
     d38:	4601      	mov	r1, r0
     d3a:	8afb      	ldrh	r3, [r7, #22]
     d3c:	68ba      	ldr	r2, [r7, #8]
     d3e:	18d4      	adds	r4, r2, r3
     d40:	68f8      	ldr	r0, [r7, #12]
     d42:	f000 f88b 	bl	e5c <I2C_ReadByte>
     d46:	4603      	mov	r3, r0
     d48:	7023      	strb	r3, [r4, #0]
                data.restart = 0;
     d4a:	7c7b      	ldrb	r3, [r7, #17]
     d4c:	f36f 0382 	bfc	r3, #2, #1
     d50:	747b      	strb	r3, [r7, #17]
            for(i=0;i<rlen;i++)
     d52:	8afb      	ldrh	r3, [r7, #22]
     d54:	3301      	adds	r3, #1
     d56:	82fb      	strh	r3, [r7, #22]
     d58:	8afa      	ldrh	r2, [r7, #22]
     d5a:	88fb      	ldrh	r3, [r7, #6]
     d5c:	429a      	cmp	r2, r3
     d5e:	d3dc      	bcc.n	d1a <I2C_ReadDate+0x60>
        for(i=0;i<rlen;i++)
     d60:	8afb      	ldrh	r3, [r7, #22]
     d62:	3301      	adds	r3, #1
     d64:	82fb      	strh	r3, [r7, #22]
     d66:	8afa      	ldrh	r2, [r7, #22]
     d68:	88fb      	ldrh	r3, [r7, #6]
     d6a:	429a      	cmp	r2, r3
     d6c:	d3c0      	bcc.n	cf0 <I2C_ReadDate+0x36>
             }

        }
    }

    return success;
     d6e:	7d7b      	ldrb	r3, [r7, #21]

}
     d70:	4618      	mov	r0, r3
     d72:	371c      	adds	r7, #28
     d74:	46bd      	mov	sp, r7
     d76:	bd90      	pop	{r4, r7, pc}

00000d78 <I2C_WriteDate>:

bool  I2C_WriteDate(I2C_TypeDef  *I2Cx  ,uint8_t *tx, uint16_t tlen,bool tstop)
{
     d78:	b580      	push	{r7, lr}
     d7a:	b086      	sub	sp, #24
     d7c:	af00      	add	r7, sp, #0
     d7e:	60f8      	str	r0, [r7, #12]
     d80:	60b9      	str	r1, [r7, #8]
     d82:	4611      	mov	r1, r2
     d84:	461a      	mov	r2, r3
     d86:	460b      	mov	r3, r1
     d88:	80fb      	strh	r3, [r7, #6]
     d8a:	4613      	mov	r3, r2
     d8c:	717b      	strb	r3, [r7, #5]
    uint16_t i = 0;
     d8e:	2300      	movs	r3, #0
     d90:	82fb      	strh	r3, [r7, #22]
    bool success =false;
     d92:	2300      	movs	r3, #0
     d94:	757b      	strb	r3, [r7, #21]
    i2c_DataCmd  data;
   
    if((!tx )|| (tlen ==0 ))
     d96:	68bb      	ldr	r3, [r7, #8]
     d98:	2b00      	cmp	r3, #0
     d9a:	d002      	beq.n	da2 <I2C_WriteDate+0x2a>
     d9c:	88fb      	ldrh	r3, [r7, #6]
     d9e:	2b00      	cmp	r3, #0
     da0:	d102      	bne.n	da8 <I2C_WriteDate+0x30>
        success = false ;
     da2:	2300      	movs	r3, #0
     da4:	757b      	strb	r3, [r7, #21]
     da6:	e036      	b.n	e16 <I2C_WriteDate+0x9e>
    else
    {
        data.com = write;
     da8:	7c7b      	ldrb	r3, [r7, #17]
     daa:	f36f 0300 	bfc	r3, #0, #1
     dae:	747b      	strb	r3, [r7, #17]
        data.non_seq = 0;
     db0:	7c7b      	ldrb	r3, [r7, #17]
     db2:	f36f 03c3 	bfc	r3, #3, #1
     db6:	747b      	strb	r3, [r7, #17]
        data.stop = 0;
     db8:	7c7b      	ldrb	r3, [r7, #17]
     dba:	f36f 0341 	bfc	r3, #1, #1
     dbe:	747b      	strb	r3, [r7, #17]
        data.restart = 1;
     dc0:	7c7b      	ldrb	r3, [r7, #17]
     dc2:	f043 0304 	orr.w	r3, r3, #4
     dc6:	747b      	strb	r3, [r7, #17]
        
        for(i=0;i<tlen;i++)
     dc8:	2300      	movs	r3, #0
     dca:	82fb      	strh	r3, [r7, #22]
     dcc:	e01f      	b.n	e0e <I2C_WriteDate+0x96>
        {
            data.data = tx[i];
     dce:	8afb      	ldrh	r3, [r7, #22]
     dd0:	68ba      	ldr	r2, [r7, #8]
     dd2:	4413      	add	r3, r2
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	743b      	strb	r3, [r7, #16]
            if(i==tlen-1  && tstop)
     dd8:	8afa      	ldrh	r2, [r7, #22]
     dda:	88fb      	ldrh	r3, [r7, #6]
     ddc:	3b01      	subs	r3, #1
     dde:	429a      	cmp	r2, r3
     de0:	d106      	bne.n	df0 <I2C_WriteDate+0x78>
     de2:	797b      	ldrb	r3, [r7, #5]
     de4:	2b00      	cmp	r3, #0
     de6:	d003      	beq.n	df0 <I2C_WriteDate+0x78>
                data.stop = 1;
     de8:	7c7b      	ldrb	r3, [r7, #17]
     dea:	f043 0302 	orr.w	r3, r3, #2
     dee:	747b      	strb	r3, [r7, #17]
            I2C_WriteByte(I2Cx,i2c_SubData(data));
     df0:	6938      	ldr	r0, [r7, #16]
     df2:	f7ff fdf1 	bl	9d8 <i2c_SubData>
     df6:	4603      	mov	r3, r0
     df8:	4619      	mov	r1, r3
     dfa:	68f8      	ldr	r0, [r7, #12]
     dfc:	f000 f810 	bl	e20 <I2C_WriteByte>
            data.restart = 0;
     e00:	7c7b      	ldrb	r3, [r7, #17]
     e02:	f36f 0382 	bfc	r3, #2, #1
     e06:	747b      	strb	r3, [r7, #17]
        for(i=0;i<tlen;i++)
     e08:	8afb      	ldrh	r3, [r7, #22]
     e0a:	3301      	adds	r3, #1
     e0c:	82fb      	strh	r3, [r7, #22]
     e0e:	8afa      	ldrh	r2, [r7, #22]
     e10:	88fb      	ldrh	r3, [r7, #6]
     e12:	429a      	cmp	r2, r3
     e14:	d3db      	bcc.n	dce <I2C_WriteDate+0x56>
        }
    }

     return success;
     e16:	7d7b      	ldrb	r3, [r7, #21]

}
     e18:	4618      	mov	r0, r3
     e1a:	3718      	adds	r7, #24
     e1c:	46bd      	mov	sp, r7
     e1e:	bd80      	pop	{r7, pc}

00000e20 <I2C_WriteByte>:

void I2C_WriteByte(I2C_TypeDef  *I2Cx  , uint32_t data)
{
     e20:	b480      	push	{r7}
     e22:	b085      	sub	sp, #20
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
     e28:	6039      	str	r1, [r7, #0]
    uint32_t i = RETRY_TIMES;
     e2a:	f242 7310 	movw	r3, #10000	; 0x2710
     e2e:	60fb      	str	r3, [r7, #12]
    I2Cx->DATA_CMD = data;
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	683a      	ldr	r2, [r7, #0]
     e34:	611a      	str	r2, [r3, #16]
    while((!((I2Cx->IC_STATUS>>STATUS_TX_FIFO_EMPTY) & 0x01)) && i>0){i--;}
     e36:	e002      	b.n	e3e <I2C_WriteByte+0x1e>
     e38:	68fb      	ldr	r3, [r7, #12]
     e3a:	3b01      	subs	r3, #1
     e3c:	60fb      	str	r3, [r7, #12]
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e42:	089b      	lsrs	r3, r3, #2
     e44:	f003 0301 	and.w	r3, r3, #1
     e48:	2b00      	cmp	r3, #0
     e4a:	d102      	bne.n	e52 <I2C_WriteByte+0x32>
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	2b00      	cmp	r3, #0
     e50:	d1f2      	bne.n	e38 <I2C_WriteByte+0x18>
}
     e52:	bf00      	nop
     e54:	3714      	adds	r7, #20
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <I2C_ReadByte>:

uint8_t  I2C_ReadByte(I2C_TypeDef  *I2Cx  , uint32_t cmd)
{
     e5c:	b480      	push	{r7}
     e5e:	b085      	sub	sp, #20
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	6039      	str	r1, [r7, #0]
    uint32_t i = RETRY_TIMES;
     e66:	f242 7310 	movw	r3, #10000	; 0x2710
     e6a:	60fb      	str	r3, [r7, #12]
    I2Cx->DATA_CMD =cmd;
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	683a      	ldr	r2, [r7, #0]
     e70:	611a      	str	r2, [r3, #16]
    while((!((I2Cx->IC_STATUS>>STATUS_RX_FIFO_NOT_EMPTY) & 0x01))&& i>0){i--;}
     e72:	e002      	b.n	e7a <I2C_ReadByte+0x1e>
     e74:	68fb      	ldr	r3, [r7, #12]
     e76:	3b01      	subs	r3, #1
     e78:	60fb      	str	r3, [r7, #12]
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     e7e:	08db      	lsrs	r3, r3, #3
     e80:	f003 0301 	and.w	r3, r3, #1
     e84:	2b00      	cmp	r3, #0
     e86:	d102      	bne.n	e8e <I2C_ReadByte+0x32>
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d1f2      	bne.n	e74 <I2C_ReadByte+0x18>
    return  (uint8_t )(I2Cx->DATA_CMD &0x00ff);    
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	691b      	ldr	r3, [r3, #16]
     e92:	b2db      	uxtb	r3, r3
}
     e94:	4618      	mov	r0, r3
     e96:	3714      	adds	r7, #20
     e98:	46bd      	mov	sp, r7
     e9a:	bc80      	pop	{r7}
     e9c:	4770      	bx	lr

00000e9e <I2C_GetRxTxThreshold>:

void I2C_GetRxTxThreshold(I2C_TypeDef  *I2Cx,uint32_t *TX_TL,uint32_t *RX_TL)
{
     e9e:	b480      	push	{r7}
     ea0:	b085      	sub	sp, #20
     ea2:	af00      	add	r7, sp, #0
     ea4:	60f8      	str	r0, [r7, #12]
     ea6:	60b9      	str	r1, [r7, #8]
     ea8:	607a      	str	r2, [r7, #4]
    *TX_TL = I2Cx->IC_TXFLR;
     eaa:	68fb      	ldr	r3, [r7, #12]
     eac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     eae:	68bb      	ldr	r3, [r7, #8]
     eb0:	601a      	str	r2, [r3, #0]
    *RX_TL = I2Cx->IC_RXFLR;
     eb2:	68fb      	ldr	r3, [r7, #12]
     eb4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
     eb6:	687b      	ldr	r3, [r7, #4]
     eb8:	601a      	str	r2, [r3, #0]
}
     eba:	bf00      	nop
     ebc:	3714      	adds	r7, #20
     ebe:	46bd      	mov	sp, r7
     ec0:	bc80      	pop	{r7}
     ec2:	4770      	bx	lr

00000ec4 <I2C_SetCmdData>:

void I2C_SetCmdData(I2C_TypeDef  *I2Cx  , uint32_t data)
{
     ec4:	b480      	push	{r7}
     ec6:	b083      	sub	sp, #12
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	6039      	str	r1, [r7, #0]
    I2Cx->DATA_CMD = data;
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	683a      	ldr	r2, [r7, #0]
     ed2:	611a      	str	r2, [r3, #16]
}
     ed4:	bf00      	nop
     ed6:	370c      	adds	r7, #12
     ed8:	46bd      	mov	sp, r7
     eda:	bc80      	pop	{r7}
     edc:	4770      	bx	lr

00000ede <I2C_GetCmdData>:

uint32_t  I2C_GetCmdData(I2C_TypeDef  *I2Cx)
{
     ede:	b480      	push	{r7}
     ee0:	b083      	sub	sp, #12
     ee2:	af00      	add	r7, sp, #0
     ee4:	6078      	str	r0, [r7, #4]
    return I2Cx->DATA_CMD;    
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	691b      	ldr	r3, [r3, #16]
}
     eea:	4618      	mov	r0, r3
     eec:	370c      	adds	r7, #12
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <I2C_ClearSMBUSInterrupt>:

bool I2C_ClearSMBUSInterrupt(I2C_TypeDef  *I2Cx  , I2C_SMBUSInterrupt_Type type)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
     efc:	460b      	mov	r3, r1
     efe:	70fb      	strb	r3, [r7, #3]
    if(I2Cx->IC_CLR_SMBUS_INTR>>type & 0x01)
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
     f06:	78fb      	ldrb	r3, [r7, #3]
     f08:	fa22 f303 	lsr.w	r3, r2, r3
     f0c:	f003 0301 	and.w	r3, r3, #1
     f10:	2b00      	cmp	r3, #0
     f12:	d00c      	beq.n	f2e <I2C_ClearSMBUSInterrupt+0x3a>
    {
           return  I2Cx->IC_CLR_SMBUS_INTR  =  (0x01ul)<<type; 
     f14:	78fb      	ldrb	r3, [r7, #3]
     f16:	2201      	movs	r2, #1
     f18:	fa02 f303 	lsl.w	r3, r2, r3
     f1c:	687a      	ldr	r2, [r7, #4]
     f1e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
     f22:	2b00      	cmp	r3, #0
     f24:	bf14      	ite	ne
     f26:	2301      	movne	r3, #1
     f28:	2300      	moveq	r3, #0
     f2a:	b2db      	uxtb	r3, r3
     f2c:	e000      	b.n	f30 <I2C_ClearSMBUSInterrupt+0x3c>
    }
    else
    return false;
     f2e:	2300      	movs	r3, #0
}
     f30:	4618      	mov	r0, r3
     f32:	370c      	adds	r7, #12
     f34:	46bd      	mov	sp, r7
     f36:	bc80      	pop	{r7}
     f38:	4770      	bx	lr

00000f3a <I2C_ClearInterrupt>:

bool   I2C_ClearInterrupt(I2C_TypeDef  *I2Cx  , I2C_Interrupt_Type type)   
{
     f3a:	b480      	push	{r7}
     f3c:	b083      	sub	sp, #12
     f3e:	af00      	add	r7, sp, #0
     f40:	6078      	str	r0, [r7, #4]
     f42:	460b      	mov	r3, r1
     f44:	70fb      	strb	r3, [r7, #3]
    switch(type)
     f46:	78fb      	ldrb	r3, [r7, #3]
     f48:	2b0e      	cmp	r3, #14
     f4a:	f200 809b 	bhi.w	1084 <Stack_Size+0x84>
     f4e:	a201      	add	r2, pc, #4	; (adr r2, f54 <I2C_ClearInterrupt+0x1a>)
     f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f54:	00000f91 	.word	0x00000f91
     f58:	00000fa5 	.word	0x00000fa5
     f5c:	00001085 	.word	0x00001085
     f60:	00000fb9 	.word	0x00000fb9
     f64:	00001085 	.word	0x00001085
     f68:	00000fcd 	.word	0x00000fcd
     f6c:	00000fe1 	.word	0x00000fe1
     f70:	00000ff5 	.word	0x00000ff5
     f74:	00001009 	.word	0x00001009
     f78:	0000101d 	.word	0x0000101d
     f7c:	00001031 	.word	0x00001031
     f80:	00001045 	.word	0x00001045
     f84:	00001059 	.word	0x00001059
     f88:	00001085 	.word	0x00001085
     f8c:	0000106f 	.word	0x0000106f
    {
        case RX_UNDER_TYPE: 
            return  (I2Cx->IC_CLR_RX_UNDER &0x01);
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     f94:	f003 0301 	and.w	r3, r3, #1
     f98:	2b00      	cmp	r3, #0
     f9a:	bf14      	ite	ne
     f9c:	2301      	movne	r3, #1
     f9e:	2300      	moveq	r3, #0
     fa0:	b2db      	uxtb	r3, r3
     fa2:	e071      	b.n	1088 <Stack_Size+0x88>
        case RX_OVER_TYPE:
            return  (I2Cx->IC_CLR_RX_OVER &0x01);
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     fa8:	f003 0301 	and.w	r3, r3, #1
     fac:	2b00      	cmp	r3, #0
     fae:	bf14      	ite	ne
     fb0:	2301      	movne	r3, #1
     fb2:	2300      	moveq	r3, #0
     fb4:	b2db      	uxtb	r3, r3
     fb6:	e067      	b.n	1088 <Stack_Size+0x88>
        //case RX_FULL_TYPE: /* no support*/
        case TX_OVER_TYPE:
            return  (I2Cx->IC_CLR_TX_OVER &0x01);
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     fbc:	f003 0301 	and.w	r3, r3, #1
     fc0:	2b00      	cmp	r3, #0
     fc2:	bf14      	ite	ne
     fc4:	2301      	movne	r3, #1
     fc6:	2300      	moveq	r3, #0
     fc8:	b2db      	uxtb	r3, r3
     fca:	e05d      	b.n	1088 <Stack_Size+0x88>
        //case TX_EMPTY_TYPE:/* no support*/
        case RD_REQ_TYPE:
            return  (I2Cx->IC_CLR_RD_REQ &0x01);
     fcc:	687b      	ldr	r3, [r7, #4]
     fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     fd0:	f003 0301 	and.w	r3, r3, #1
     fd4:	2b00      	cmp	r3, #0
     fd6:	bf14      	ite	ne
     fd8:	2301      	movne	r3, #1
     fda:	2300      	moveq	r3, #0
     fdc:	b2db      	uxtb	r3, r3
     fde:	e053      	b.n	1088 <Stack_Size+0x88>
        case TX_ABRT_TYPE:
            return  (I2Cx->IC_CLR_TX_ABRT &0x01);
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     fe4:	f003 0301 	and.w	r3, r3, #1
     fe8:	2b00      	cmp	r3, #0
     fea:	bf14      	ite	ne
     fec:	2301      	movne	r3, #1
     fee:	2300      	moveq	r3, #0
     ff0:	b2db      	uxtb	r3, r3
     ff2:	e049      	b.n	1088 <Stack_Size+0x88>
        case RX_DONE_TYPE:
            return  (I2Cx->IC_CLR_RX_DONE &0x01);
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     ff8:	f003 0301 	and.w	r3, r3, #1
     ffc:	2b00      	cmp	r3, #0
     ffe:	bf14      	ite	ne
    1000:	2301      	movne	r3, #1
    1002:	2300      	moveq	r3, #0
    1004:	b2db      	uxtb	r3, r3
    1006:	e03f      	b.n	1088 <Stack_Size+0x88>
        case ACTIVITY_TPYE:
            return  (I2Cx->IC_CLR_ACTIVITY &0x01);
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    100c:	f003 0301 	and.w	r3, r3, #1
    1010:	2b00      	cmp	r3, #0
    1012:	bf14      	ite	ne
    1014:	2301      	movne	r3, #1
    1016:	2300      	moveq	r3, #0
    1018:	b2db      	uxtb	r3, r3
    101a:	e035      	b.n	1088 <Stack_Size+0x88>
        case STOP_DET_TYPE:
            return  (I2Cx->IC_CLR_STOP_DET &0x01);
    101c:	687b      	ldr	r3, [r7, #4]
    101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1020:	f003 0301 	and.w	r3, r3, #1
    1024:	2b00      	cmp	r3, #0
    1026:	bf14      	ite	ne
    1028:	2301      	movne	r3, #1
    102a:	2300      	moveq	r3, #0
    102c:	b2db      	uxtb	r3, r3
    102e:	e02b      	b.n	1088 <Stack_Size+0x88>
        case START_DET_TYPE:
            return  (I2Cx->IC_CLR_START_DET &0x01);
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1034:	f003 0301 	and.w	r3, r3, #1
    1038:	2b00      	cmp	r3, #0
    103a:	bf14      	ite	ne
    103c:	2301      	movne	r3, #1
    103e:	2300      	moveq	r3, #0
    1040:	b2db      	uxtb	r3, r3
    1042:	e021      	b.n	1088 <Stack_Size+0x88>
        case GEN_CALL_TYPE:
            return  (I2Cx->IC_CLR_GEN_CALL &0x01);
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1048:	f003 0301 	and.w	r3, r3, #1
    104c:	2b00      	cmp	r3, #0
    104e:	bf14      	ite	ne
    1050:	2301      	movne	r3, #1
    1052:	2300      	moveq	r3, #0
    1054:	b2db      	uxtb	r3, r3
    1056:	e017      	b.n	1088 <Stack_Size+0x88>
        case RESTART_DET_TYPE:
            return  (I2Cx->IC_CLR_RESTART_DET &0x01);
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    105e:	f003 0301 	and.w	r3, r3, #1
    1062:	2b00      	cmp	r3, #0
    1064:	bf14      	ite	ne
    1066:	2301      	movne	r3, #1
    1068:	2300      	moveq	r3, #0
    106a:	b2db      	uxtb	r3, r3
    106c:	e00c      	b.n	1088 <Stack_Size+0x88>
       // case MASTER_ON_HOLD_TYPE:/* no support*/	
        case SLC_STUCK_AT_LOW:
            return  (I2Cx->IC_CLR_SCL_STUCK_DET &0x01);
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    1074:	f003 0301 	and.w	r3, r3, #1
    1078:	2b00      	cmp	r3, #0
    107a:	bf14      	ite	ne
    107c:	2301      	movne	r3, #1
    107e:	2300      	moveq	r3, #0
    1080:	b2db      	uxtb	r3, r3
    1082:	e001      	b.n	1088 <Stack_Size+0x88>
         default:
            break;
    1084:	bf00      	nop
    }
    return false;
    1086:	2300      	movs	r3, #0
}
    1088:	4618      	mov	r0, r3
    108a:	370c      	adds	r7, #12
    108c:	46bd      	mov	sp, r7
    108e:	bc80      	pop	{r7}
    1090:	4770      	bx	lr

00001092 <I2C_ClearCombinedInterruptAll>:

bool I2C_ClearCombinedInterruptAll(I2C_TypeDef  *I2Cx)
{
    1092:	b480      	push	{r7}
    1094:	b083      	sub	sp, #12
    1096:	af00      	add	r7, sp, #0
    1098:	6078      	str	r0, [r7, #4]
    return  (I2Cx->IC_CLR_INTR &0x01);
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    109e:	f003 0301 	and.w	r3, r3, #1
    10a2:	2b00      	cmp	r3, #0
    10a4:	bf14      	ite	ne
    10a6:	2301      	movne	r3, #1
    10a8:	2300      	moveq	r3, #0
    10aa:	b2db      	uxtb	r3, r3
}
    10ac:	4618      	mov	r0, r3
    10ae:	370c      	adds	r7, #12
    10b0:	46bd      	mov	sp, r7
    10b2:	bc80      	pop	{r7}
    10b4:	4770      	bx	lr

000010b6 <I2C_ClearRestartInterruptDet>:

bool I2C_ClearRestartInterruptDet(I2C_TypeDef  *I2Cx)
{
    10b6:	b480      	push	{r7}
    10b8:	b083      	sub	sp, #12
    10ba:	af00      	add	r7, sp, #0
    10bc:	6078      	str	r0, [r7, #4]
   return  (I2Cx->IC_CLR_RESTART_DET&0x01);
    10be:	687b      	ldr	r3, [r7, #4]
    10c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    10c4:	f003 0301 	and.w	r3, r3, #1
    10c8:	2b00      	cmp	r3, #0
    10ca:	bf14      	ite	ne
    10cc:	2301      	movne	r3, #1
    10ce:	2300      	moveq	r3, #0
    10d0:	b2db      	uxtb	r3, r3
}
    10d2:	4618      	mov	r0, r3
    10d4:	370c      	adds	r7, #12
    10d6:	46bd      	mov	sp, r7
    10d8:	bc80      	pop	{r7}
    10da:	4770      	bx	lr

000010dc <I2C_ClearSclStuckInterruptDet>:

bool I2C_ClearSclStuckInterruptDet(I2C_TypeDef  *I2Cx)
{
    10dc:	b480      	push	{r7}
    10de:	b083      	sub	sp, #12
    10e0:	af00      	add	r7, sp, #0
    10e2:	6078      	str	r0, [r7, #4]
   return  (I2Cx->IC_CLR_SCL_STUCK_DET&0x01);
    10e4:	687b      	ldr	r3, [r7, #4]
    10e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    10ea:	f003 0301 	and.w	r3, r3, #1
    10ee:	2b00      	cmp	r3, #0
    10f0:	bf14      	ite	ne
    10f2:	2301      	movne	r3, #1
    10f4:	2300      	moveq	r3, #0
    10f6:	b2db      	uxtb	r3, r3
}
    10f8:	4618      	mov	r0, r3
    10fa:	370c      	adds	r7, #12
    10fc:	46bd      	mov	sp, r7
    10fe:	bc80      	pop	{r7}
    1100:	4770      	bx	lr
    1102:	bf00      	nop

00001104 <EEPROM_WriteByte>:
#include "system_BR00x.h"
#include "BR00x_i2c.h"
#include <string.h>

void  EEPROM_WriteByte(uint16_t addr ,uint8_t data)
{
    1104:	b580      	push	{r7, lr}
    1106:	b084      	sub	sp, #16
    1108:	af00      	add	r7, sp, #0
    110a:	4603      	mov	r3, r0
    110c:	460a      	mov	r2, r1
    110e:	80fb      	strh	r3, [r7, #6]
    1110:	4613      	mov	r3, r2
    1112:	717b      	strb	r3, [r7, #5]

    uint8_t data_buff[2+1];

    data_buff[0]= addr>>8;
    1114:	88fb      	ldrh	r3, [r7, #6]
    1116:	0a1b      	lsrs	r3, r3, #8
    1118:	b29b      	uxth	r3, r3
    111a:	b2db      	uxtb	r3, r3
    111c:	733b      	strb	r3, [r7, #12]
    data_buff[1]=addr&0x00ff;
    111e:	88fb      	ldrh	r3, [r7, #6]
    1120:	b2db      	uxtb	r3, r3
    1122:	737b      	strb	r3, [r7, #13]
    data_buff[2] =data;
    1124:	797b      	ldrb	r3, [r7, #5]
    1126:	73bb      	strb	r3, [r7, #14]
    I2C_WriteDate(I2C0,data_buff,3,1);
    1128:	f107 010c 	add.w	r1, r7, #12
    112c:	2301      	movs	r3, #1
    112e:	2203      	movs	r2, #3
    1130:	4803      	ldr	r0, [pc, #12]	; (1140 <EEPROM_WriteByte+0x3c>)
    1132:	f7ff fe21 	bl	d78 <I2C_WriteDate>

}
    1136:	bf00      	nop
    1138:	3710      	adds	r7, #16
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	bf00      	nop
    1140:	90005000 	.word	0x90005000

00001144 <EEPROM_WritePage>:


void  EEPROM_WritePage(uint16_t addr ,uint8_t *data,uint16_t dlen)
{
    1144:	b5b0      	push	{r4, r5, r7, lr}
    1146:	b084      	sub	sp, #16
    1148:	af00      	add	r7, sp, #0
    114a:	4603      	mov	r3, r0
    114c:	6039      	str	r1, [r7, #0]
    114e:	80fb      	strh	r3, [r7, #6]
    1150:	4613      	mov	r3, r2
    1152:	80bb      	strh	r3, [r7, #4]
    1154:	466b      	mov	r3, sp
    1156:	461d      	mov	r5, r3

    uint8_t data_buff[2+dlen];
    1158:	88bb      	ldrh	r3, [r7, #4]
    115a:	1c98      	adds	r0, r3, #2
    115c:	1e43      	subs	r3, r0, #1
    115e:	60fb      	str	r3, [r7, #12]
    1160:	4603      	mov	r3, r0
    1162:	4619      	mov	r1, r3
    1164:	f04f 0200 	mov.w	r2, #0
    1168:	f04f 0300 	mov.w	r3, #0
    116c:	f04f 0400 	mov.w	r4, #0
    1170:	00d4      	lsls	r4, r2, #3
    1172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
    1176:	00cb      	lsls	r3, r1, #3
    1178:	4603      	mov	r3, r0
    117a:	4619      	mov	r1, r3
    117c:	f04f 0200 	mov.w	r2, #0
    1180:	f04f 0300 	mov.w	r3, #0
    1184:	f04f 0400 	mov.w	r4, #0
    1188:	00d4      	lsls	r4, r2, #3
    118a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
    118e:	00cb      	lsls	r3, r1, #3
    1190:	4603      	mov	r3, r0
    1192:	3307      	adds	r3, #7
    1194:	08db      	lsrs	r3, r3, #3
    1196:	00db      	lsls	r3, r3, #3
    1198:	ebad 0d03 	sub.w	sp, sp, r3
    119c:	466b      	mov	r3, sp
    119e:	3300      	adds	r3, #0
    11a0:	60bb      	str	r3, [r7, #8]
    data_buff[0]= addr>>8;
    11a2:	88fb      	ldrh	r3, [r7, #6]
    11a4:	0a1b      	lsrs	r3, r3, #8
    11a6:	b29b      	uxth	r3, r3
    11a8:	b2da      	uxtb	r2, r3
    11aa:	68bb      	ldr	r3, [r7, #8]
    11ac:	701a      	strb	r2, [r3, #0]
    data_buff[1]=addr&0x00ff;
    11ae:	88fb      	ldrh	r3, [r7, #6]
    11b0:	b2da      	uxtb	r2, r3
    11b2:	68bb      	ldr	r3, [r7, #8]
    11b4:	705a      	strb	r2, [r3, #1]
    memcpy(&data_buff[2],data,dlen); 
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	3302      	adds	r3, #2
    11ba:	88ba      	ldrh	r2, [r7, #4]
    11bc:	6839      	ldr	r1, [r7, #0]
    11be:	4618      	mov	r0, r3
    11c0:	f000 fe42 	bl	1e48 <memcpy>
    I2C_WriteDate(I2C0,data_buff,2+dlen,1);
    11c4:	68b9      	ldr	r1, [r7, #8]
    11c6:	88bb      	ldrh	r3, [r7, #4]
    11c8:	3302      	adds	r3, #2
    11ca:	b29a      	uxth	r2, r3
    11cc:	2301      	movs	r3, #1
    11ce:	4804      	ldr	r0, [pc, #16]	; (11e0 <EEPROM_WritePage+0x9c>)
    11d0:	f7ff fdd2 	bl	d78 <I2C_WriteDate>
    11d4:	46ad      	mov	sp, r5

}
    11d6:	bf00      	nop
    11d8:	3710      	adds	r7, #16
    11da:	46bd      	mov	sp, r7
    11dc:	bdb0      	pop	{r4, r5, r7, pc}
    11de:	bf00      	nop
    11e0:	90005000 	.word	0x90005000

000011e4 <EEPROM_ReadCurrentByte>:


uint8_t  EEPROM_ReadCurrentByte(void)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	b082      	sub	sp, #8
    11e8:	af00      	add	r7, sp, #0
    uint8_t data;
    I2C_ReadDate(I2C0,&data,1,1);
    11ea:	1df9      	adds	r1, r7, #7
    11ec:	2301      	movs	r3, #1
    11ee:	2201      	movs	r2, #1
    11f0:	4803      	ldr	r0, [pc, #12]	; (1200 <EEPROM_ReadCurrentByte+0x1c>)
    11f2:	f7ff fd62 	bl	cba <I2C_ReadDate>
    return data;
    11f6:	79fb      	ldrb	r3, [r7, #7]
}
    11f8:	4618      	mov	r0, r3
    11fa:	3708      	adds	r7, #8
    11fc:	46bd      	mov	sp, r7
    11fe:	bd80      	pop	{r7, pc}
    1200:	90005000 	.word	0x90005000

00001204 <EEPROM_ReadByte>:


uint16_t  EEPROM_ReadByte(uint16_t addr )
{
    1204:	b580      	push	{r7, lr}
    1206:	b084      	sub	sp, #16
    1208:	af00      	add	r7, sp, #0
    120a:	4603      	mov	r3, r0
    120c:	80fb      	strh	r3, [r7, #6]

    uint8_t data_buff[2];
    data_buff[0]= addr>>8;
    120e:	88fb      	ldrh	r3, [r7, #6]
    1210:	0a1b      	lsrs	r3, r3, #8
    1212:	b29b      	uxth	r3, r3
    1214:	b2db      	uxtb	r3, r3
    1216:	733b      	strb	r3, [r7, #12]
    data_buff[1]=addr&0x00ff;
    1218:	88fb      	ldrh	r3, [r7, #6]
    121a:	b2db      	uxtb	r3, r3
    121c:	737b      	strb	r3, [r7, #13]
    I2C_WriteDate(I2C0,data_buff,2,0);
    121e:	f107 010c 	add.w	r1, r7, #12
    1222:	2300      	movs	r3, #0
    1224:	2202      	movs	r2, #2
    1226:	4805      	ldr	r0, [pc, #20]	; (123c <EEPROM_ReadByte+0x38>)
    1228:	f7ff fda6 	bl	d78 <I2C_WriteDate>
    return EEPROM_ReadCurrentByte();
    122c:	f7ff ffda 	bl	11e4 <EEPROM_ReadCurrentByte>
    1230:	4603      	mov	r3, r0
    1232:	b29b      	uxth	r3, r3
}
    1234:	4618      	mov	r0, r3
    1236:	3710      	adds	r7, #16
    1238:	46bd      	mov	sp, r7
    123a:	bd80      	pop	{r7, pc}
    123c:	90005000 	.word	0x90005000

00001240 <EEPROM_SequentialRead>:


void EEPROM_SequentialRead(uint16_t addr,uint8_t *data,uint16_t len)
{
    1240:	b580      	push	{r7, lr}
    1242:	b084      	sub	sp, #16
    1244:	af00      	add	r7, sp, #0
    1246:	4603      	mov	r3, r0
    1248:	6039      	str	r1, [r7, #0]
    124a:	80fb      	strh	r3, [r7, #6]
    124c:	4613      	mov	r3, r2
    124e:	80bb      	strh	r3, [r7, #4]
    uint8_t data_buff[2];
    data_buff[0]= addr>>8;
    1250:	88fb      	ldrh	r3, [r7, #6]
    1252:	0a1b      	lsrs	r3, r3, #8
    1254:	b29b      	uxth	r3, r3
    1256:	b2db      	uxtb	r3, r3
    1258:	733b      	strb	r3, [r7, #12]
    data_buff[1]=addr&0x00ff;
    125a:	88fb      	ldrh	r3, [r7, #6]
    125c:	b2db      	uxtb	r3, r3
    125e:	737b      	strb	r3, [r7, #13]
    I2C_WriteDate(I2C0,data_buff,2,0);
    1260:	f107 010c 	add.w	r1, r7, #12
    1264:	2300      	movs	r3, #0
    1266:	2202      	movs	r2, #2
    1268:	4806      	ldr	r0, [pc, #24]	; (1284 <EEPROM_SequentialRead+0x44>)
    126a:	f7ff fd85 	bl	d78 <I2C_WriteDate>
    I2C_ReadDate(I2C0,data,len,1);
    126e:	88ba      	ldrh	r2, [r7, #4]
    1270:	2301      	movs	r3, #1
    1272:	6839      	ldr	r1, [r7, #0]
    1274:	4803      	ldr	r0, [pc, #12]	; (1284 <EEPROM_SequentialRead+0x44>)
    1276:	f7ff fd20 	bl	cba <I2C_ReadDate>
}
    127a:	bf00      	nop
    127c:	3710      	adds	r7, #16
    127e:	46bd      	mov	sp, r7
    1280:	bd80      	pop	{r7, pc}
    1282:	bf00      	nop
    1284:	90005000 	.word	0x90005000

00001288 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    1288:	b480      	push	{r7}
    128a:	b083      	sub	sp, #12
    128c:	af00      	add	r7, sp, #0
    128e:	4603      	mov	r3, r0
    1290:	6039      	str	r1, [r7, #0]
    1292:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
    1294:	f997 3007 	ldrsb.w	r3, [r7, #7]
    1298:	2b00      	cmp	r3, #0
    129a:	da0b      	bge.n	12b4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    129c:	683b      	ldr	r3, [r7, #0]
    129e:	b2da      	uxtb	r2, r3
    12a0:	490c      	ldr	r1, [pc, #48]	; (12d4 <NVIC_SetPriority+0x4c>)
    12a2:	79fb      	ldrb	r3, [r7, #7]
    12a4:	f003 030f 	and.w	r3, r3, #15
    12a8:	3b04      	subs	r3, #4
    12aa:	0152      	lsls	r2, r2, #5
    12ac:	b2d2      	uxtb	r2, r2
    12ae:	440b      	add	r3, r1
    12b0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
    12b2:	e009      	b.n	12c8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    12b4:	683b      	ldr	r3, [r7, #0]
    12b6:	b2da      	uxtb	r2, r3
    12b8:	4907      	ldr	r1, [pc, #28]	; (12d8 <NVIC_SetPriority+0x50>)
    12ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    12be:	0152      	lsls	r2, r2, #5
    12c0:	b2d2      	uxtb	r2, r2
    12c2:	440b      	add	r3, r1
    12c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    12c8:	bf00      	nop
    12ca:	370c      	adds	r7, #12
    12cc:	46bd      	mov	sp, r7
    12ce:	bc80      	pop	{r7}
    12d0:	4770      	bx	lr
    12d2:	bf00      	nop
    12d4:	e000ed00 	.word	0xe000ed00
    12d8:	e000e100 	.word	0xe000e100

000012dc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    12dc:	b580      	push	{r7, lr}
    12de:	b082      	sub	sp, #8
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);           /* Reload value impossible */
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	3b01      	subs	r3, #1
    12e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    12ec:	d301      	bcc.n	12f2 <SysTick_Config+0x16>
    12ee:	2301      	movs	r3, #1
    12f0:	e00f      	b.n	1312 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                       /* set reload register */
    12f2:	4a0a      	ldr	r2, [pc, #40]	; (131c <SysTick_Config+0x40>)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	3b01      	subs	r3, #1
    12f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);       /* set Priority for Systick Interrupt */
    12fa:	2107      	movs	r1, #7
    12fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1300:	f7ff ffc2 	bl	1288 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                               /* Load the SysTick Counter Value */
    1304:	4b05      	ldr	r3, [pc, #20]	; (131c <SysTick_Config+0x40>)
    1306:	2200      	movs	r2, #0
    1308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    130a:	4b04      	ldr	r3, [pc, #16]	; (131c <SysTick_Config+0x40>)
    130c:	2207      	movs	r2, #7
    130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                       /* Function successful */
    1310:	2300      	movs	r3, #0
}
    1312:	4618      	mov	r0, r3
    1314:	3708      	adds	r7, #8
    1316:	46bd      	mov	sp, r7
    1318:	bd80      	pop	{r7, pc}
    131a:	bf00      	nop
    131c:	e000e010 	.word	0xe000e010

00001320 <VerifyIsGo>:
void Verify_SendEndSimulation(void);


/* Get a run Case Falg*/
bool VerifyIsGo(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
    if(VERIFY_RUN_CF)
    1324:	4b07      	ldr	r3, [pc, #28]	; (1344 <VerifyIsGo+0x24>)
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	b2db      	uxtb	r3, r3
    132a:	2b00      	cmp	r3, #0
    132c:	d004      	beq.n	1338 <VerifyIsGo+0x18>
    {
        VERIFY_RUN_CF = false;
    132e:	4b05      	ldr	r3, [pc, #20]	; (1344 <VerifyIsGo+0x24>)
    1330:	2200      	movs	r2, #0
    1332:	701a      	strb	r2, [r3, #0]
        return true;
    1334:	2301      	movs	r3, #1
    1336:	e000      	b.n	133a <VerifyIsGo+0x1a>
    }
    return false;
    1338:	2300      	movs	r3, #0
}
    133a:	4618      	mov	r0, r3
    133c:	46bd      	mov	sp, r7
    133e:	bc80      	pop	{r7}
    1340:	4770      	bx	lr
    1342:	bf00      	nop
    1344:	200081f4 	.word	0x200081f4

00001348 <VerifyRunCase>:

/* Set a run Case Falg*/
void VerifyRunCase(void)
{
    1348:	b480      	push	{r7}
    134a:	af00      	add	r7, sp, #0
    VERIFY_RUN_CF = true ;
    134c:	4b03      	ldr	r3, [pc, #12]	; (135c <VerifyRunCase+0x14>)
    134e:	2201      	movs	r2, #1
    1350:	701a      	strb	r2, [r3, #0]
}
    1352:	bf00      	nop
    1354:	46bd      	mov	sp, r7
    1356:	bc80      	pop	{r7}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	200081f4 	.word	0x200081f4

00001360 <verify_messageGetRunCid>:

/* Get current Case ID*/
uint32_t  verify_messageGetRunCid(void)
{
    1360:	b480      	push	{r7}
    1362:	b083      	sub	sp, #12
    1364:	af00      	add	r7, sp, #0
    uint32_t  cid = VERIFY_MESSGAE_RUN_CID;
    1366:	4b04      	ldr	r3, [pc, #16]	; (1378 <verify_messageGetRunCid+0x18>)
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	607b      	str	r3, [r7, #4]
    return cid; 
    136c:	687b      	ldr	r3, [r7, #4]
}
    136e:	4618      	mov	r0, r3
    1370:	370c      	adds	r7, #12
    1372:	46bd      	mov	sp, r7
    1374:	bc80      	pop	{r7}
    1376:	4770      	bx	lr
    1378:	200081ec 	.word	0x200081ec

0000137c <Verify_messageSend>:



/* Send a message to UVM*/
void Verify_messageSend(uint32_t cmd, uint32_t val)
{
    137c:	b480      	push	{r7}
    137e:	b083      	sub	sp, #12
    1380:	af00      	add	r7, sp, #0
    1382:	6078      	str	r0, [r7, #4]
    1384:	6039      	str	r1, [r7, #0]
    SCU->SEND_DATA  = val;
    1386:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    138a:	683b      	ldr	r3, [r7, #0]
    138c:	63d3      	str	r3, [r2, #60]	; 0x3c
    SCU->SEND_CMD   = cmd;
    138e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	6393      	str	r3, [r2, #56]	; 0x38
}
    1396:	bf00      	nop
    1398:	370c      	adds	r7, #12
    139a:	46bd      	mov	sp, r7
    139c:	bc80      	pop	{r7}
    139e:	4770      	bx	lr

000013a0 <Verify_FmessageSend>:

/* Send a message to UVM*/
void Verify_FmessageSend(uint32_t cmd, uint32_t val)
{
    13a0:	b480      	push	{r7}
    13a2:	b083      	sub	sp, #12
    13a4:	af00      	add	r7, sp, #0
    13a6:	6078      	str	r0, [r7, #4]
    13a8:	6039      	str	r1, [r7, #0]
    SCU->READ_DATA = val;
    13aa:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    13ae:	683b      	ldr	r3, [r7, #0]
    13b0:	6453      	str	r3, [r2, #68]	; 0x44
    SCU->READ_CMD  = cmd ;
    13b2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	6413      	str	r3, [r2, #64]	; 0x40
}
    13ba:	bf00      	nop
    13bc:	370c      	adds	r7, #12
    13be:	46bd      	mov	sp, r7
    13c0:	bc80      	pop	{r7}
    13c2:	4770      	bx	lr

000013c4 <Verify_messageReceive>:



/* Receive a message to UVM*/
bool Verify_messageReceive(uint32_t *cmd, uint32_t *val)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	6039      	str	r1, [r7, #0]
    while(SCU->READ_CMD == VERIFY_MESSGAE_CMD){};
    13ce:	bf00      	nop
    13d0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    13d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    13d6:	4b0c      	ldr	r3, [pc, #48]	; (1408 <Verify_messageReceive+0x44>)
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	429a      	cmp	r2, r3
    13dc:	d0f8      	beq.n	13d0 <Verify_messageReceive+0xc>
    *cmd   = SCU->READ_CMD;
    13de:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    13e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	601a      	str	r2, [r3, #0]
    *val = SCU->READ_DATA;
    13e8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    13ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	601a      	str	r2, [r3, #0]
    VERIFY_MESSGAE_CMD = *cmd;
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	681b      	ldr	r3, [r3, #0]
    13f6:	4a04      	ldr	r2, [pc, #16]	; (1408 <Verify_messageReceive+0x44>)
    13f8:	6013      	str	r3, [r2, #0]
    return true;
    13fa:	2301      	movs	r3, #1
}
    13fc:	4618      	mov	r0, r3
    13fe:	370c      	adds	r7, #12
    1400:	46bd      	mov	sp, r7
    1402:	bc80      	pop	{r7}
    1404:	4770      	bx	lr
    1406:	bf00      	nop
    1408:	200081f0 	.word	0x200081f0

0000140c <Verify_messageGetRData>:



/* Receive a message to UVM*/
bool Verify_messageGetRData(uint32_t *cmd, uint32_t *val)
{
    140c:	b480      	push	{r7}
    140e:	b083      	sub	sp, #12
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
    1414:	6039      	str	r1, [r7, #0]
   
    *cmd  = SCU->READ_CMD;
    1416:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	601a      	str	r2, [r3, #0]
    *val  = SCU->READ_DATA;
    1420:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1426:	683b      	ldr	r3, [r7, #0]
    1428:	601a      	str	r2, [r3, #0]
    return true;
    142a:	2301      	movs	r3, #1
}
    142c:	4618      	mov	r0, r3
    142e:	370c      	adds	r7, #12
    1430:	46bd      	mov	sp, r7
    1432:	bc80      	pop	{r7}
    1434:	4770      	bx	lr

00001436 <verify_messageGetReceive>:


/* Get current UVM message*/
bool verify_messageGetReceive(uint32_t *cmd, uint32_t *val)
{
    1436:	b480      	push	{r7}
    1438:	b083      	sub	sp, #12
    143a:	af00      	add	r7, sp, #0
    143c:	6078      	str	r0, [r7, #4]
    143e:	6039      	str	r1, [r7, #0]
    if(SCU->READ_CMD != VERIFY_MESSGAE_CMD)
    1440:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1446:	4b10      	ldr	r3, [pc, #64]	; (1488 <verify_messageGetReceive+0x52>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	429a      	cmp	r2, r3
    144c:	d00f      	beq.n	146e <verify_messageGetReceive+0x38>
    {
        *cmd    = SCU->READ_CMD;
    144e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	601a      	str	r2, [r3, #0]
        *val    = SCU->READ_DATA;
    1458:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    145c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    145e:	683b      	ldr	r3, [r7, #0]
    1460:	601a      	str	r2, [r3, #0]
        VERIFY_MESSGAE_CMD = *cmd;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	4a08      	ldr	r2, [pc, #32]	; (1488 <verify_messageGetReceive+0x52>)
    1468:	6013      	str	r3, [r2, #0]
        return true;
    146a:	2301      	movs	r3, #1
    146c:	e006      	b.n	147c <verify_messageGetReceive+0x46>
    }
    else
    {   
        *cmd = 0;
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	2200      	movs	r2, #0
    1472:	601a      	str	r2, [r3, #0]
        *val =0;
    1474:	683b      	ldr	r3, [r7, #0]
    1476:	2200      	movs	r2, #0
    1478:	601a      	str	r2, [r3, #0]
        return false;
    147a:	2300      	movs	r3, #0
    }
    
}
    147c:	4618      	mov	r0, r3
    147e:	370c      	adds	r7, #12
    1480:	46bd      	mov	sp, r7
    1482:	bc80      	pop	{r7}
    1484:	4770      	bx	lr
    1486:	bf00      	nop
    1488:	200081f0 	.word	0x200081f0

0000148c <verify_SendRunCaseId>:


/* Contorl Run a case*/
void verify_SendRunCaseId(uint32_t Cid)
{
    148c:	b580      	push	{r7, lr}
    148e:	b082      	sub	sp, #8
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
    Verify_messageSend(BRCASE_RID,Cid);
    1494:	6879      	ldr	r1, [r7, #4]
    1496:	2001      	movs	r0, #1
    1498:	f7ff ff70 	bl	137c <Verify_messageSend>
    VerifyRunCase();
    149c:	f7ff ff54 	bl	1348 <VerifyRunCase>
}
    14a0:	bf00      	nop
    14a2:	3708      	adds	r7, #8
    14a4:	46bd      	mov	sp, r7
    14a6:	bd80      	pop	{r7, pc}

000014a8 <Verify_messageCheckRececive>:

/* Check that the run instruction is received */
bool Verify_messageCheckRececive(void)
{
    14a8:	b580      	push	{r7, lr}
    14aa:	b082      	sub	sp, #8
    14ac:	af00      	add	r7, sp, #0
    uint32_t cid  =0;
    14ae:	2300      	movs	r3, #0
    14b0:	607b      	str	r3, [r7, #4]
    uint32_t data =0;
    14b2:	2300      	movs	r3, #0
    14b4:	603b      	str	r3, [r7, #0]
    verify_messageGetReceive(&cid,&data);
    14b6:	463a      	mov	r2, r7
    14b8:	1d3b      	adds	r3, r7, #4
    14ba:	4611      	mov	r1, r2
    14bc:	4618      	mov	r0, r3
    14be:	f7ff ffba 	bl	1436 <verify_messageGetReceive>
    if(cid == BRCASE_RID)
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	2b01      	cmp	r3, #1
    14c6:	d10a      	bne.n	14de <Verify_messageCheckRececive+0x36>
    {
        VERIFY_MESSGAE_RUN_CID = data;
    14c8:	683b      	ldr	r3, [r7, #0]
    14ca:	4a07      	ldr	r2, [pc, #28]	; (14e8 <Verify_messageCheckRececive+0x40>)
    14cc:	6013      	str	r3, [r2, #0]
#ifndef BR_DUAL
        Verify_messageSend(BRCASE_RID,1);
    14ce:	2101      	movs	r1, #1
    14d0:	2001      	movs	r0, #1
    14d2:	f7ff ff53 	bl	137c <Verify_messageSend>
#endif 
        VerifyRunCase();
    14d6:	f7ff ff37 	bl	1348 <VerifyRunCase>
        return true;
    14da:	2301      	movs	r3, #1
    14dc:	e000      	b.n	14e0 <Verify_messageCheckRececive+0x38>
    }
   return false;
    14de:	2300      	movs	r3, #0
}
    14e0:	4618      	mov	r0, r3
    14e2:	3708      	adds	r7, #8
    14e4:	46bd      	mov	sp, r7
    14e6:	bd80      	pop	{r7, pc}
    14e8:	200081ec 	.word	0x200081ec

000014ec <verify_SendCid>:

/****************************************************
Send Case ID ->UVM 
*****************************************************/
bool verify_SendCid(uint32_t cid,uint32_t *data)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	b086      	sub	sp, #24
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
    14f4:	6039      	str	r1, [r7, #0]
    bool sut = true;
    14f6:	2301      	movs	r3, #1
    14f8:	75fb      	strb	r3, [r7, #23]
#ifndef BR_NO_UVM
    uint32_t cd=0,va=0;
    14fa:	2300      	movs	r3, #0
    14fc:	613b      	str	r3, [r7, #16]
    14fe:	2300      	movs	r3, #0
    1500:	60fb      	str	r3, [r7, #12]
      
    Verify_messageSend(BRCASE_CID,cid);
    1502:	6879      	ldr	r1, [r7, #4]
    1504:	2002      	movs	r0, #2
    1506:	f7ff ff39 	bl	137c <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    150a:	f107 020c 	add.w	r2, r7, #12
    150e:	f107 0310 	add.w	r3, r7, #16
    1512:	4611      	mov	r1, r2
    1514:	4618      	mov	r0, r3
    1516:	f7ff ff55 	bl	13c4 <Verify_messageReceive>
    if(!(cd == BRCASE_CID && va != 0))
    151a:	693b      	ldr	r3, [r7, #16]
    151c:	2b02      	cmp	r3, #2
    151e:	d102      	bne.n	1526 <verify_SendCid+0x3a>
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	2b00      	cmp	r3, #0
    1524:	d101      	bne.n	152a <verify_SendCid+0x3e>
        sut =false;
    1526:	2300      	movs	r3, #0
    1528:	75fb      	strb	r3, [r7, #23]
    *data = va;
    152a:	68fa      	ldr	r2, [r7, #12]
    152c:	683b      	ldr	r3, [r7, #0]
    152e:	601a      	str	r2, [r3, #0]
#endif  
    return sut;   
    1530:	7dfb      	ldrb	r3, [r7, #23]
  
}
    1532:	4618      	mov	r0, r3
    1534:	3718      	adds	r7, #24
    1536:	46bd      	mov	sp, r7
    1538:	bd80      	pop	{r7, pc}

0000153a <verify_step_SendCheckData>:

/*
Step by step to verify,CPU Send and UVM Check
*/
bool verify_step_SendCheckData(uint32_t step,func_handle func)
{
    153a:	b580      	push	{r7, lr}
    153c:	b086      	sub	sp, #24
    153e:	af00      	add	r7, sp, #0
    1540:	6078      	str	r0, [r7, #4]
    1542:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    1544:	2300      	movs	r3, #0
    1546:	613b      	str	r3, [r7, #16]
    1548:	2300      	movs	r3, #0
    154a:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    154c:	2301      	movs	r3, #1
    154e:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(step,0);
    1550:	2100      	movs	r1, #0
    1552:	6878      	ldr	r0, [r7, #4]
    1554:	f7ff ff12 	bl	137c <Verify_messageSend>
    func();
    1558:	683b      	ldr	r3, [r7, #0]
    155a:	4798      	blx	r3
    Verify_messageReceive(&cd,&va);
    155c:	f107 020c 	add.w	r2, r7, #12
    1560:	f107 0310 	add.w	r3, r7, #16
    1564:	4611      	mov	r1, r2
    1566:	4618      	mov	r0, r3
    1568:	f7ff ff2c 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    156c:	693b      	ldr	r3, [r7, #16]
    156e:	687a      	ldr	r2, [r7, #4]
    1570:	429a      	cmp	r2, r3
    1572:	d102      	bne.n	157a <verify_step_SendCheckData+0x40>
    1574:	68fb      	ldr	r3, [r7, #12]
    1576:	2b01      	cmp	r3, #1
    1578:	d001      	beq.n	157e <verify_step_SendCheckData+0x44>
        sut =false;
    157a:	2300      	movs	r3, #0
    157c:	75fb      	strb	r3, [r7, #23]
    
    return sut;
    157e:	7dfb      	ldrb	r3, [r7, #23]
}
    1580:	4618      	mov	r0, r3
    1582:	3718      	adds	r7, #24
    1584:	46bd      	mov	sp, r7
    1586:	bd80      	pop	{r7, pc}

00001588 <verify_step_SendCheckOneData>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneData(uint32_t step,volatile uint32_t *reg,uint32_t val)
{
    1588:	b580      	push	{r7, lr}
    158a:	b088      	sub	sp, #32
    158c:	af00      	add	r7, sp, #0
    158e:	60f8      	str	r0, [r7, #12]
    1590:	60b9      	str	r1, [r7, #8]
    1592:	607a      	str	r2, [r7, #4]
    uint32_t cd=0,va=0;
    1594:	2300      	movs	r3, #0
    1596:	61bb      	str	r3, [r7, #24]
    1598:	2300      	movs	r3, #0
    159a:	617b      	str	r3, [r7, #20]
    bool sut = true;
    159c:	2301      	movs	r3, #1
    159e:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    15a0:	68fb      	ldr	r3, [r7, #12]
    15a2:	3b20      	subs	r3, #32
    15a4:	b29b      	uxth	r3, r3
    15a6:	4619      	mov	r1, r3
    15a8:	480f      	ldr	r0, [pc, #60]	; (15e8 <verify_step_SendCheckOneData+0x60>)
    15aa:	f7fe ff9d 	bl	4e8 <cm_printf>
    *reg = val;
    15ae:	68bb      	ldr	r3, [r7, #8]
    15b0:	687a      	ldr	r2, [r7, #4]
    15b2:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    15b4:	6879      	ldr	r1, [r7, #4]
    15b6:	68f8      	ldr	r0, [r7, #12]
    15b8:	f7ff fee0 	bl	137c <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    15bc:	f107 0214 	add.w	r2, r7, #20
    15c0:	f107 0318 	add.w	r3, r7, #24
    15c4:	4611      	mov	r1, r2
    15c6:	4618      	mov	r0, r3
    15c8:	f7ff fefc 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    15cc:	69bb      	ldr	r3, [r7, #24]
    15ce:	68fa      	ldr	r2, [r7, #12]
    15d0:	429a      	cmp	r2, r3
    15d2:	d102      	bne.n	15da <verify_step_SendCheckOneData+0x52>
    15d4:	697b      	ldr	r3, [r7, #20]
    15d6:	2b01      	cmp	r3, #1
    15d8:	d001      	beq.n	15de <verify_step_SendCheckOneData+0x56>
        sut =false;
    15da:	2300      	movs	r3, #0
    15dc:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    15de:	7ffb      	ldrb	r3, [r7, #31]
}
    15e0:	4618      	mov	r0, r3
    15e2:	3720      	adds	r7, #32
    15e4:	46bd      	mov	sp, r7
    15e6:	bd80      	pop	{r7, pc}
    15e8:	000026d0 	.word	0x000026d0

000015ec <verify_step_SendCheckOneDataDma>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneDataDma(uint32_t step,volatile uint32_t *reg,uint32_t val,bool rt)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	b088      	sub	sp, #32
    15f0:	af00      	add	r7, sp, #0
    15f2:	60f8      	str	r0, [r7, #12]
    15f4:	60b9      	str	r1, [r7, #8]
    15f6:	607a      	str	r2, [r7, #4]
    15f8:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    15fa:	2300      	movs	r3, #0
    15fc:	61bb      	str	r3, [r7, #24]
    15fe:	2300      	movs	r3, #0
    1600:	617b      	str	r3, [r7, #20]
    bool sut = true;
    1602:	2301      	movs	r3, #1
    1604:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    1606:	68fb      	ldr	r3, [r7, #12]
    1608:	3b20      	subs	r3, #32
    160a:	b29b      	uxth	r3, r3
    160c:	4619      	mov	r1, r3
    160e:	4814      	ldr	r0, [pc, #80]	; (1660 <verify_step_SendCheckOneDataDma+0x74>)
    1610:	f7fe ff6a 	bl	4e8 <cm_printf>
    if(rt)
    1614:	78fb      	ldrb	r3, [r7, #3]
    1616:	2b00      	cmp	r3, #0
    1618:	d005      	beq.n	1626 <verify_step_SendCheckOneDataDma+0x3a>
        *reg = (val|0xff00);
    161a:	687b      	ldr	r3, [r7, #4]
    161c:	f443 427f 	orr.w	r2, r3, #65280	; 0xff00
    1620:	68bb      	ldr	r3, [r7, #8]
    1622:	601a      	str	r2, [r3, #0]
    1624:	e002      	b.n	162c <verify_step_SendCheckOneDataDma+0x40>
    else
        *reg = val;
    1626:	68bb      	ldr	r3, [r7, #8]
    1628:	687a      	ldr	r2, [r7, #4]
    162a:	601a      	str	r2, [r3, #0]
    
    Verify_messageSend(step,val);
    162c:	6879      	ldr	r1, [r7, #4]
    162e:	68f8      	ldr	r0, [r7, #12]
    1630:	f7ff fea4 	bl	137c <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    1634:	f107 0214 	add.w	r2, r7, #20
    1638:	f107 0318 	add.w	r3, r7, #24
    163c:	4611      	mov	r1, r2
    163e:	4618      	mov	r0, r3
    1640:	f7ff fec0 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    1644:	69bb      	ldr	r3, [r7, #24]
    1646:	68fa      	ldr	r2, [r7, #12]
    1648:	429a      	cmp	r2, r3
    164a:	d102      	bne.n	1652 <verify_step_SendCheckOneDataDma+0x66>
    164c:	697b      	ldr	r3, [r7, #20]
    164e:	2b01      	cmp	r3, #1
    1650:	d001      	beq.n	1656 <verify_step_SendCheckOneDataDma+0x6a>
        sut =false;
    1652:	2300      	movs	r3, #0
    1654:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    1656:	7ffb      	ldrb	r3, [r7, #31]
}
    1658:	4618      	mov	r0, r3
    165a:	3720      	adds	r7, #32
    165c:	46bd      	mov	sp, r7
    165e:	bd80      	pop	{r7, pc}
    1660:	000026d0 	.word	0x000026d0

00001664 <verify_step_SendCheckOneDataLog>:

bool verify_step_SendCheckOneDataLog(uint32_t step,volatile uint32_t *reg,uint32_t val,bool log)
{
    1664:	b580      	push	{r7, lr}
    1666:	b088      	sub	sp, #32
    1668:	af00      	add	r7, sp, #0
    166a:	60f8      	str	r0, [r7, #12]
    166c:	60b9      	str	r1, [r7, #8]
    166e:	607a      	str	r2, [r7, #4]
    1670:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
    1672:	2300      	movs	r3, #0
    1674:	61bb      	str	r3, [r7, #24]
    1676:	2300      	movs	r3, #0
    1678:	617b      	str	r3, [r7, #20]
    bool sut = true;
    167a:	2301      	movs	r3, #1
    167c:	77fb      	strb	r3, [r7, #31]
    
    if(log)
    167e:	78fb      	ldrb	r3, [r7, #3]
    1680:	2b00      	cmp	r3, #0
    1682:	d006      	beq.n	1692 <verify_step_SendCheckOneDataLog+0x2e>
        mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
    1684:	68fb      	ldr	r3, [r7, #12]
    1686:	3b20      	subs	r3, #32
    1688:	b29b      	uxth	r3, r3
    168a:	4619      	mov	r1, r3
    168c:	480f      	ldr	r0, [pc, #60]	; (16cc <verify_step_SendCheckOneDataLog+0x68>)
    168e:	f7fe ff2b 	bl	4e8 <cm_printf>
    *reg = val;
    1692:	68bb      	ldr	r3, [r7, #8]
    1694:	687a      	ldr	r2, [r7, #4]
    1696:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
    1698:	6879      	ldr	r1, [r7, #4]
    169a:	68f8      	ldr	r0, [r7, #12]
    169c:	f7ff fe6e 	bl	137c <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    16a0:	f107 0214 	add.w	r2, r7, #20
    16a4:	f107 0318 	add.w	r3, r7, #24
    16a8:	4611      	mov	r1, r2
    16aa:	4618      	mov	r0, r3
    16ac:	f7ff fe8a 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == 1))
    16b0:	69bb      	ldr	r3, [r7, #24]
    16b2:	68fa      	ldr	r2, [r7, #12]
    16b4:	429a      	cmp	r2, r3
    16b6:	d102      	bne.n	16be <verify_step_SendCheckOneDataLog+0x5a>
    16b8:	697b      	ldr	r3, [r7, #20]
    16ba:	2b01      	cmp	r3, #1
    16bc:	d001      	beq.n	16c2 <verify_step_SendCheckOneDataLog+0x5e>
        sut =false;
    16be:	2300      	movs	r3, #0
    16c0:	77fb      	strb	r3, [r7, #31]
    
    return sut;
    16c2:	7ffb      	ldrb	r3, [r7, #31]
}
    16c4:	4618      	mov	r0, r3
    16c6:	3720      	adds	r7, #32
    16c8:	46bd      	mov	sp, r7
    16ca:	bd80      	pop	{r7, pc}
    16cc:	000026d0 	.word	0x000026d0

000016d0 <verify_step_ReceiveCheckData>:

/*
Step by step to verify, UVM Send and CPU Check
*/
bool verify_step_ReceiveCheckData(uint32_t step,func_handle func)
{
    16d0:	b580      	push	{r7, lr}
    16d2:	b086      	sub	sp, #24
    16d4:	af00      	add	r7, sp, #0
    16d6:	6078      	str	r0, [r7, #4]
    16d8:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    16da:	2300      	movs	r3, #0
    16dc:	613b      	str	r3, [r7, #16]
    16de:	2300      	movs	r3, #0
    16e0:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    16e2:	2301      	movs	r3, #1
    16e4:	75fb      	strb	r3, [r7, #23]
    Verify_messageReceive(&cd,&va);
    16e6:	f107 020c 	add.w	r2, r7, #12
    16ea:	f107 0310 	add.w	r3, r7, #16
    16ee:	4611      	mov	r1, r2
    16f0:	4618      	mov	r0, r3
    16f2:	f7ff fe67 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == 0))
    16f6:	693b      	ldr	r3, [r7, #16]
    16f8:	687a      	ldr	r2, [r7, #4]
    16fa:	429a      	cmp	r2, r3
    16fc:	d102      	bne.n	1704 <verify_step_ReceiveCheckData+0x34>
    16fe:	68fb      	ldr	r3, [r7, #12]
    1700:	2b00      	cmp	r3, #0
    1702:	d002      	beq.n	170a <verify_step_ReceiveCheckData+0x3a>
        sut =false;
    1704:	2300      	movs	r3, #0
    1706:	75fb      	strb	r3, [r7, #23]
    1708:	e009      	b.n	171e <verify_step_ReceiveCheckData+0x4e>
    else
    {
        if(!func())
    170a:	683b      	ldr	r3, [r7, #0]
    170c:	4798      	blx	r3
    170e:	4603      	mov	r3, r0
    1710:	f083 0301 	eor.w	r3, r3, #1
    1714:	b2db      	uxtb	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	d001      	beq.n	171e <verify_step_ReceiveCheckData+0x4e>
            sut =false;
    171a:	2300      	movs	r3, #0
    171c:	75fb      	strb	r3, [r7, #23]
    }
    Verify_messageSend(step,sut);
    171e:	7dfb      	ldrb	r3, [r7, #23]
    1720:	4619      	mov	r1, r3
    1722:	6878      	ldr	r0, [r7, #4]
    1724:	f7ff fe2a 	bl	137c <Verify_messageSend>
    
    return sut;
    1728:	7dfb      	ldrb	r3, [r7, #23]
}
    172a:	4618      	mov	r0, r3
    172c:	3718      	adds	r7, #24
    172e:	46bd      	mov	sp, r7
    1730:	bd80      	pop	{r7, pc}

00001732 <verify_step_ReceiveCheckOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_ReceiveCheckOneData(uint32_t step,volatile uint32_t *reg)
{
    1732:	b580      	push	{r7, lr}
    1734:	b086      	sub	sp, #24
    1736:	af00      	add	r7, sp, #0
    1738:	6078      	str	r0, [r7, #4]
    173a:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    173c:	2300      	movs	r3, #0
    173e:	613b      	str	r3, [r7, #16]
    1740:	2300      	movs	r3, #0
    1742:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    1744:	2301      	movs	r3, #1
    1746:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	3b20      	subs	r3, #32
    174c:	b29b      	uxth	r3, r3
    174e:	4619      	mov	r1, r3
    1750:	480f      	ldr	r0, [pc, #60]	; (1790 <verify_step_ReceiveCheckOneData+0x5e>)
    1752:	f7fe fec9 	bl	4e8 <cm_printf>
    Verify_messageReceive(&cd,&va);
    1756:	f107 020c 	add.w	r2, r7, #12
    175a:	f107 0310 	add.w	r3, r7, #16
    175e:	4611      	mov	r1, r2
    1760:	4618      	mov	r0, r3
    1762:	f7ff fe2f 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    1766:	693b      	ldr	r3, [r7, #16]
    1768:	687a      	ldr	r2, [r7, #4]
    176a:	429a      	cmp	r2, r3
    176c:	d104      	bne.n	1778 <verify_step_ReceiveCheckOneData+0x46>
    176e:	683b      	ldr	r3, [r7, #0]
    1770:	681a      	ldr	r2, [r3, #0]
    1772:	68fb      	ldr	r3, [r7, #12]
    1774:	429a      	cmp	r2, r3
    1776:	d001      	beq.n	177c <verify_step_ReceiveCheckOneData+0x4a>
        sut =false;
    1778:	2300      	movs	r3, #0
    177a:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    177c:	7dfb      	ldrb	r3, [r7, #23]
    177e:	4619      	mov	r1, r3
    1780:	6878      	ldr	r0, [r7, #4]
    1782:	f7ff fdfb 	bl	137c <Verify_messageSend>
    
    return sut;
    1786:	7dfb      	ldrb	r3, [r7, #23]
}
    1788:	4618      	mov	r0, r3
    178a:	3718      	adds	r7, #24
    178c:	46bd      	mov	sp, r7
    178e:	bd80      	pop	{r7, pc}
    1790:	000026e0 	.word	0x000026e0

00001794 <verify_step_ReceiveCheckOneDataLog>:
bool verify_step_ReceiveCheckOneDataLog(uint32_t step,volatile uint32_t *reg,bool log)
{
    1794:	b580      	push	{r7, lr}
    1796:	b088      	sub	sp, #32
    1798:	af00      	add	r7, sp, #0
    179a:	60f8      	str	r0, [r7, #12]
    179c:	60b9      	str	r1, [r7, #8]
    179e:	4613      	mov	r3, r2
    17a0:	71fb      	strb	r3, [r7, #7]
    uint32_t cd=0,va=0;
    17a2:	2300      	movs	r3, #0
    17a4:	61bb      	str	r3, [r7, #24]
    17a6:	2300      	movs	r3, #0
    17a8:	617b      	str	r3, [r7, #20]
    bool sut = true;
    17aa:	2301      	movs	r3, #1
    17ac:	77fb      	strb	r3, [r7, #31]
    if(log)
    17ae:	79fb      	ldrb	r3, [r7, #7]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d006      	beq.n	17c2 <verify_step_ReceiveCheckOneDataLog+0x2e>
        mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	3b20      	subs	r3, #32
    17b8:	b29b      	uxth	r3, r3
    17ba:	4619      	mov	r1, r3
    17bc:	480f      	ldr	r0, [pc, #60]	; (17fc <verify_step_ReceiveCheckOneDataLog+0x68>)
    17be:	f7fe fe93 	bl	4e8 <cm_printf>
    
    Verify_messageReceive(&cd,&va);
    17c2:	f107 0214 	add.w	r2, r7, #20
    17c6:	f107 0318 	add.w	r3, r7, #24
    17ca:	4611      	mov	r1, r2
    17cc:	4618      	mov	r0, r3
    17ce:	f7ff fdf9 	bl	13c4 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
    17d2:	69bb      	ldr	r3, [r7, #24]
    17d4:	68fa      	ldr	r2, [r7, #12]
    17d6:	429a      	cmp	r2, r3
    17d8:	d104      	bne.n	17e4 <verify_step_ReceiveCheckOneDataLog+0x50>
    17da:	68bb      	ldr	r3, [r7, #8]
    17dc:	681a      	ldr	r2, [r3, #0]
    17de:	697b      	ldr	r3, [r7, #20]
    17e0:	429a      	cmp	r2, r3
    17e2:	d001      	beq.n	17e8 <verify_step_ReceiveCheckOneDataLog+0x54>
        sut =false;
    17e4:	2300      	movs	r3, #0
    17e6:	77fb      	strb	r3, [r7, #31]
    Verify_messageSend(step,sut);
    17e8:	7ffb      	ldrb	r3, [r7, #31]
    17ea:	4619      	mov	r1, r3
    17ec:	68f8      	ldr	r0, [r7, #12]
    17ee:	f7ff fdc5 	bl	137c <Verify_messageSend>
    
    return sut;
    17f2:	7ffb      	ldrb	r3, [r7, #31]
}
    17f4:	4618      	mov	r0, r3
    17f6:	3720      	adds	r7, #32
    17f8:	46bd      	mov	sp, r7
    17fa:	bd80      	pop	{r7, pc}
    17fc:	000026e0 	.word	0x000026e0

00001800 <verify_step_CheckReceiveOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_CheckReceiveOneData(uint32_t step,uint32_t val,volatile uint32_t *reg)
{
    1800:	b580      	push	{r7, lr}
    1802:	b086      	sub	sp, #24
    1804:	af00      	add	r7, sp, #0
    1806:	60f8      	str	r0, [r7, #12]
    1808:	60b9      	str	r1, [r7, #8]
    180a:	607a      	str	r2, [r7, #4]
    bool sut = true;
    180c:	2301      	movs	r3, #1
    180e:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	3b20      	subs	r3, #32
    1814:	b29b      	uxth	r3, r3
    1816:	4619      	mov	r1, r3
    1818:	4809      	ldr	r0, [pc, #36]	; (1840 <verify_step_CheckReceiveOneData+0x40>)
    181a:	f7fe fe65 	bl	4e8 <cm_printf>
    if(!(val == *reg))
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	68ba      	ldr	r2, [r7, #8]
    1824:	429a      	cmp	r2, r3
    1826:	d001      	beq.n	182c <verify_step_CheckReceiveOneData+0x2c>
        sut =false;
    1828:	2300      	movs	r3, #0
    182a:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    182c:	7dfb      	ldrb	r3, [r7, #23]
    182e:	4619      	mov	r1, r3
    1830:	68f8      	ldr	r0, [r7, #12]
    1832:	f7ff fda3 	bl	137c <Verify_messageSend>
    return sut;
    1836:	7dfb      	ldrb	r3, [r7, #23]
}
    1838:	4618      	mov	r0, r3
    183a:	3718      	adds	r7, #24
    183c:	46bd      	mov	sp, r7
    183e:	bd80      	pop	{r7, pc}
    1840:	000026e0 	.word	0x000026e0

00001844 <verify_step_CheckReceiveOneDataLog>:
bool verify_step_CheckReceiveOneDataLog(uint32_t step,uint32_t val,volatile uint32_t *reg,bool log)
{
    1844:	b580      	push	{r7, lr}
    1846:	b086      	sub	sp, #24
    1848:	af00      	add	r7, sp, #0
    184a:	60f8      	str	r0, [r7, #12]
    184c:	60b9      	str	r1, [r7, #8]
    184e:	607a      	str	r2, [r7, #4]
    1850:	70fb      	strb	r3, [r7, #3]
    bool sut = true;
    1852:	2301      	movs	r3, #1
    1854:	75fb      	strb	r3, [r7, #23]
    if(log)
    1856:	78fb      	ldrb	r3, [r7, #3]
    1858:	2b00      	cmp	r3, #0
    185a:	d008      	beq.n	186e <verify_step_CheckReceiveOneDataLog+0x2a>
        mgeprf("Setp %d Receive [%X]\r\n",(step-0x20)&0xffff,*reg);
    185c:	68fb      	ldr	r3, [r7, #12]
    185e:	3b20      	subs	r3, #32
    1860:	b299      	uxth	r1, r3
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	461a      	mov	r2, r3
    1868:	4809      	ldr	r0, [pc, #36]	; (1890 <verify_step_CheckReceiveOneDataLog+0x4c>)
    186a:	f7fe fe3d 	bl	4e8 <cm_printf>
    
    if(!(val == *reg))
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	68ba      	ldr	r2, [r7, #8]
    1874:	429a      	cmp	r2, r3
    1876:	d001      	beq.n	187c <verify_step_CheckReceiveOneDataLog+0x38>
        sut =false;
    1878:	2300      	movs	r3, #0
    187a:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
    187c:	7dfb      	ldrb	r3, [r7, #23]
    187e:	4619      	mov	r1, r3
    1880:	68f8      	ldr	r0, [r7, #12]
    1882:	f7ff fd7b 	bl	137c <Verify_messageSend>
    return sut;
    1886:	7dfb      	ldrb	r3, [r7, #23]
}
    1888:	4618      	mov	r0, r3
    188a:	3718      	adds	r7, #24
    188c:	46bd      	mov	sp, r7
    188e:	bd80      	pop	{r7, pc}
    1890:	000026f4 	.word	0x000026f4

00001894 <Verify_SendCResult>:

#ifndef ONLY_NO_UVM
/*Send Case Verify Result*/
bool Verify_SendCResult(uint32_t cmd, uint32_t val)
{
    1894:	b580      	push	{r7, lr}
    1896:	b086      	sub	sp, #24
    1898:	af00      	add	r7, sp, #0
    189a:	6078      	str	r0, [r7, #4]
    189c:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    189e:	2300      	movs	r3, #0
    18a0:	613b      	str	r3, [r7, #16]
    18a2:	2300      	movs	r3, #0
    18a4:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    18a6:	2301      	movs	r3, #1
    18a8:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    18aa:	6839      	ldr	r1, [r7, #0]
    18ac:	6878      	ldr	r0, [r7, #4]
    18ae:	f7ff fd65 	bl	137c <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    18b2:	f107 020c 	add.w	r2, r7, #12
    18b6:	f107 0310 	add.w	r3, r7, #16
    18ba:	4611      	mov	r1, r2
    18bc:	4618      	mov	r0, r3
    18be:	f7ff fd81 	bl	13c4 <Verify_messageReceive>
    if(!(cd == cmd && va == 1))
    18c2:	693b      	ldr	r3, [r7, #16]
    18c4:	687a      	ldr	r2, [r7, #4]
    18c6:	429a      	cmp	r2, r3
    18c8:	d102      	bne.n	18d0 <Verify_SendCResult+0x3c>
    18ca:	68fb      	ldr	r3, [r7, #12]
    18cc:	2b01      	cmp	r3, #1
    18ce:	d001      	beq.n	18d4 <Verify_SendCResult+0x40>
        sut =false;
    18d0:	2300      	movs	r3, #0
    18d2:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    18d4:	693b      	ldr	r3, [r7, #16]
    18d6:	2b03      	cmp	r3, #3
    18d8:	d104      	bne.n	18e4 <Verify_SendCResult+0x50>
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	2b01      	cmp	r3, #1
    18de:	d101      	bne.n	18e4 <Verify_SendCResult+0x50>
        Verify_SendEndSimulation();
    18e0:	f000 f850 	bl	1984 <Verify_SendEndSimulation>
    
    return sut;
    18e4:	7dfb      	ldrb	r3, [r7, #23]
}
    18e6:	4618      	mov	r0, r3
    18e8:	3718      	adds	r7, #24
    18ea:	46bd      	mov	sp, r7
    18ec:	bd80      	pop	{r7, pc}

000018ee <Verify_SendCResultBack>:
}

#endif

bool Verify_SendCResultBack(uint32_t cmd, uint32_t val)
{
    18ee:	b580      	push	{r7, lr}
    18f0:	b086      	sub	sp, #24
    18f2:	af00      	add	r7, sp, #0
    18f4:	6078      	str	r0, [r7, #4]
    18f6:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    18f8:	2300      	movs	r3, #0
    18fa:	613b      	str	r3, [r7, #16]
    18fc:	2300      	movs	r3, #0
    18fe:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    1900:	2301      	movs	r3, #1
    1902:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    1904:	6839      	ldr	r1, [r7, #0]
    1906:	6878      	ldr	r0, [r7, #4]
    1908:	f7ff fd38 	bl	137c <Verify_messageSend>
	
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    190c:	e006      	b.n	191c <Verify_SendCResultBack+0x2e>
		{
			mgeprf("SCU RCMD[%X] \n",SCU->READ_CMD);
    190e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1914:	4619      	mov	r1, r3
    1916:	4818      	ldr	r0, [pc, #96]	; (1978 <Verify_SendCResultBack+0x8a>)
    1918:	f7fe fde6 	bl	4e8 <cm_printf>
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    191c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1922:	4b16      	ldr	r3, [pc, #88]	; (197c <Verify_SendCResultBack+0x8e>)
    1924:	681b      	ldr	r3, [r3, #0]
    1926:	429a      	cmp	r2, r3
    1928:	d0f1      	beq.n	190e <Verify_SendCResultBack+0x20>
		};
		cd   = SCU->READ_CMD;
    192a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1930:	613b      	str	r3, [r7, #16]
		va = SCU->READ_DATA;
    1932:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1938:	60fb      	str	r3, [r7, #12]
		mgeprf("SCU cd:[%X],va[%X]\n",cd,va);
    193a:	68fa      	ldr	r2, [r7, #12]
    193c:	6939      	ldr	r1, [r7, #16]
    193e:	4810      	ldr	r0, [pc, #64]	; (1980 <Verify_SendCResultBack+0x92>)
    1940:	f7fe fdd2 	bl	4e8 <cm_printf>
		VERIFY_MESSGAE_CMD = cd;	
    1944:	4a0d      	ldr	r2, [pc, #52]	; (197c <Verify_SendCResultBack+0x8e>)
    1946:	693b      	ldr	r3, [r7, #16]
    1948:	6013      	str	r3, [r2, #0]
    if(!(cd == cmd && va == 1))
    194a:	693a      	ldr	r2, [r7, #16]
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	429a      	cmp	r2, r3
    1950:	d102      	bne.n	1958 <Verify_SendCResultBack+0x6a>
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	2b01      	cmp	r3, #1
    1956:	d001      	beq.n	195c <Verify_SendCResultBack+0x6e>
        sut =false;
    1958:	2300      	movs	r3, #0
    195a:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    195c:	693b      	ldr	r3, [r7, #16]
    195e:	2b03      	cmp	r3, #3
    1960:	d104      	bne.n	196c <Verify_SendCResultBack+0x7e>
    1962:	68fb      	ldr	r3, [r7, #12]
    1964:	2b01      	cmp	r3, #1
    1966:	d101      	bne.n	196c <Verify_SendCResultBack+0x7e>
        Verify_SendEndSimulation();
    1968:	f000 f80c 	bl	1984 <Verify_SendEndSimulation>
    
    return sut;
    196c:	7dfb      	ldrb	r3, [r7, #23]
}
    196e:	4618      	mov	r0, r3
    1970:	3718      	adds	r7, #24
    1972:	46bd      	mov	sp, r7
    1974:	bd80      	pop	{r7, pc}
    1976:	bf00      	nop
    1978:	0000270c 	.word	0x0000270c
    197c:	200081f0 	.word	0x200081f0
    1980:	0000271c 	.word	0x0000271c

00001984 <Verify_SendEndSimulation>:


void Verify_SendEndSimulation(void)
{
    1984:	b480      	push	{r7}
    1986:	af00      	add	r7, sp, #0
    //UART_WriteByte(UART0,0x04);
    //while(1);
}
    1988:	bf00      	nop
    198a:	46bd      	mov	sp, r7
    198c:	bc80      	pop	{r7}
    198e:	4770      	bx	lr

00001990 <Verrify_SendPinConnect>:



void Verrify_SendPinConnect(MessagaConnectEn_Type Mce)
{
    1990:	b480      	push	{r7}
    1992:	b083      	sub	sp, #12
    1994:	af00      	add	r7, sp, #0
    1996:	4603      	mov	r3, r0
    1998:	80fb      	strh	r3, [r7, #6]
    SCU->SEND_DATA = Mce;
    199a:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    199e:	88fb      	ldrh	r3, [r7, #6]
    19a0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    19a2:	bf00      	nop
    19a4:	370c      	adds	r7, #12
    19a6:	46bd      	mov	sp, r7
    19a8:	bc80      	pop	{r7}
    19aa:	4770      	bx	lr

000019ac <Verrify_SendPinCon>:

void Verrify_SendPinCon(uint32_t xxx)
{
    19ac:	b480      	push	{r7}
    19ae:	b083      	sub	sp, #12
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    SCU->SEND_DATA = xxx;
    19b4:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    19bc:	bf00      	nop
    19be:	370c      	adds	r7, #12
    19c0:	46bd      	mov	sp, r7
    19c2:	bc80      	pop	{r7}
    19c4:	4770      	bx	lr

000019c6 <MCU_GetTickCount>:

//##########################################################
static unsigned long g_u32TimerMsCnt = 0;

unsigned long MCU_GetTickCount(void)
{
    19c6:	b480      	push	{r7}
    19c8:	af00      	add	r7, sp, #0
    return g_u32TimerMsCnt;
    19ca:	4b03      	ldr	r3, [pc, #12]	; (19d8 <MCU_GetTickCount+0x12>)
    19cc:	681b      	ldr	r3, [r3, #0]
}
    19ce:	4618      	mov	r0, r3
    19d0:	46bd      	mov	sp, r7
    19d2:	bc80      	pop	{r7}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	200081f8 	.word	0x200081f8

000019dc <SysTick_Handler>:
#ifndef BR_FPGA
void SysTick_Handler(void)
{
    19dc:	b480      	push	{r7}
    19de:	af00      	add	r7, sp, #0
  g_u32TimerMsCnt++;
    19e0:	4b04      	ldr	r3, [pc, #16]	; (19f4 <SysTick_Handler+0x18>)
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	3301      	adds	r3, #1
    19e6:	4a03      	ldr	r2, [pc, #12]	; (19f4 <SysTick_Handler+0x18>)
    19e8:	6013      	str	r3, [r2, #0]
}
    19ea:	bf00      	nop
    19ec:	46bd      	mov	sp, r7
    19ee:	bc80      	pop	{r7}
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	200081f8 	.word	0x200081f8

000019f8 <MCU_Sleep>:
#endif
void MCU_Sleep(unsigned int ms)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
#ifndef BR_FPGA
    unsigned long dest_time = ms + MCU_GetTickCount();
    1a00:	f7ff ffe1 	bl	19c6 <MCU_GetTickCount>
    1a04:	4602      	mov	r2, r0
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	4413      	add	r3, r2
    1a0a:	60fb      	str	r3, [r7, #12]
    while (MCU_GetTickCount() <= dest_time);
    1a0c:	bf00      	nop
    1a0e:	f7ff ffda 	bl	19c6 <MCU_GetTickCount>
    1a12:	4602      	mov	r2, r0
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	4293      	cmp	r3, r2
    1a18:	d2f9      	bcs.n	1a0e <MCU_Sleep+0x16>
#endif
}
    1a1a:	bf00      	nop
    1a1c:	3710      	adds	r7, #16
    1a1e:	46bd      	mov	sp, r7
    1a20:	bd80      	pop	{r7, pc}

00001a22 <sysTimeUpdataClk>:
void sysTimeUpdataClk(uint32_t clk)
{
    1a22:	b580      	push	{r7, lr}
    1a24:	b082      	sub	sp, #8
    1a26:	af00      	add	r7, sp, #0
    1a28:	6078      	str	r0, [r7, #4]
    #ifndef BR_FPGA
    SysTick_Config(clk/1000);
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	4a05      	ldr	r2, [pc, #20]	; (1a44 <sysTimeUpdataClk+0x22>)
    1a2e:	fba2 2303 	umull	r2, r3, r2, r3
    1a32:	099b      	lsrs	r3, r3, #6
    1a34:	4618      	mov	r0, r3
    1a36:	f7ff fc51 	bl	12dc <SysTick_Config>
    #endif
}
    1a3a:	bf00      	nop
    1a3c:	3708      	adds	r7, #8
    1a3e:	46bd      	mov	sp, r7
    1a40:	bd80      	pop	{r7, pc}
    1a42:	bf00      	nop
    1a44:	10624dd3 	.word	0x10624dd3

00001a48 <LOGUartSel>:
//#define logUart UART0
UART_TypeDef *logUart = UART0;


void  LOGUartSel(UART_TypeDef *Ux)
{
    1a48:	b480      	push	{r7}
    1a4a:	b083      	sub	sp, #12
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
    logUart = Ux;
    1a50:	4a03      	ldr	r2, [pc, #12]	; (1a60 <LOGUartSel+0x18>)
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	6013      	str	r3, [r2, #0]
}
    1a56:	bf00      	nop
    1a58:	370c      	adds	r7, #12
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bc80      	pop	{r7}
    1a5e:	4770      	bx	lr
    1a60:	20008004 	.word	0x20008004

00001a64 <LOGUartInit>:

void LOGUartInit(void)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	b086      	sub	sp, #24
    1a68:	af00      	add	r7, sp, #0
    UART_InitInfo_Type  UART_InitStru;
    PADConfig_Type      PAD_InitStru;
    
    memset(&PAD_InitStru, 0,sizeof(PADConfig_Type));
    1a6a:	463b      	mov	r3, r7
    1a6c:	2204      	movs	r2, #4
    1a6e:	2100      	movs	r1, #0
    1a70:	4618      	mov	r0, r3
    1a72:	f000 f9f7 	bl	1e64 <memset>
    memset(&UART_InitStru,0,sizeof(UART_InitInfo_Type));
    1a76:	1d3b      	adds	r3, r7, #4
    1a78:	2214      	movs	r2, #20
    1a7a:	2100      	movs	r1, #0
    1a7c:	4618      	mov	r0, r3
    1a7e:	f000 f9f1 	bl	1e64 <memset>

    if(logUart == UART0) {
    1a82:	4b31      	ldr	r3, [pc, #196]	; (1b48 <LOGUartInit+0xe4>)
    1a84:	681b      	ldr	r3, [r3, #0]
    1a86:	4a31      	ldr	r2, [pc, #196]	; (1b4c <LOGUartInit+0xe8>)
    1a88:	4293      	cmp	r3, r2
    1a8a:	d104      	bne.n	1a96 <LOGUartInit+0x32>
        SystemDevClockCtl(UART0_CKEn,true);
    1a8c:	2101      	movs	r1, #1
    1a8e:	2004      	movs	r0, #4
    1a90:	f7fe fc3e 	bl	310 <SystemDevClockCtl>
    1a94:	e003      	b.n	1a9e <LOGUartInit+0x3a>
#if defined(BR005)
        SystemDevClockCtl(UART0_SCKEn,true);
#endif
    }else{
        SystemDevClockCtl(UART1_CKEn,true);
    1a96:	2101      	movs	r1, #1
    1a98:	2005      	movs	r0, #5
    1a9a:	f7fe fc39 	bl	310 <SystemDevClockCtl>
    }
    if(logUart == UART0) {
    1a9e:	4b2a      	ldr	r3, [pc, #168]	; (1b48 <LOGUartInit+0xe4>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	4a2a      	ldr	r2, [pc, #168]	; (1b4c <LOGUartInit+0xe8>)
    1aa4:	4293      	cmp	r3, r2
    1aa6:	d118      	bne.n	1ada <LOGUartInit+0x76>
        PAD_InitStru.pad_ctl = PAD_MODE0;
    1aa8:	783b      	ldrb	r3, [r7, #0]
    1aaa:	f36f 1306 	bfc	r3, #4, #3
    1aae:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID0,&PAD_InitStru);
    1ab0:	463b      	mov	r3, r7
    1ab2:	4619      	mov	r1, r3
    1ab4:	2000      	movs	r0, #0
    1ab6:	f7fe fc67 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID1,&PAD_InitStru);
    1aba:	463b      	mov	r3, r7
    1abc:	4619      	mov	r1, r3
    1abe:	2001      	movs	r0, #1
    1ac0:	f7fe fc62 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID2,&PAD_InitStru);
    1ac4:	463b      	mov	r3, r7
    1ac6:	4619      	mov	r1, r3
    1ac8:	2002      	movs	r0, #2
    1aca:	f7fe fc5d 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID3,&PAD_InitStru);
    1ace:	463b      	mov	r3, r7
    1ad0:	4619      	mov	r1, r3
    1ad2:	2003      	movs	r0, #3
    1ad4:	f7fe fc58 	bl	388 <SystemPADConfig>
    1ad8:	e018      	b.n	1b0c <LOGUartInit+0xa8>
    }else{
        PAD_InitStru.pad_ctl = PAD_MODE1;
    1ada:	783b      	ldrb	r3, [r7, #0]
    1adc:	2201      	movs	r2, #1
    1ade:	f362 1306 	bfi	r3, r2, #4, #3
    1ae2:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID15,&PAD_InitStru);
    1ae4:	463b      	mov	r3, r7
    1ae6:	4619      	mov	r1, r3
    1ae8:	200f      	movs	r0, #15
    1aea:	f7fe fc4d 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID16,&PAD_InitStru);
    1aee:	463b      	mov	r3, r7
    1af0:	4619      	mov	r1, r3
    1af2:	2010      	movs	r0, #16
    1af4:	f7fe fc48 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID27,&PAD_InitStru);
    1af8:	463b      	mov	r3, r7
    1afa:	4619      	mov	r1, r3
    1afc:	201b      	movs	r0, #27
    1afe:	f7fe fc43 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID28,&PAD_InitStru);
    1b02:	463b      	mov	r3, r7
    1b04:	4619      	mov	r1, r3
    1b06:	201c      	movs	r0, #28
    1b08:	f7fe fc3e 	bl	388 <SystemPADConfig>

    }

    UART_InitStru.UART_BaudRate             = 921600;
    1b0c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
    1b10:	607b      	str	r3, [r7, #4]
    UART_InitStru.UART_WordLength           = UART_WL_8BITS;
    1b12:	2303      	movs	r3, #3
    1b14:	813b      	strh	r3, [r7, #8]
    UART_InitStru.UART_StopBits             = UART_SB_1BIT;
    1b16:	2300      	movs	r3, #0
    1b18:	817b      	strh	r3, [r7, #10]
    UART_InitStru.UART_ParityMode           = UART_PM_NONE;
    1b1a:	2300      	movs	r3, #0
    1b1c:	81bb      	strh	r3, [r7, #12]
    UART_InitStru.UART_HardwareFlowControl  = UART_FC_NONE;
    1b1e:	2300      	movs	r3, #0
    1b20:	81fb      	strh	r3, [r7, #14]
    UART_InitStru.UART_FIFOMode             = UART_FM_ENABLE;
    1b22:	2301      	movs	r3, #1
    1b24:	827b      	strh	r3, [r7, #18]
    UART_InitStru.UART_DMAMode              = UART_DM_MODE_0;
    1b26:	2300      	movs	r3, #0
    1b28:	823b      	strh	r3, [r7, #16]
    UART_InitStru.UART_TX_FIFOTriggerMode   = UART_TT_EMPTY;
    1b2a:	2300      	movs	r3, #0
    1b2c:	82bb      	strh	r3, [r7, #20]
    UART_InitStru.UART_RX_FIFOTriggerMode   = UART_RT_1_CHARACTER; 
    1b2e:	2300      	movs	r3, #0
    1b30:	82fb      	strh	r3, [r7, #22]
    UART_Init(logUart, &UART_InitStru); 
    1b32:	4b05      	ldr	r3, [pc, #20]	; (1b48 <LOGUartInit+0xe4>)
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	1d3a      	adds	r2, r7, #4
    1b38:	4611      	mov	r1, r2
    1b3a:	4618      	mov	r0, r3
    1b3c:	f7fe fd56 	bl	5ec <UART_Init>
}
    1b40:	bf00      	nop
    1b42:	3718      	adds	r7, #24
    1b44:	46bd      	mov	sp, r7
    1b46:	bd80      	pop	{r7, pc}
    1b48:	20008004 	.word	0x20008004
    1b4c:	90002000 	.word	0x90002000

00001b50 <c_printf>:

int c_printf(const char *fmt, ...)
{
    1b50:	b40f      	push	{r0, r1, r2, r3}
    1b52:	b580      	push	{r7, lr}
    1b54:	b082      	sub	sp, #8
    1b56:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
    1b58:	f107 0314 	add.w	r3, r7, #20
    1b5c:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
    1b5e:	683a      	ldr	r2, [r7, #0]
    1b60:	6939      	ldr	r1, [r7, #16]
    1b62:	480a      	ldr	r0, [pc, #40]	; (1b8c <c_printf+0x3c>)
    1b64:	f000 f99c 	bl	1ea0 <vsiprintf>
    1b68:	6078      	str	r0, [r7, #4]
    UART_WriteData(logUart, s_tmp_buf, r);
    1b6a:	4b09      	ldr	r3, [pc, #36]	; (1b90 <c_printf+0x40>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	687a      	ldr	r2, [r7, #4]
    1b70:	b292      	uxth	r2, r2
    1b72:	4906      	ldr	r1, [pc, #24]	; (1b8c <c_printf+0x3c>)
    1b74:	4618      	mov	r0, r3
    1b76:	f7fe fe51 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
    1b7a:	687b      	ldr	r3, [r7, #4]
}
    1b7c:	4618      	mov	r0, r3
    1b7e:	3708      	adds	r7, #8
    1b80:	46bd      	mov	sp, r7
    1b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1b86:	b004      	add	sp, #16
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop
    1b8c:	200081fc 	.word	0x200081fc
    1b90:	20008004 	.word	0x20008004

00001b94 <SimulationEnd>:

void  SimulationEnd(void)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	af00      	add	r7, sp, #0
    while(!UART_LSRCheckBits(logUart,UART_LSR_BIT_THRE));
    1b98:	bf00      	nop
    1b9a:	4b08      	ldr	r3, [pc, #32]	; (1bbc <SimulationEnd+0x28>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	2120      	movs	r1, #32
    1ba0:	4618      	mov	r0, r3
    1ba2:	f7fe feb9 	bl	918 <UART_LSRCheckBits>
    1ba6:	4603      	mov	r3, r0
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d0f6      	beq.n	1b9a <SimulationEnd+0x6>
    UART_WriteByte(logUart,0x04);
    1bac:	4b03      	ldr	r3, [pc, #12]	; (1bbc <SimulationEnd+0x28>)
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	2104      	movs	r1, #4
    1bb2:	4618      	mov	r0, r3
    1bb4:	f7fe fe24 	bl	800 <UART_WriteByte>
}
    1bb8:	bf00      	nop
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	20008004 	.word	0x20008004

00001bc0 <main>:
#include "verify_message.h"
#include "log_uart_config.h"


int main (void)
{
    1bc0:	b580      	push	{r7, lr}
    1bc2:	b092      	sub	sp, #72	; 0x48
    1bc4:	af00      	add	r7, sp, #0
    // LOG UART INIT
    sysTimeUpdataClk(SystemCoreClock);
    1bc6:	4b8b      	ldr	r3, [pc, #556]	; (1df4 <main+0x234>)
    1bc8:	681b      	ldr	r3, [r3, #0]
    1bca:	4618      	mov	r0, r3
    1bcc:	f7ff ff29 	bl	1a22 <sysTimeUpdataClk>
    Verrify_SendPinConnect(UART0_OUTPUT);
    1bd0:	f24a 0002 	movw	r0, #40962	; 0xa002
    1bd4:	f7ff fedc 	bl	1990 <Verrify_SendPinConnect>
    LOGUartInit();
    1bd8:	f7ff ff44 	bl	1a64 <LOGUartInit>
    c_printf("s_1_761_i2c_i2c_tx case \r\n");
    1bdc:	4886      	ldr	r0, [pc, #536]	; (1df8 <main+0x238>)
    1bde:	f7ff ffb7 	bl	1b50 <c_printf>
    {
        I2C_InitInof_Type   I2C_InitStru;
        PADConfig_Type      PAG_InitStru;

        memset(&PAG_InitStru,0,sizeof(PADConfig_Type));
    1be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1be6:	2204      	movs	r2, #4
    1be8:	2100      	movs	r1, #0
    1bea:	4618      	mov	r0, r3
    1bec:	f000 f93a 	bl	1e64 <memset>

        PAG_InitStru.ie         = PAD_IE_ENABLE;
    1bf0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1bf4:	f043 0302 	orr.w	r3, r3, #2
    1bf8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        PAG_InitStru.oen        = PAD_OEN_ENABLE;
    1bfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1c00:	f36f 0382 	bfc	r3, #2, #1
    1c04:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        PAG_InitStru.ren        = PAD_REN_ENABLE;
    1c08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1c0c:	f36f 03c3 	bfc	r3, #3, #1
    1c10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        PAG_InitStru.pad_ctl    = PAD_MODE1;
    1c14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1c18:	2201      	movs	r2, #1
    1c1a:	f362 1306 	bfi	r3, r2, #4, #3
    1c1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        
        SystemPADConfig(PADID17,&PAG_InitStru);
    1c22:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c26:	4619      	mov	r1, r3
    1c28:	2011      	movs	r0, #17
    1c2a:	f7fe fbad 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID18,&PAG_InitStru);
    1c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c32:	4619      	mov	r1, r3
    1c34:	2012      	movs	r0, #18
    1c36:	f7fe fba7 	bl	388 <SystemPADConfig>
        // SystemPADConfig(PADID4,&PAG_InitStru);
        // SystemPADConfig(PADID5,&PAG_InitStru);
        // SystemPADConfig(PADID27,&PAG_InitStru);
        // SystemPADConfig(PADID28,&PAG_InitStru);
        
        I2C_InitStru.master_en                  = MASTER_MODE_ENABLE;
    1c3a:	2301      	movs	r3, #1
    1c3c:	703b      	strb	r3, [r7, #0]
        I2C_InitStru.slave_en                   = SLAVE_MODE_DISABLE;
    1c3e:	2301      	movs	r3, #1
    1c40:	717b      	strb	r3, [r7, #5]
        I2C_InitStru.restart_en                 = MASTER_RESTART_DISABLE;
    1c42:	2300      	movs	r3, #0
    1c44:	713b      	strb	r3, [r7, #4]
        I2C_InitStru.slave_addr_type            = SLAVE_7BIT_ADDR;
    1c46:	2300      	movs	r3, #0
    1c48:	70bb      	strb	r3, [r7, #2]
        I2C_InitStru.master_addr_type           = MASTER_7BIT_ADDR;
    1c4a:	2300      	movs	r3, #0
    1c4c:	70fb      	strb	r3, [r7, #3]

        I2C_InitStru.max_speed                  = PARAM_MAX_SPEED_STANDARD;
    1c4e:	2301      	movs	r3, #1
    1c50:	707b      	strb	r3, [r7, #1]

        I2C_InitStru.slave_stop_det_if_addressed_en = SLAVE_STOP_DET_IFADDRESSED_DISABLE;
    1c52:	2300      	movs	r3, #0
    1c54:	71bb      	strb	r3, [r7, #6]
        I2C_InitStru.master_stop_det_if_addressed_en = MASTER_STOP_DET_IFACTIVE_DISABLE; 
    1c56:	2300      	movs	r3, #0
    1c58:	71fb      	strb	r3, [r7, #7]
        I2C_InitStru.tx_empty_intr_en           = TX_EMPTY_INTERRUPT_DISABLE;
    1c5a:	2300      	movs	r3, #0
    1c5c:	723b      	strb	r3, [r7, #8]
        I2C_InitStru.rx_fifo_full_hold_control_en = RX_FIFO_FULL_HOLD_DISABLE;
    1c5e:	2300      	movs	r3, #0
    1c60:	727b      	strb	r3, [r7, #9]
        I2C_InitStru.master_bus_clear_feature_en = MASTER_BUS_CLEAR_FEATURE_DISABLE;
    1c62:	2300      	movs	r3, #0
    1c64:	72bb      	strb	r3, [r7, #10]
        I2C_InitStru.optional_SAR_address_en    = OPTIONAL_SAR_ADDRESS_DISABLE;
    1c66:	2300      	movs	r3, #0
    1c68:	72fb      	strb	r3, [r7, #11]

        I2C_InitStru.SMBUS_slave_quick_en       = SMBUS_SLAVE_QUICK_DISABLE;
    1c6a:	2300      	movs	r3, #0
    1c6c:	733b      	strb	r3, [r7, #12]
        I2C_InitStru.SMBUS_ARP_contral_en       = SMBUS_ARP_CONTRAL_DISABLE;
    1c6e:	2300      	movs	r3, #0
    1c70:	737b      	strb	r3, [r7, #13]
        I2C_InitStru.SMBUS_persistent_slave_addr_en = SMBUS_PERSISTENT_SLV_ADDR_DISABLE;
    1c72:	2300      	movs	r3, #0
    1c74:	73bb      	strb	r3, [r7, #14]


        I2C_InitStru.I2C_target_address         = 0x50;
    1c76:	2350      	movs	r3, #80	; 0x50
    1c78:	823b      	strh	r3, [r7, #16]
        I2C_InitStru.slc_h  = 500;
    1c7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1c7e:	61fb      	str	r3, [r7, #28]
        I2C_InitStru.slc_l  = 500;
    1c80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1c84:	623b      	str	r3, [r7, #32]
        
        I2C_InitStru.targer_address_type        = MASTER_7BIT_ADDR;
    1c86:	2300      	movs	r3, #0
    1c88:	74bb      	strb	r3, [r7, #18]
        I2C_InitStru.general_call_or_start_byte = GENERAL_CALL;
    1c8a:	2300      	movs	r3, #0
    1c8c:	74fb      	strb	r3, [r7, #19]
        I2C_InitStru.general_call_or_start_byte_en = GENERAL_CALL_OR_START_BYTE_DISABLE;
    1c8e:	2300      	movs	r3, #0
    1c90:	753b      	strb	r3, [r7, #20]

        I2C_InitStru.programming_device_id_en   = PROGRAMMING_DEVICE_ID_DISABLE;
    1c92:	2300      	movs	r3, #0
    1c94:	757b      	strb	r3, [r7, #21]
        I2C_InitStru.programming_SMBUS_quick_cmd_en = PROGRAMMING_SMBUS_QUICK_CMD_DISABLE;
    1c96:	2300      	movs	r3, #0
    1c98:	75bb      	strb	r3, [r7, #22]


        I2C_InitStru.salve_address              = 0x2a;
    1c9a:	232a      	movs	r3, #42	; 0x2a
    1c9c:	833b      	strh	r3, [r7, #24]
        I2C_InitStru.interrupt_unmask           =  0x78e1;
    1c9e:	f647 03e1 	movw	r3, #30945	; 0x78e1
    1ca2:	627b      	str	r3, [r7, #36]	; 0x24

        I2C_InitStru.fifo_receive_threshold_level =  6;
    1ca4:	2306      	movs	r3, #6
    1ca6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        I2C_InitStru.fifo_transmit_threshold_level = 6;
    1caa:	2306      	movs	r3, #6
    1cac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

        I2C_InitStru.dma_rx_en                  = false;
    1cb0:	2300      	movs	r3, #0
    1cb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        I2C_InitStru.dma_tx_en                  = false;
    1cb6:	2300      	movs	r3, #0
    1cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        I2C_InitStru.dma_tx_data_level          =  2; 
    1cbc:	2302      	movs	r3, #2
    1cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        I2C_InitStru.dma_rx_data_level          =  2;
    1cc0:	2302      	movs	r3, #2
    1cc2:	633b      	str	r3, [r7, #48]	; 0x30


        #if  defined(BR002)||defined(BR003) ||defined(BR005) 
        SystemDevClockCtl(I2C_CKEn,true);
    1cc4:	2101      	movs	r1, #1
    1cc6:	200b      	movs	r0, #11
    1cc8:	f7fe fb22 	bl	310 <SystemDevClockCtl>
        #endif

        I2C_Init(I2C0,&I2C_InitStru);
    1ccc:	463b      	mov	r3, r7
    1cce:	4619      	mov	r1, r3
    1cd0:	484a      	ldr	r0, [pc, #296]	; (1dfc <main+0x23c>)
    1cd2:	f7fe ff8a 	bl	bea <I2C_Init>
        {
            #define MaxLendata  5
            static  uint8_t data_se[MaxLendata]= {0};
            static  uint8_t data_buff[MaxLendata]={0};
            
            EEPROM_WritePage (0,data_se,MaxLendata);
    1cd6:	2205      	movs	r2, #5
    1cd8:	4949      	ldr	r1, [pc, #292]	; (1e00 <main+0x240>)
    1cda:	2000      	movs	r0, #0
    1cdc:	f7ff fa32 	bl	1144 <EEPROM_WritePage>
            MCU_Sleep(3);
    1ce0:	2003      	movs	r0, #3
    1ce2:	f7ff fe89 	bl	19f8 <MCU_Sleep>
            EEPROM_SequentialRead(0,data_buff,MaxLendata);
    1ce6:	2205      	movs	r2, #5
    1ce8:	4946      	ldr	r1, [pc, #280]	; (1e04 <main+0x244>)
    1cea:	2000      	movs	r0, #0
    1cec:	f7ff faa8 	bl	1240 <EEPROM_SequentialRead>

            c_printf("eeprom Read : ");
    1cf0:	4845      	ldr	r0, [pc, #276]	; (1e08 <main+0x248>)
    1cf2:	f7ff ff2d 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1cf6:	2300      	movs	r3, #0
    1cf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    1cfc:	e00c      	b.n	1d18 <main+0x158>
                c_printf("%X,",data_buff[i]);
    1cfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    1d02:	4a40      	ldr	r2, [pc, #256]	; (1e04 <main+0x244>)
    1d04:	5cd3      	ldrb	r3, [r2, r3]
    1d06:	4619      	mov	r1, r3
    1d08:	4840      	ldr	r0, [pc, #256]	; (1e0c <main+0x24c>)
    1d0a:	f7ff ff21 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    1d12:	3301      	adds	r3, #1
    1d14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    1d18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    1d1c:	2b04      	cmp	r3, #4
    1d1e:	d9ee      	bls.n	1cfe <main+0x13e>
            c_printf("\r\n");
    1d20:	483b      	ldr	r0, [pc, #236]	; (1e10 <main+0x250>)
    1d22:	f7ff ff15 	bl	1b50 <c_printf>
            

            for(uint16_t i=0;i<MaxLendata;i++)
    1d26:	2300      	movs	r3, #0
    1d28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    1d2c:	e00b      	b.n	1d46 <main+0x186>
                data_se[i] = i;
    1d2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
    1d32:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
    1d36:	b2d1      	uxtb	r1, r2
    1d38:	4a31      	ldr	r2, [pc, #196]	; (1e00 <main+0x240>)
    1d3a:	54d1      	strb	r1, [r2, r3]
            for(uint16_t i=0;i<MaxLendata;i++)
    1d3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
    1d40:	3301      	adds	r3, #1
    1d42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    1d46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
    1d4a:	2b04      	cmp	r3, #4
    1d4c:	d9ef      	bls.n	1d2e <main+0x16e>

            EEPROM_WritePage (0,data_se,MaxLendata);
    1d4e:	2205      	movs	r2, #5
    1d50:	492b      	ldr	r1, [pc, #172]	; (1e00 <main+0x240>)
    1d52:	2000      	movs	r0, #0
    1d54:	f7ff f9f6 	bl	1144 <EEPROM_WritePage>
            
            c_printf("eeprom Write:");
    1d58:	482e      	ldr	r0, [pc, #184]	; (1e14 <main+0x254>)
    1d5a:	f7ff fef9 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1d5e:	2300      	movs	r3, #0
    1d60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    1d64:	e00c      	b.n	1d80 <main+0x1c0>
                c_printf("%X,",data_se[i]);
    1d66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    1d6a:	4a25      	ldr	r2, [pc, #148]	; (1e00 <main+0x240>)
    1d6c:	5cd3      	ldrb	r3, [r2, r3]
    1d6e:	4619      	mov	r1, r3
    1d70:	4826      	ldr	r0, [pc, #152]	; (1e0c <main+0x24c>)
    1d72:	f7ff feed 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1d76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    1d7a:	3301      	adds	r3, #1
    1d7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    1d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    1d84:	2b04      	cmp	r3, #4
    1d86:	d9ee      	bls.n	1d66 <main+0x1a6>
            c_printf("\r\n");
    1d88:	4821      	ldr	r0, [pc, #132]	; (1e10 <main+0x250>)
    1d8a:	f7ff fee1 	bl	1b50 <c_printf>
            
            for(uint32_t i=0;i<50000;i++);
    1d8e:	2300      	movs	r3, #0
    1d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    1d92:	e002      	b.n	1d9a <main+0x1da>
    1d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d96:	3301      	adds	r3, #1
    1d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    1d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1d9c:	f24c 324f 	movw	r2, #49999	; 0xc34f
    1da0:	4293      	cmp	r3, r2
    1da2:	d9f7      	bls.n	1d94 <main+0x1d4>
            
            EEPROM_SequentialRead(0,data_buff,MaxLendata);
    1da4:	2205      	movs	r2, #5
    1da6:	4917      	ldr	r1, [pc, #92]	; (1e04 <main+0x244>)
    1da8:	2000      	movs	r0, #0
    1daa:	f7ff fa49 	bl	1240 <EEPROM_SequentialRead>

            c_printf("eeprom Read : ");
    1dae:	4816      	ldr	r0, [pc, #88]	; (1e08 <main+0x248>)
    1db0:	f7ff fece 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1db4:	2300      	movs	r3, #0
    1db6:	877b      	strh	r3, [r7, #58]	; 0x3a
    1db8:	e009      	b.n	1dce <main+0x20e>
            {
                c_printf("%X,",data_buff[i]);
    1dba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    1dbc:	4a11      	ldr	r2, [pc, #68]	; (1e04 <main+0x244>)
    1dbe:	5cd3      	ldrb	r3, [r2, r3]
    1dc0:	4619      	mov	r1, r3
    1dc2:	4812      	ldr	r0, [pc, #72]	; (1e0c <main+0x24c>)
    1dc4:	f7ff fec4 	bl	1b50 <c_printf>
            for(uint16_t i=0;i<MaxLendata;i++)
    1dc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    1dca:	3301      	adds	r3, #1
    1dcc:	877b      	strh	r3, [r7, #58]	; 0x3a
    1dce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    1dd0:	2b04      	cmp	r3, #4
    1dd2:	d9f2      	bls.n	1dba <main+0x1fa>
            }
            c_printf("\r\n");
    1dd4:	480e      	ldr	r0, [pc, #56]	; (1e10 <main+0x250>)
    1dd6:	f7ff febb 	bl	1b50 <c_printf>
            c_printf("test i2c complete \r\n ");
    1dda:	480f      	ldr	r0, [pc, #60]	; (1e18 <main+0x258>)
    1ddc:	f7ff feb8 	bl	1b50 <c_printf>

        }

    }
	MCU_Sleep(3);
    1de0:	2003      	movs	r0, #3
    1de2:	f7ff fe09 	bl	19f8 <MCU_Sleep>
    c_printf("s_1_761_i2c_i2c_tx case completed \r\n");
    1de6:	480d      	ldr	r0, [pc, #52]	; (1e1c <main+0x25c>)
    1de8:	f7ff feb2 	bl	1b50 <c_printf>
    SimulationEnd();
    1dec:	f7ff fed2 	bl	1b94 <SimulationEnd>
    while(1){     
    1df0:	e7fe      	b.n	1df0 <main+0x230>
    1df2:	bf00      	nop
    1df4:	20008000 	.word	0x20008000
    1df8:	00002730 	.word	0x00002730
    1dfc:	90005000 	.word	0x90005000
    1e00:	2000827c 	.word	0x2000827c
    1e04:	20008284 	.word	0x20008284
    1e08:	0000274c 	.word	0x0000274c
    1e0c:	0000275c 	.word	0x0000275c
    1e10:	00002760 	.word	0x00002760
    1e14:	00002764 	.word	0x00002764
    1e18:	00002774 	.word	0x00002774
    1e1c:	0000278c 	.word	0x0000278c

00001e20 <exit>:
    1e20:	b508      	push	{r3, lr}
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <exit+0x20>)
    1e24:	4604      	mov	r4, r0
    1e26:	b113      	cbz	r3, 1e2e <exit+0xe>
    1e28:	2100      	movs	r1, #0
    1e2a:	f3af 8000 	nop.w
    1e2e:	4b05      	ldr	r3, [pc, #20]	; (1e44 <exit+0x24>)
    1e30:	6818      	ldr	r0, [r3, #0]
    1e32:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1e34:	b103      	cbz	r3, 1e38 <exit+0x18>
    1e36:	4798      	blx	r3
    1e38:	4620      	mov	r0, r4
    1e3a:	f000 fc43 	bl	26c4 <_exit>
    1e3e:	bf00      	nop
    1e40:	00000000 	.word	0x00000000
    1e44:	000027b4 	.word	0x000027b4

00001e48 <memcpy>:
    1e48:	440a      	add	r2, r1
    1e4a:	4291      	cmp	r1, r2
    1e4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1e50:	d100      	bne.n	1e54 <memcpy+0xc>
    1e52:	4770      	bx	lr
    1e54:	b510      	push	{r4, lr}
    1e56:	f811 4b01 	ldrb.w	r4, [r1], #1
    1e5a:	4291      	cmp	r1, r2
    1e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
    1e60:	d1f9      	bne.n	1e56 <memcpy+0xe>
    1e62:	bd10      	pop	{r4, pc}

00001e64 <memset>:
    1e64:	4603      	mov	r3, r0
    1e66:	4402      	add	r2, r0
    1e68:	4293      	cmp	r3, r2
    1e6a:	d100      	bne.n	1e6e <memset+0xa>
    1e6c:	4770      	bx	lr
    1e6e:	f803 1b01 	strb.w	r1, [r3], #1
    1e72:	e7f9      	b.n	1e68 <memset+0x4>

00001e74 <_vsiprintf_r>:
    1e74:	b500      	push	{lr}
    1e76:	b09b      	sub	sp, #108	; 0x6c
    1e78:	9100      	str	r1, [sp, #0]
    1e7a:	9104      	str	r1, [sp, #16]
    1e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1e80:	9105      	str	r1, [sp, #20]
    1e82:	9102      	str	r1, [sp, #8]
    1e84:	4905      	ldr	r1, [pc, #20]	; (1e9c <_vsiprintf_r+0x28>)
    1e86:	9103      	str	r1, [sp, #12]
    1e88:	4669      	mov	r1, sp
    1e8a:	f000 f86f 	bl	1f6c <_svfiprintf_r>
    1e8e:	2200      	movs	r2, #0
    1e90:	9b00      	ldr	r3, [sp, #0]
    1e92:	701a      	strb	r2, [r3, #0]
    1e94:	b01b      	add	sp, #108	; 0x6c
    1e96:	f85d fb04 	ldr.w	pc, [sp], #4
    1e9a:	bf00      	nop
    1e9c:	ffff0208 	.word	0xffff0208

00001ea0 <vsiprintf>:
    1ea0:	4613      	mov	r3, r2
    1ea2:	460a      	mov	r2, r1
    1ea4:	4601      	mov	r1, r0
    1ea6:	4802      	ldr	r0, [pc, #8]	; (1eb0 <vsiprintf+0x10>)
    1ea8:	6800      	ldr	r0, [r0, #0]
    1eaa:	f7ff bfe3 	b.w	1e74 <_vsiprintf_r>
    1eae:	bf00      	nop
    1eb0:	20008008 	.word	0x20008008

00001eb4 <__ssputs_r>:
    1eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1eb8:	688e      	ldr	r6, [r1, #8]
    1eba:	4682      	mov	sl, r0
    1ebc:	429e      	cmp	r6, r3
    1ebe:	460c      	mov	r4, r1
    1ec0:	4691      	mov	r9, r2
    1ec2:	4698      	mov	r8, r3
    1ec4:	d838      	bhi.n	1f38 <__ssputs_r+0x84>
    1ec6:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    1eca:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    1ece:	d031      	beq.n	1f34 <__ssputs_r+0x80>
    1ed0:	6962      	ldr	r2, [r4, #20]
    1ed2:	6825      	ldr	r5, [r4, #0]
    1ed4:	6909      	ldr	r1, [r1, #16]
    1ed6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1eda:	1a6f      	subs	r7, r5, r1
    1edc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    1ee0:	3301      	adds	r3, #1
    1ee2:	1055      	asrs	r5, r2, #1
    1ee4:	443b      	add	r3, r7
    1ee6:	429d      	cmp	r5, r3
    1ee8:	bf38      	it	cc
    1eea:	461d      	movcc	r5, r3
    1eec:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    1ef0:	d030      	beq.n	1f54 <__ssputs_r+0xa0>
    1ef2:	4629      	mov	r1, r5
    1ef4:	f000 fb32 	bl	255c <_malloc_r>
    1ef8:	4606      	mov	r6, r0
    1efa:	b950      	cbnz	r0, 1f12 <__ssputs_r+0x5e>
    1efc:	230c      	movs	r3, #12
    1efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f02:	f8ca 3000 	str.w	r3, [sl]
    1f06:	89a3      	ldrh	r3, [r4, #12]
    1f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f0c:	81a3      	strh	r3, [r4, #12]
    1f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f12:	463a      	mov	r2, r7
    1f14:	6921      	ldr	r1, [r4, #16]
    1f16:	f7ff ff97 	bl	1e48 <memcpy>
    1f1a:	89a3      	ldrh	r3, [r4, #12]
    1f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f24:	81a3      	strh	r3, [r4, #12]
    1f26:	6126      	str	r6, [r4, #16]
    1f28:	443e      	add	r6, r7
    1f2a:	6026      	str	r6, [r4, #0]
    1f2c:	4646      	mov	r6, r8
    1f2e:	6165      	str	r5, [r4, #20]
    1f30:	1bed      	subs	r5, r5, r7
    1f32:	60a5      	str	r5, [r4, #8]
    1f34:	4546      	cmp	r6, r8
    1f36:	d900      	bls.n	1f3a <__ssputs_r+0x86>
    1f38:	4646      	mov	r6, r8
    1f3a:	4632      	mov	r2, r6
    1f3c:	4649      	mov	r1, r9
    1f3e:	6820      	ldr	r0, [r4, #0]
    1f40:	f000 faa6 	bl	2490 <memmove>
    1f44:	68a3      	ldr	r3, [r4, #8]
    1f46:	2000      	movs	r0, #0
    1f48:	1b9b      	subs	r3, r3, r6
    1f4a:	60a3      	str	r3, [r4, #8]
    1f4c:	6823      	ldr	r3, [r4, #0]
    1f4e:	441e      	add	r6, r3
    1f50:	6026      	str	r6, [r4, #0]
    1f52:	e7dc      	b.n	1f0e <__ssputs_r+0x5a>
    1f54:	462a      	mov	r2, r5
    1f56:	f000 fb5b 	bl	2610 <_realloc_r>
    1f5a:	4606      	mov	r6, r0
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d1e2      	bne.n	1f26 <__ssputs_r+0x72>
    1f60:	6921      	ldr	r1, [r4, #16]
    1f62:	4650      	mov	r0, sl
    1f64:	f000 faae 	bl	24c4 <_free_r>
    1f68:	e7c8      	b.n	1efc <__ssputs_r+0x48>
	...

00001f6c <_svfiprintf_r>:
    1f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f70:	461e      	mov	r6, r3
    1f72:	898b      	ldrh	r3, [r1, #12]
    1f74:	b09d      	sub	sp, #116	; 0x74
    1f76:	061b      	lsls	r3, r3, #24
    1f78:	4607      	mov	r7, r0
    1f7a:	460d      	mov	r5, r1
    1f7c:	4614      	mov	r4, r2
    1f7e:	d50e      	bpl.n	1f9e <_svfiprintf_r+0x32>
    1f80:	690b      	ldr	r3, [r1, #16]
    1f82:	b963      	cbnz	r3, 1f9e <_svfiprintf_r+0x32>
    1f84:	2140      	movs	r1, #64	; 0x40
    1f86:	f000 fae9 	bl	255c <_malloc_r>
    1f8a:	6028      	str	r0, [r5, #0]
    1f8c:	6128      	str	r0, [r5, #16]
    1f8e:	b920      	cbnz	r0, 1f9a <_svfiprintf_r+0x2e>
    1f90:	230c      	movs	r3, #12
    1f92:	603b      	str	r3, [r7, #0]
    1f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f98:	e0c9      	b.n	212e <Heap_Size+0x12e>
    1f9a:	2340      	movs	r3, #64	; 0x40
    1f9c:	616b      	str	r3, [r5, #20]
    1f9e:	2300      	movs	r3, #0
    1fa0:	9309      	str	r3, [sp, #36]	; 0x24
    1fa2:	2320      	movs	r3, #32
    1fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1fa8:	2330      	movs	r3, #48	; 0x30
    1faa:	f04f 0a01 	mov.w	sl, #1
    1fae:	f8df 9198 	ldr.w	r9, [pc, #408]	; 2148 <Heap_Size+0x148>
    1fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1fb6:	9603      	str	r6, [sp, #12]
    1fb8:	4623      	mov	r3, r4
    1fba:	461e      	mov	r6, r3
    1fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
    1fc0:	b10a      	cbz	r2, 1fc6 <_svfiprintf_r+0x5a>
    1fc2:	2a25      	cmp	r2, #37	; 0x25
    1fc4:	d1f9      	bne.n	1fba <_svfiprintf_r+0x4e>
    1fc6:	ebb6 0b04 	subs.w	fp, r6, r4
    1fca:	d00b      	beq.n	1fe4 <_svfiprintf_r+0x78>
    1fcc:	465b      	mov	r3, fp
    1fce:	4622      	mov	r2, r4
    1fd0:	4629      	mov	r1, r5
    1fd2:	4638      	mov	r0, r7
    1fd4:	f7ff ff6e 	bl	1eb4 <__ssputs_r>
    1fd8:	3001      	adds	r0, #1
    1fda:	f000 80a3 	beq.w	2124 <Heap_Size+0x124>
    1fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fe0:	445b      	add	r3, fp
    1fe2:	9309      	str	r3, [sp, #36]	; 0x24
    1fe4:	7833      	ldrb	r3, [r6, #0]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	f000 809c 	beq.w	2124 <Heap_Size+0x124>
    1fec:	2300      	movs	r3, #0
    1fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1ff6:	3601      	adds	r6, #1
    1ff8:	9304      	str	r3, [sp, #16]
    1ffa:	9307      	str	r3, [sp, #28]
    1ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    2000:	931a      	str	r3, [sp, #104]	; 0x68
    2002:	4634      	mov	r4, r6
    2004:	2205      	movs	r2, #5
    2006:	f814 1b01 	ldrb.w	r1, [r4], #1
    200a:	484f      	ldr	r0, [pc, #316]	; (2148 <Heap_Size+0x148>)
    200c:	f000 fa32 	bl	2474 <memchr>
    2010:	9b04      	ldr	r3, [sp, #16]
    2012:	b9c0      	cbnz	r0, 2046 <Heap_Size+0x46>
    2014:	06d9      	lsls	r1, r3, #27
    2016:	bf44      	itt	mi
    2018:	2220      	movmi	r2, #32
    201a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    201e:	071a      	lsls	r2, r3, #28
    2020:	bf44      	itt	mi
    2022:	222b      	movmi	r2, #43	; 0x2b
    2024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2028:	7832      	ldrb	r2, [r6, #0]
    202a:	2a2a      	cmp	r2, #42	; 0x2a
    202c:	d013      	beq.n	2056 <Heap_Size+0x56>
    202e:	4634      	mov	r4, r6
    2030:	2000      	movs	r0, #0
    2032:	260a      	movs	r6, #10
    2034:	9a07      	ldr	r2, [sp, #28]
    2036:	4621      	mov	r1, r4
    2038:	f811 3b01 	ldrb.w	r3, [r1], #1
    203c:	3b30      	subs	r3, #48	; 0x30
    203e:	2b09      	cmp	r3, #9
    2040:	d94b      	bls.n	20da <Heap_Size+0xda>
    2042:	b970      	cbnz	r0, 2062 <Heap_Size+0x62>
    2044:	e014      	b.n	2070 <Heap_Size+0x70>
    2046:	eba0 0009 	sub.w	r0, r0, r9
    204a:	fa0a f000 	lsl.w	r0, sl, r0
    204e:	4318      	orrs	r0, r3
    2050:	9004      	str	r0, [sp, #16]
    2052:	4626      	mov	r6, r4
    2054:	e7d5      	b.n	2002 <Heap_Size+0x2>
    2056:	9a03      	ldr	r2, [sp, #12]
    2058:	1d11      	adds	r1, r2, #4
    205a:	6812      	ldr	r2, [r2, #0]
    205c:	9103      	str	r1, [sp, #12]
    205e:	2a00      	cmp	r2, #0
    2060:	db01      	blt.n	2066 <Heap_Size+0x66>
    2062:	9207      	str	r2, [sp, #28]
    2064:	e004      	b.n	2070 <Heap_Size+0x70>
    2066:	4252      	negs	r2, r2
    2068:	f043 0302 	orr.w	r3, r3, #2
    206c:	9207      	str	r2, [sp, #28]
    206e:	9304      	str	r3, [sp, #16]
    2070:	7823      	ldrb	r3, [r4, #0]
    2072:	2b2e      	cmp	r3, #46	; 0x2e
    2074:	d10c      	bne.n	2090 <Heap_Size+0x90>
    2076:	7863      	ldrb	r3, [r4, #1]
    2078:	2b2a      	cmp	r3, #42	; 0x2a
    207a:	d133      	bne.n	20e4 <Heap_Size+0xe4>
    207c:	9b03      	ldr	r3, [sp, #12]
    207e:	3402      	adds	r4, #2
    2080:	1d1a      	adds	r2, r3, #4
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	9203      	str	r2, [sp, #12]
    2086:	2b00      	cmp	r3, #0
    2088:	bfb8      	it	lt
    208a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    208e:	9305      	str	r3, [sp, #20]
    2090:	4e2e      	ldr	r6, [pc, #184]	; (214c <Heap_Size+0x14c>)
    2092:	2203      	movs	r2, #3
    2094:	7821      	ldrb	r1, [r4, #0]
    2096:	4630      	mov	r0, r6
    2098:	f000 f9ec 	bl	2474 <memchr>
    209c:	b138      	cbz	r0, 20ae <Heap_Size+0xae>
    209e:	2340      	movs	r3, #64	; 0x40
    20a0:	1b80      	subs	r0, r0, r6
    20a2:	fa03 f000 	lsl.w	r0, r3, r0
    20a6:	9b04      	ldr	r3, [sp, #16]
    20a8:	3401      	adds	r4, #1
    20aa:	4303      	orrs	r3, r0
    20ac:	9304      	str	r3, [sp, #16]
    20ae:	f814 1b01 	ldrb.w	r1, [r4], #1
    20b2:	2206      	movs	r2, #6
    20b4:	4826      	ldr	r0, [pc, #152]	; (2150 <Heap_Size+0x150>)
    20b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    20ba:	f000 f9db 	bl	2474 <memchr>
    20be:	2800      	cmp	r0, #0
    20c0:	d038      	beq.n	2134 <Heap_Size+0x134>
    20c2:	4b24      	ldr	r3, [pc, #144]	; (2154 <Heap_Size+0x154>)
    20c4:	bb13      	cbnz	r3, 210c <Heap_Size+0x10c>
    20c6:	9b03      	ldr	r3, [sp, #12]
    20c8:	3307      	adds	r3, #7
    20ca:	f023 0307 	bic.w	r3, r3, #7
    20ce:	3308      	adds	r3, #8
    20d0:	9303      	str	r3, [sp, #12]
    20d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20d4:	4443      	add	r3, r8
    20d6:	9309      	str	r3, [sp, #36]	; 0x24
    20d8:	e76e      	b.n	1fb8 <_svfiprintf_r+0x4c>
    20da:	fb06 3202 	mla	r2, r6, r2, r3
    20de:	2001      	movs	r0, #1
    20e0:	460c      	mov	r4, r1
    20e2:	e7a8      	b.n	2036 <Heap_Size+0x36>
    20e4:	2300      	movs	r3, #0
    20e6:	260a      	movs	r6, #10
    20e8:	4619      	mov	r1, r3
    20ea:	3401      	adds	r4, #1
    20ec:	9305      	str	r3, [sp, #20]
    20ee:	4620      	mov	r0, r4
    20f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    20f4:	3a30      	subs	r2, #48	; 0x30
    20f6:	2a09      	cmp	r2, #9
    20f8:	d903      	bls.n	2102 <Heap_Size+0x102>
    20fa:	2b00      	cmp	r3, #0
    20fc:	d0c8      	beq.n	2090 <Heap_Size+0x90>
    20fe:	9105      	str	r1, [sp, #20]
    2100:	e7c6      	b.n	2090 <Heap_Size+0x90>
    2102:	fb06 2101 	mla	r1, r6, r1, r2
    2106:	2301      	movs	r3, #1
    2108:	4604      	mov	r4, r0
    210a:	e7f0      	b.n	20ee <Heap_Size+0xee>
    210c:	ab03      	add	r3, sp, #12
    210e:	9300      	str	r3, [sp, #0]
    2110:	462a      	mov	r2, r5
    2112:	4b11      	ldr	r3, [pc, #68]	; (2158 <Heap_Size+0x158>)
    2114:	a904      	add	r1, sp, #16
    2116:	4638      	mov	r0, r7
    2118:	f3af 8000 	nop.w
    211c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2120:	4680      	mov	r8, r0
    2122:	d1d6      	bne.n	20d2 <Heap_Size+0xd2>
    2124:	89ab      	ldrh	r3, [r5, #12]
    2126:	065b      	lsls	r3, r3, #25
    2128:	f53f af34 	bmi.w	1f94 <_svfiprintf_r+0x28>
    212c:	9809      	ldr	r0, [sp, #36]	; 0x24
    212e:	b01d      	add	sp, #116	; 0x74
    2130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2134:	ab03      	add	r3, sp, #12
    2136:	9300      	str	r3, [sp, #0]
    2138:	462a      	mov	r2, r5
    213a:	4b07      	ldr	r3, [pc, #28]	; (2158 <Heap_Size+0x158>)
    213c:	a904      	add	r1, sp, #16
    213e:	4638      	mov	r0, r7
    2140:	f000 f882 	bl	2248 <_printf_i>
    2144:	e7ea      	b.n	211c <Heap_Size+0x11c>
    2146:	bf00      	nop
    2148:	000027b8 	.word	0x000027b8
    214c:	000027be 	.word	0x000027be
    2150:	000027c2 	.word	0x000027c2
    2154:	00000000 	.word	0x00000000
    2158:	00001eb5 	.word	0x00001eb5

0000215c <_printf_common>:
    215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2160:	4691      	mov	r9, r2
    2162:	461f      	mov	r7, r3
    2164:	688a      	ldr	r2, [r1, #8]
    2166:	690b      	ldr	r3, [r1, #16]
    2168:	4606      	mov	r6, r0
    216a:	4293      	cmp	r3, r2
    216c:	bfb8      	it	lt
    216e:	4613      	movlt	r3, r2
    2170:	f8c9 3000 	str.w	r3, [r9]
    2174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2178:	460c      	mov	r4, r1
    217a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    217e:	b112      	cbz	r2, 2186 <_printf_common+0x2a>
    2180:	3301      	adds	r3, #1
    2182:	f8c9 3000 	str.w	r3, [r9]
    2186:	6823      	ldr	r3, [r4, #0]
    2188:	0699      	lsls	r1, r3, #26
    218a:	bf42      	ittt	mi
    218c:	f8d9 3000 	ldrmi.w	r3, [r9]
    2190:	3302      	addmi	r3, #2
    2192:	f8c9 3000 	strmi.w	r3, [r9]
    2196:	6825      	ldr	r5, [r4, #0]
    2198:	f015 0506 	ands.w	r5, r5, #6
    219c:	d107      	bne.n	21ae <_printf_common+0x52>
    219e:	f104 0a19 	add.w	sl, r4, #25
    21a2:	68e3      	ldr	r3, [r4, #12]
    21a4:	f8d9 2000 	ldr.w	r2, [r9]
    21a8:	1a9b      	subs	r3, r3, r2
    21aa:	42ab      	cmp	r3, r5
    21ac:	dc29      	bgt.n	2202 <_printf_common+0xa6>
    21ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    21b2:	6822      	ldr	r2, [r4, #0]
    21b4:	3300      	adds	r3, #0
    21b6:	bf18      	it	ne
    21b8:	2301      	movne	r3, #1
    21ba:	0692      	lsls	r2, r2, #26
    21bc:	d42e      	bmi.n	221c <_printf_common+0xc0>
    21be:	f104 0243 	add.w	r2, r4, #67	; 0x43
    21c2:	4639      	mov	r1, r7
    21c4:	4630      	mov	r0, r6
    21c6:	47c0      	blx	r8
    21c8:	3001      	adds	r0, #1
    21ca:	d021      	beq.n	2210 <_printf_common+0xb4>
    21cc:	6823      	ldr	r3, [r4, #0]
    21ce:	68e5      	ldr	r5, [r4, #12]
    21d0:	f003 0306 	and.w	r3, r3, #6
    21d4:	2b04      	cmp	r3, #4
    21d6:	bf18      	it	ne
    21d8:	2500      	movne	r5, #0
    21da:	f8d9 2000 	ldr.w	r2, [r9]
    21de:	f04f 0900 	mov.w	r9, #0
    21e2:	bf08      	it	eq
    21e4:	1aad      	subeq	r5, r5, r2
    21e6:	68a3      	ldr	r3, [r4, #8]
    21e8:	6922      	ldr	r2, [r4, #16]
    21ea:	bf08      	it	eq
    21ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    21f0:	4293      	cmp	r3, r2
    21f2:	bfc4      	itt	gt
    21f4:	1a9b      	subgt	r3, r3, r2
    21f6:	18ed      	addgt	r5, r5, r3
    21f8:	341a      	adds	r4, #26
    21fa:	454d      	cmp	r5, r9
    21fc:	d11a      	bne.n	2234 <_printf_common+0xd8>
    21fe:	2000      	movs	r0, #0
    2200:	e008      	b.n	2214 <_printf_common+0xb8>
    2202:	2301      	movs	r3, #1
    2204:	4652      	mov	r2, sl
    2206:	4639      	mov	r1, r7
    2208:	4630      	mov	r0, r6
    220a:	47c0      	blx	r8
    220c:	3001      	adds	r0, #1
    220e:	d103      	bne.n	2218 <_printf_common+0xbc>
    2210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2218:	3501      	adds	r5, #1
    221a:	e7c2      	b.n	21a2 <_printf_common+0x46>
    221c:	2030      	movs	r0, #48	; 0x30
    221e:	18e1      	adds	r1, r4, r3
    2220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2224:	1c5a      	adds	r2, r3, #1
    2226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    222a:	4422      	add	r2, r4
    222c:	3302      	adds	r3, #2
    222e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2232:	e7c4      	b.n	21be <_printf_common+0x62>
    2234:	2301      	movs	r3, #1
    2236:	4622      	mov	r2, r4
    2238:	4639      	mov	r1, r7
    223a:	4630      	mov	r0, r6
    223c:	47c0      	blx	r8
    223e:	3001      	adds	r0, #1
    2240:	d0e6      	beq.n	2210 <_printf_common+0xb4>
    2242:	f109 0901 	add.w	r9, r9, #1
    2246:	e7d8      	b.n	21fa <_printf_common+0x9e>

00002248 <_printf_i>:
    2248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    224c:	4606      	mov	r6, r0
    224e:	460c      	mov	r4, r1
    2250:	f101 0043 	add.w	r0, r1, #67	; 0x43
    2254:	7e09      	ldrb	r1, [r1, #24]
    2256:	b085      	sub	sp, #20
    2258:	296e      	cmp	r1, #110	; 0x6e
    225a:	4698      	mov	r8, r3
    225c:	4617      	mov	r7, r2
    225e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2260:	f000 80bb 	beq.w	23da <_printf_i+0x192>
    2264:	d824      	bhi.n	22b0 <_printf_i+0x68>
    2266:	2963      	cmp	r1, #99	; 0x63
    2268:	d039      	beq.n	22de <_printf_i+0x96>
    226a:	d80a      	bhi.n	2282 <_printf_i+0x3a>
    226c:	2900      	cmp	r1, #0
    226e:	f000 80c4 	beq.w	23fa <_printf_i+0x1b2>
    2272:	2958      	cmp	r1, #88	; 0x58
    2274:	f000 8092 	beq.w	239c <_printf_i+0x154>
    2278:	f104 0542 	add.w	r5, r4, #66	; 0x42
    227c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2280:	e035      	b.n	22ee <_printf_i+0xa6>
    2282:	2964      	cmp	r1, #100	; 0x64
    2284:	d001      	beq.n	228a <_printf_i+0x42>
    2286:	2969      	cmp	r1, #105	; 0x69
    2288:	d1f6      	bne.n	2278 <_printf_i+0x30>
    228a:	6825      	ldr	r5, [r4, #0]
    228c:	681a      	ldr	r2, [r3, #0]
    228e:	f015 0f80 	tst.w	r5, #128	; 0x80
    2292:	f102 0104 	add.w	r1, r2, #4
    2296:	d02c      	beq.n	22f2 <_printf_i+0xaa>
    2298:	6812      	ldr	r2, [r2, #0]
    229a:	6019      	str	r1, [r3, #0]
    229c:	2a00      	cmp	r2, #0
    229e:	da03      	bge.n	22a8 <_printf_i+0x60>
    22a0:	232d      	movs	r3, #45	; 0x2d
    22a2:	4252      	negs	r2, r2
    22a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    22a8:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 246c <_printf_i+0x224>
    22ac:	230a      	movs	r3, #10
    22ae:	e03f      	b.n	2330 <_printf_i+0xe8>
    22b0:	2973      	cmp	r1, #115	; 0x73
    22b2:	f000 80a6 	beq.w	2402 <_printf_i+0x1ba>
    22b6:	d808      	bhi.n	22ca <_printf_i+0x82>
    22b8:	296f      	cmp	r1, #111	; 0x6f
    22ba:	d021      	beq.n	2300 <_printf_i+0xb8>
    22bc:	2970      	cmp	r1, #112	; 0x70
    22be:	d1db      	bne.n	2278 <_printf_i+0x30>
    22c0:	6822      	ldr	r2, [r4, #0]
    22c2:	f042 0220 	orr.w	r2, r2, #32
    22c6:	6022      	str	r2, [r4, #0]
    22c8:	e003      	b.n	22d2 <_printf_i+0x8a>
    22ca:	2975      	cmp	r1, #117	; 0x75
    22cc:	d018      	beq.n	2300 <_printf_i+0xb8>
    22ce:	2978      	cmp	r1, #120	; 0x78
    22d0:	d1d2      	bne.n	2278 <_printf_i+0x30>
    22d2:	2278      	movs	r2, #120	; 0x78
    22d4:	f8df c198 	ldr.w	ip, [pc, #408]	; 2470 <_printf_i+0x228>
    22d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    22dc:	e062      	b.n	23a4 <_printf_i+0x15c>
    22de:	681a      	ldr	r2, [r3, #0]
    22e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    22e4:	1d11      	adds	r1, r2, #4
    22e6:	6019      	str	r1, [r3, #0]
    22e8:	6813      	ldr	r3, [r2, #0]
    22ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    22ee:	2301      	movs	r3, #1
    22f0:	e094      	b.n	241c <_printf_i+0x1d4>
    22f2:	6812      	ldr	r2, [r2, #0]
    22f4:	f015 0f40 	tst.w	r5, #64	; 0x40
    22f8:	6019      	str	r1, [r3, #0]
    22fa:	bf18      	it	ne
    22fc:	b212      	sxthne	r2, r2
    22fe:	e7cd      	b.n	229c <_printf_i+0x54>
    2300:	f8d4 c000 	ldr.w	ip, [r4]
    2304:	681a      	ldr	r2, [r3, #0]
    2306:	f01c 0f80 	tst.w	ip, #128	; 0x80
    230a:	f102 0504 	add.w	r5, r2, #4
    230e:	601d      	str	r5, [r3, #0]
    2310:	d001      	beq.n	2316 <_printf_i+0xce>
    2312:	6812      	ldr	r2, [r2, #0]
    2314:	e003      	b.n	231e <_printf_i+0xd6>
    2316:	f01c 0f40 	tst.w	ip, #64	; 0x40
    231a:	d0fa      	beq.n	2312 <_printf_i+0xca>
    231c:	8812      	ldrh	r2, [r2, #0]
    231e:	296f      	cmp	r1, #111	; 0x6f
    2320:	bf0c      	ite	eq
    2322:	2308      	moveq	r3, #8
    2324:	230a      	movne	r3, #10
    2326:	f8df c144 	ldr.w	ip, [pc, #324]	; 246c <_printf_i+0x224>
    232a:	2100      	movs	r1, #0
    232c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    2330:	6865      	ldr	r5, [r4, #4]
    2332:	2d00      	cmp	r5, #0
    2334:	bfa8      	it	ge
    2336:	6821      	ldrge	r1, [r4, #0]
    2338:	60a5      	str	r5, [r4, #8]
    233a:	bfa4      	itt	ge
    233c:	f021 0104 	bicge.w	r1, r1, #4
    2340:	6021      	strge	r1, [r4, #0]
    2342:	b90a      	cbnz	r2, 2348 <_printf_i+0x100>
    2344:	2d00      	cmp	r5, #0
    2346:	d046      	beq.n	23d6 <_printf_i+0x18e>
    2348:	4605      	mov	r5, r0
    234a:	fbb2 f1f3 	udiv	r1, r2, r3
    234e:	fb03 2e11 	mls	lr, r3, r1, r2
    2352:	f81c e00e 	ldrb.w	lr, [ip, lr]
    2356:	4293      	cmp	r3, r2
    2358:	f805 ed01 	strb.w	lr, [r5, #-1]!
    235c:	d939      	bls.n	23d2 <_printf_i+0x18a>
    235e:	2b08      	cmp	r3, #8
    2360:	d10b      	bne.n	237a <_printf_i+0x132>
    2362:	6823      	ldr	r3, [r4, #0]
    2364:	07da      	lsls	r2, r3, #31
    2366:	d508      	bpl.n	237a <_printf_i+0x132>
    2368:	6923      	ldr	r3, [r4, #16]
    236a:	6862      	ldr	r2, [r4, #4]
    236c:	429a      	cmp	r2, r3
    236e:	bfde      	ittt	le
    2370:	2330      	movle	r3, #48	; 0x30
    2372:	f805 3c01 	strble.w	r3, [r5, #-1]
    2376:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    237a:	1b40      	subs	r0, r0, r5
    237c:	6120      	str	r0, [r4, #16]
    237e:	f8cd 8000 	str.w	r8, [sp]
    2382:	463b      	mov	r3, r7
    2384:	aa03      	add	r2, sp, #12
    2386:	4621      	mov	r1, r4
    2388:	4630      	mov	r0, r6
    238a:	f7ff fee7 	bl	215c <_printf_common>
    238e:	3001      	adds	r0, #1
    2390:	d149      	bne.n	2426 <_printf_i+0x1de>
    2392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2396:	b005      	add	sp, #20
    2398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    239c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 246c <_printf_i+0x224>
    23a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    23a4:	681d      	ldr	r5, [r3, #0]
    23a6:	6821      	ldr	r1, [r4, #0]
    23a8:	f855 2b04 	ldr.w	r2, [r5], #4
    23ac:	601d      	str	r5, [r3, #0]
    23ae:	060d      	lsls	r5, r1, #24
    23b0:	d50b      	bpl.n	23ca <_printf_i+0x182>
    23b2:	07cd      	lsls	r5, r1, #31
    23b4:	bf44      	itt	mi
    23b6:	f041 0120 	orrmi.w	r1, r1, #32
    23ba:	6021      	strmi	r1, [r4, #0]
    23bc:	b91a      	cbnz	r2, 23c6 <_printf_i+0x17e>
    23be:	6823      	ldr	r3, [r4, #0]
    23c0:	f023 0320 	bic.w	r3, r3, #32
    23c4:	6023      	str	r3, [r4, #0]
    23c6:	2310      	movs	r3, #16
    23c8:	e7af      	b.n	232a <_printf_i+0xe2>
    23ca:	064b      	lsls	r3, r1, #25
    23cc:	bf48      	it	mi
    23ce:	b292      	uxthmi	r2, r2
    23d0:	e7ef      	b.n	23b2 <_printf_i+0x16a>
    23d2:	460a      	mov	r2, r1
    23d4:	e7b9      	b.n	234a <_printf_i+0x102>
    23d6:	4605      	mov	r5, r0
    23d8:	e7c1      	b.n	235e <_printf_i+0x116>
    23da:	681a      	ldr	r2, [r3, #0]
    23dc:	f8d4 c000 	ldr.w	ip, [r4]
    23e0:	1d15      	adds	r5, r2, #4
    23e2:	6961      	ldr	r1, [r4, #20]
    23e4:	f01c 0f80 	tst.w	ip, #128	; 0x80
    23e8:	601d      	str	r5, [r3, #0]
    23ea:	6813      	ldr	r3, [r2, #0]
    23ec:	d001      	beq.n	23f2 <_printf_i+0x1aa>
    23ee:	6019      	str	r1, [r3, #0]
    23f0:	e003      	b.n	23fa <_printf_i+0x1b2>
    23f2:	f01c 0f40 	tst.w	ip, #64	; 0x40
    23f6:	d0fa      	beq.n	23ee <_printf_i+0x1a6>
    23f8:	8019      	strh	r1, [r3, #0]
    23fa:	2300      	movs	r3, #0
    23fc:	4605      	mov	r5, r0
    23fe:	6123      	str	r3, [r4, #16]
    2400:	e7bd      	b.n	237e <_printf_i+0x136>
    2402:	681a      	ldr	r2, [r3, #0]
    2404:	1d11      	adds	r1, r2, #4
    2406:	6019      	str	r1, [r3, #0]
    2408:	6815      	ldr	r5, [r2, #0]
    240a:	2100      	movs	r1, #0
    240c:	6862      	ldr	r2, [r4, #4]
    240e:	4628      	mov	r0, r5
    2410:	f000 f830 	bl	2474 <memchr>
    2414:	b108      	cbz	r0, 241a <_printf_i+0x1d2>
    2416:	1b40      	subs	r0, r0, r5
    2418:	6060      	str	r0, [r4, #4]
    241a:	6863      	ldr	r3, [r4, #4]
    241c:	6123      	str	r3, [r4, #16]
    241e:	2300      	movs	r3, #0
    2420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2424:	e7ab      	b.n	237e <_printf_i+0x136>
    2426:	6923      	ldr	r3, [r4, #16]
    2428:	462a      	mov	r2, r5
    242a:	4639      	mov	r1, r7
    242c:	4630      	mov	r0, r6
    242e:	47c0      	blx	r8
    2430:	3001      	adds	r0, #1
    2432:	d0ae      	beq.n	2392 <_printf_i+0x14a>
    2434:	6823      	ldr	r3, [r4, #0]
    2436:	079b      	lsls	r3, r3, #30
    2438:	d413      	bmi.n	2462 <_printf_i+0x21a>
    243a:	68e0      	ldr	r0, [r4, #12]
    243c:	9b03      	ldr	r3, [sp, #12]
    243e:	4298      	cmp	r0, r3
    2440:	bfb8      	it	lt
    2442:	4618      	movlt	r0, r3
    2444:	e7a7      	b.n	2396 <_printf_i+0x14e>
    2446:	2301      	movs	r3, #1
    2448:	464a      	mov	r2, r9
    244a:	4639      	mov	r1, r7
    244c:	4630      	mov	r0, r6
    244e:	47c0      	blx	r8
    2450:	3001      	adds	r0, #1
    2452:	d09e      	beq.n	2392 <_printf_i+0x14a>
    2454:	3501      	adds	r5, #1
    2456:	68e3      	ldr	r3, [r4, #12]
    2458:	9a03      	ldr	r2, [sp, #12]
    245a:	1a9b      	subs	r3, r3, r2
    245c:	42ab      	cmp	r3, r5
    245e:	dcf2      	bgt.n	2446 <_printf_i+0x1fe>
    2460:	e7eb      	b.n	243a <_printf_i+0x1f2>
    2462:	2500      	movs	r5, #0
    2464:	f104 0919 	add.w	r9, r4, #25
    2468:	e7f5      	b.n	2456 <_printf_i+0x20e>
    246a:	bf00      	nop
    246c:	000027c9 	.word	0x000027c9
    2470:	000027da 	.word	0x000027da

00002474 <memchr>:
    2474:	b510      	push	{r4, lr}
    2476:	b2c9      	uxtb	r1, r1
    2478:	4402      	add	r2, r0
    247a:	4290      	cmp	r0, r2
    247c:	4603      	mov	r3, r0
    247e:	d101      	bne.n	2484 <memchr+0x10>
    2480:	2300      	movs	r3, #0
    2482:	e003      	b.n	248c <memchr+0x18>
    2484:	781c      	ldrb	r4, [r3, #0]
    2486:	3001      	adds	r0, #1
    2488:	428c      	cmp	r4, r1
    248a:	d1f6      	bne.n	247a <memchr+0x6>
    248c:	4618      	mov	r0, r3
    248e:	bd10      	pop	{r4, pc}

00002490 <memmove>:
    2490:	4288      	cmp	r0, r1
    2492:	b510      	push	{r4, lr}
    2494:	eb01 0302 	add.w	r3, r1, r2
    2498:	d902      	bls.n	24a0 <memmove+0x10>
    249a:	4283      	cmp	r3, r0
    249c:	461c      	mov	r4, r3
    249e:	d807      	bhi.n	24b0 <memmove+0x20>
    24a0:	1e42      	subs	r2, r0, #1
    24a2:	4299      	cmp	r1, r3
    24a4:	d008      	beq.n	24b8 <memmove+0x28>
    24a6:	f811 4b01 	ldrb.w	r4, [r1], #1
    24aa:	f802 4f01 	strb.w	r4, [r2, #1]!
    24ae:	e7f8      	b.n	24a2 <memmove+0x12>
    24b0:	1883      	adds	r3, r0, r2
    24b2:	1a9a      	subs	r2, r3, r2
    24b4:	429a      	cmp	r2, r3
    24b6:	d100      	bne.n	24ba <memmove+0x2a>
    24b8:	bd10      	pop	{r4, pc}
    24ba:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    24be:	f803 1d01 	strb.w	r1, [r3, #-1]!
    24c2:	e7f7      	b.n	24b4 <memmove+0x24>

000024c4 <_free_r>:
    24c4:	b538      	push	{r3, r4, r5, lr}
    24c6:	4605      	mov	r5, r0
    24c8:	2900      	cmp	r1, #0
    24ca:	d043      	beq.n	2554 <_free_r+0x90>
    24cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    24d0:	1f0c      	subs	r4, r1, #4
    24d2:	2b00      	cmp	r3, #0
    24d4:	bfb8      	it	lt
    24d6:	18e4      	addlt	r4, r4, r3
    24d8:	f000 f8d0 	bl	267c <__malloc_lock>
    24dc:	4a1e      	ldr	r2, [pc, #120]	; (2558 <_free_r+0x94>)
    24de:	6813      	ldr	r3, [r2, #0]
    24e0:	4610      	mov	r0, r2
    24e2:	b933      	cbnz	r3, 24f2 <_free_r+0x2e>
    24e4:	6063      	str	r3, [r4, #4]
    24e6:	6014      	str	r4, [r2, #0]
    24e8:	4628      	mov	r0, r5
    24ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    24ee:	f000 b8cb 	b.w	2688 <__malloc_unlock>
    24f2:	42a3      	cmp	r3, r4
    24f4:	d90b      	bls.n	250e <_free_r+0x4a>
    24f6:	6821      	ldr	r1, [r4, #0]
    24f8:	1862      	adds	r2, r4, r1
    24fa:	4293      	cmp	r3, r2
    24fc:	bf01      	itttt	eq
    24fe:	681a      	ldreq	r2, [r3, #0]
    2500:	685b      	ldreq	r3, [r3, #4]
    2502:	1852      	addeq	r2, r2, r1
    2504:	6022      	streq	r2, [r4, #0]
    2506:	6063      	str	r3, [r4, #4]
    2508:	6004      	str	r4, [r0, #0]
    250a:	e7ed      	b.n	24e8 <_free_r+0x24>
    250c:	4613      	mov	r3, r2
    250e:	685a      	ldr	r2, [r3, #4]
    2510:	b10a      	cbz	r2, 2516 <_free_r+0x52>
    2512:	42a2      	cmp	r2, r4
    2514:	d9fa      	bls.n	250c <_free_r+0x48>
    2516:	6819      	ldr	r1, [r3, #0]
    2518:	1858      	adds	r0, r3, r1
    251a:	42a0      	cmp	r0, r4
    251c:	d10b      	bne.n	2536 <_free_r+0x72>
    251e:	6820      	ldr	r0, [r4, #0]
    2520:	4401      	add	r1, r0
    2522:	1858      	adds	r0, r3, r1
    2524:	4282      	cmp	r2, r0
    2526:	6019      	str	r1, [r3, #0]
    2528:	d1de      	bne.n	24e8 <_free_r+0x24>
    252a:	6810      	ldr	r0, [r2, #0]
    252c:	6852      	ldr	r2, [r2, #4]
    252e:	4401      	add	r1, r0
    2530:	6019      	str	r1, [r3, #0]
    2532:	605a      	str	r2, [r3, #4]
    2534:	e7d8      	b.n	24e8 <_free_r+0x24>
    2536:	d902      	bls.n	253e <_free_r+0x7a>
    2538:	230c      	movs	r3, #12
    253a:	602b      	str	r3, [r5, #0]
    253c:	e7d4      	b.n	24e8 <_free_r+0x24>
    253e:	6820      	ldr	r0, [r4, #0]
    2540:	1821      	adds	r1, r4, r0
    2542:	428a      	cmp	r2, r1
    2544:	bf01      	itttt	eq
    2546:	6811      	ldreq	r1, [r2, #0]
    2548:	6852      	ldreq	r2, [r2, #4]
    254a:	1809      	addeq	r1, r1, r0
    254c:	6021      	streq	r1, [r4, #0]
    254e:	6062      	str	r2, [r4, #4]
    2550:	605c      	str	r4, [r3, #4]
    2552:	e7c9      	b.n	24e8 <_free_r+0x24>
    2554:	bd38      	pop	{r3, r4, r5, pc}
    2556:	bf00      	nop
    2558:	2000828c 	.word	0x2000828c

0000255c <_malloc_r>:
    255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    255e:	1ccd      	adds	r5, r1, #3
    2560:	f025 0503 	bic.w	r5, r5, #3
    2564:	3508      	adds	r5, #8
    2566:	2d0c      	cmp	r5, #12
    2568:	bf38      	it	cc
    256a:	250c      	movcc	r5, #12
    256c:	2d00      	cmp	r5, #0
    256e:	4606      	mov	r6, r0
    2570:	db01      	blt.n	2576 <_malloc_r+0x1a>
    2572:	42a9      	cmp	r1, r5
    2574:	d903      	bls.n	257e <_malloc_r+0x22>
    2576:	230c      	movs	r3, #12
    2578:	6033      	str	r3, [r6, #0]
    257a:	2000      	movs	r0, #0
    257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    257e:	f000 f87d 	bl	267c <__malloc_lock>
    2582:	4921      	ldr	r1, [pc, #132]	; (2608 <_malloc_r+0xac>)
    2584:	680a      	ldr	r2, [r1, #0]
    2586:	4614      	mov	r4, r2
    2588:	b99c      	cbnz	r4, 25b2 <_malloc_r+0x56>
    258a:	4f20      	ldr	r7, [pc, #128]	; (260c <_malloc_r+0xb0>)
    258c:	683b      	ldr	r3, [r7, #0]
    258e:	b923      	cbnz	r3, 259a <_malloc_r+0x3e>
    2590:	4621      	mov	r1, r4
    2592:	4630      	mov	r0, r6
    2594:	f000 f862 	bl	265c <_sbrk_r>
    2598:	6038      	str	r0, [r7, #0]
    259a:	4629      	mov	r1, r5
    259c:	4630      	mov	r0, r6
    259e:	f000 f85d 	bl	265c <_sbrk_r>
    25a2:	1c43      	adds	r3, r0, #1
    25a4:	d123      	bne.n	25ee <_malloc_r+0x92>
    25a6:	230c      	movs	r3, #12
    25a8:	4630      	mov	r0, r6
    25aa:	6033      	str	r3, [r6, #0]
    25ac:	f000 f86c 	bl	2688 <__malloc_unlock>
    25b0:	e7e3      	b.n	257a <_malloc_r+0x1e>
    25b2:	6823      	ldr	r3, [r4, #0]
    25b4:	1b5b      	subs	r3, r3, r5
    25b6:	d417      	bmi.n	25e8 <_malloc_r+0x8c>
    25b8:	2b0b      	cmp	r3, #11
    25ba:	d903      	bls.n	25c4 <_malloc_r+0x68>
    25bc:	6023      	str	r3, [r4, #0]
    25be:	441c      	add	r4, r3
    25c0:	6025      	str	r5, [r4, #0]
    25c2:	e004      	b.n	25ce <_malloc_r+0x72>
    25c4:	6863      	ldr	r3, [r4, #4]
    25c6:	42a2      	cmp	r2, r4
    25c8:	bf0c      	ite	eq
    25ca:	600b      	streq	r3, [r1, #0]
    25cc:	6053      	strne	r3, [r2, #4]
    25ce:	4630      	mov	r0, r6
    25d0:	f000 f85a 	bl	2688 <__malloc_unlock>
    25d4:	f104 000b 	add.w	r0, r4, #11
    25d8:	1d23      	adds	r3, r4, #4
    25da:	f020 0007 	bic.w	r0, r0, #7
    25de:	1ac2      	subs	r2, r0, r3
    25e0:	d0cc      	beq.n	257c <_malloc_r+0x20>
    25e2:	1a1b      	subs	r3, r3, r0
    25e4:	50a3      	str	r3, [r4, r2]
    25e6:	e7c9      	b.n	257c <_malloc_r+0x20>
    25e8:	4622      	mov	r2, r4
    25ea:	6864      	ldr	r4, [r4, #4]
    25ec:	e7cc      	b.n	2588 <_malloc_r+0x2c>
    25ee:	1cc4      	adds	r4, r0, #3
    25f0:	f024 0403 	bic.w	r4, r4, #3
    25f4:	42a0      	cmp	r0, r4
    25f6:	d0e3      	beq.n	25c0 <_malloc_r+0x64>
    25f8:	1a21      	subs	r1, r4, r0
    25fa:	4630      	mov	r0, r6
    25fc:	f000 f82e 	bl	265c <_sbrk_r>
    2600:	3001      	adds	r0, #1
    2602:	d1dd      	bne.n	25c0 <_malloc_r+0x64>
    2604:	e7cf      	b.n	25a6 <_malloc_r+0x4a>
    2606:	bf00      	nop
    2608:	2000828c 	.word	0x2000828c
    260c:	20008290 	.word	0x20008290

00002610 <_realloc_r>:
    2610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2612:	4607      	mov	r7, r0
    2614:	4614      	mov	r4, r2
    2616:	460e      	mov	r6, r1
    2618:	b921      	cbnz	r1, 2624 <_realloc_r+0x14>
    261a:	4611      	mov	r1, r2
    261c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2620:	f7ff bf9c 	b.w	255c <_malloc_r>
    2624:	b922      	cbnz	r2, 2630 <_realloc_r+0x20>
    2626:	f7ff ff4d 	bl	24c4 <_free_r>
    262a:	4625      	mov	r5, r4
    262c:	4628      	mov	r0, r5
    262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2630:	f000 f830 	bl	2694 <_malloc_usable_size_r>
    2634:	42a0      	cmp	r0, r4
    2636:	d20f      	bcs.n	2658 <_realloc_r+0x48>
    2638:	4621      	mov	r1, r4
    263a:	4638      	mov	r0, r7
    263c:	f7ff ff8e 	bl	255c <_malloc_r>
    2640:	4605      	mov	r5, r0
    2642:	2800      	cmp	r0, #0
    2644:	d0f2      	beq.n	262c <_realloc_r+0x1c>
    2646:	4631      	mov	r1, r6
    2648:	4622      	mov	r2, r4
    264a:	f7ff fbfd 	bl	1e48 <memcpy>
    264e:	4631      	mov	r1, r6
    2650:	4638      	mov	r0, r7
    2652:	f7ff ff37 	bl	24c4 <_free_r>
    2656:	e7e9      	b.n	262c <_realloc_r+0x1c>
    2658:	4635      	mov	r5, r6
    265a:	e7e7      	b.n	262c <_realloc_r+0x1c>

0000265c <_sbrk_r>:
    265c:	b538      	push	{r3, r4, r5, lr}
    265e:	2300      	movs	r3, #0
    2660:	4c05      	ldr	r4, [pc, #20]	; (2678 <_sbrk_r+0x1c>)
    2662:	4605      	mov	r5, r0
    2664:	4608      	mov	r0, r1
    2666:	6023      	str	r3, [r4, #0]
    2668:	f000 f81e 	bl	26a8 <_sbrk>
    266c:	1c43      	adds	r3, r0, #1
    266e:	d102      	bne.n	2676 <_sbrk_r+0x1a>
    2670:	6823      	ldr	r3, [r4, #0]
    2672:	b103      	cbz	r3, 2676 <_sbrk_r+0x1a>
    2674:	602b      	str	r3, [r5, #0]
    2676:	bd38      	pop	{r3, r4, r5, pc}
    2678:	2000829c 	.word	0x2000829c

0000267c <__malloc_lock>:
    267c:	4801      	ldr	r0, [pc, #4]	; (2684 <__malloc_lock+0x8>)
    267e:	f000 b811 	b.w	26a4 <__retarget_lock_acquire_recursive>
    2682:	bf00      	nop
    2684:	200082a4 	.word	0x200082a4

00002688 <__malloc_unlock>:
    2688:	4801      	ldr	r0, [pc, #4]	; (2690 <__malloc_unlock+0x8>)
    268a:	f000 b80c 	b.w	26a6 <__retarget_lock_release_recursive>
    268e:	bf00      	nop
    2690:	200082a4 	.word	0x200082a4

00002694 <_malloc_usable_size_r>:
    2694:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2698:	1f18      	subs	r0, r3, #4
    269a:	2b00      	cmp	r3, #0
    269c:	bfbc      	itt	lt
    269e:	580b      	ldrlt	r3, [r1, r0]
    26a0:	18c0      	addlt	r0, r0, r3
    26a2:	4770      	bx	lr

000026a4 <__retarget_lock_acquire_recursive>:
    26a4:	4770      	bx	lr

000026a6 <__retarget_lock_release_recursive>:
    26a6:	4770      	bx	lr

000026a8 <_sbrk>:
    26a8:	4a04      	ldr	r2, [pc, #16]	; (26bc <_sbrk+0x14>)
    26aa:	4905      	ldr	r1, [pc, #20]	; (26c0 <_sbrk+0x18>)
    26ac:	6813      	ldr	r3, [r2, #0]
    26ae:	2b00      	cmp	r3, #0
    26b0:	bf08      	it	eq
    26b2:	460b      	moveq	r3, r1
    26b4:	4418      	add	r0, r3
    26b6:	6010      	str	r0, [r2, #0]
    26b8:	4618      	mov	r0, r3
    26ba:	4770      	bx	lr
    26bc:	20008294 	.word	0x20008294
    26c0:	200082b0 	.word	0x200082b0

000026c4 <_exit>:
    26c4:	e7fe      	b.n	26c4 <_exit>
    26c6:	bf00      	nop

000026c8 <_init>:
    26c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ca:	bf00      	nop

000026cc <_fini>:
    26cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ce:	bf00      	nop
    26d0:	70746553 	.word	0x70746553
    26d4:	20642520 	.word	0x20642520
    26d8:	646e6553 	.word	0x646e6553
    26dc:	000a0d20 	.word	0x000a0d20
    26e0:	70746553 	.word	0x70746553
    26e4:	20642520 	.word	0x20642520
    26e8:	65636552 	.word	0x65636552
    26ec:	0d657669 	.word	0x0d657669
    26f0:	0000000a 	.word	0x0000000a
    26f4:	70746553 	.word	0x70746553
    26f8:	20642520 	.word	0x20642520
    26fc:	65636552 	.word	0x65636552
    2700:	20657669 	.word	0x20657669
    2704:	5d58255b 	.word	0x5d58255b
    2708:	00000a0d 	.word	0x00000a0d
    270c:	20554353 	.word	0x20554353
    2710:	444d4352 	.word	0x444d4352
    2714:	5d58255b 	.word	0x5d58255b
    2718:	00000a20 	.word	0x00000a20
    271c:	20554353 	.word	0x20554353
    2720:	5b3a6463 	.word	0x5b3a6463
    2724:	2c5d5825 	.word	0x2c5d5825
    2728:	255b6176 	.word	0x255b6176
    272c:	000a5d58 	.word	0x000a5d58
    2730:	5f315f73 	.word	0x5f315f73
    2734:	5f313637 	.word	0x5f313637
    2738:	5f633269 	.word	0x5f633269
    273c:	5f633269 	.word	0x5f633269
    2740:	63207874 	.word	0x63207874
    2744:	20657361 	.word	0x20657361
    2748:	00000a0d 	.word	0x00000a0d
    274c:	72706565 	.word	0x72706565
    2750:	52206d6f 	.word	0x52206d6f
    2754:	20646165 	.word	0x20646165
    2758:	0000203a 	.word	0x0000203a
    275c:	002c5825 	.word	0x002c5825
    2760:	00000a0d 	.word	0x00000a0d
    2764:	72706565 	.word	0x72706565
    2768:	57206d6f 	.word	0x57206d6f
    276c:	65746972 	.word	0x65746972
    2770:	0000003a 	.word	0x0000003a
    2774:	74736574 	.word	0x74736574
    2778:	63326920 	.word	0x63326920
    277c:	6d6f6320 	.word	0x6d6f6320
    2780:	74656c70 	.word	0x74656c70
    2784:	0a0d2065 	.word	0x0a0d2065
    2788:	00000020 	.word	0x00000020
    278c:	5f315f73 	.word	0x5f315f73
    2790:	5f313637 	.word	0x5f313637
    2794:	5f633269 	.word	0x5f633269
    2798:	5f633269 	.word	0x5f633269
    279c:	63207874 	.word	0x63207874
    27a0:	20657361 	.word	0x20657361
    27a4:	706d6f63 	.word	0x706d6f63
    27a8:	6574656c 	.word	0x6574656c
    27ac:	0a0d2064 	.word	0x0a0d2064
    27b0:	00000000 	.word	0x00000000

000027b4 <_global_impure_ptr>:
    27b4:	2000800c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    27c4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    27d4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    27e4:	64636261                                 abcdef.
