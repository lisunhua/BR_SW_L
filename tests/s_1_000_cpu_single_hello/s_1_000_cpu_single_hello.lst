
.//s_1_000_cpu_single_hello.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20010000 	.word	0x20010000
       4:	00000201 	.word	0x00000201
       8:	00000249 	.word	0x00000249
       c:	0000024b 	.word	0x0000024b
      10:	0000024d 	.word	0x0000024d
      14:	0000024f 	.word	0x0000024f
      18:	00000251 	.word	0x00000251
	...
      2c:	00000253 	.word	0x00000253
      30:	00000255 	.word	0x00000255
      34:	00000000 	.word	0x00000000
      38:	00000257 	.word	0x00000257
      3c:	0000112d 	.word	0x0000112d
      40:	0000025b 	.word	0x0000025b
      44:	0000025d 	.word	0x0000025d
      48:	0000025f 	.word	0x0000025f
      4c:	00000261 	.word	0x00000261
      50:	00000263 	.word	0x00000263
      54:	00000265 	.word	0x00000265
      58:	00000267 	.word	0x00000267
      5c:	00000269 	.word	0x00000269
      60:	0000026b 	.word	0x0000026b
      64:	0000026d 	.word	0x0000026d
      68:	0000026f 	.word	0x0000026f
      6c:	00000271 	.word	0x00000271
      70:	00000273 	.word	0x00000273
      74:	00000275 	.word	0x00000275
      78:	00000277 	.word	0x00000277
      7c:	00000279 	.word	0x00000279
      80:	0000027b 	.word	0x0000027b
      84:	0000027d 	.word	0x0000027d
      88:	0000027f 	.word	0x0000027f
      8c:	00000281 	.word	0x00000281
      90:	00000283 	.word	0x00000283
      94:	00000285 	.word	0x00000285
      98:	00000287 	.word	0x00000287
      9c:	00000289 	.word	0x00000289
      a0:	0000028b 	.word	0x0000028b
      a4:	0000028d 	.word	0x0000028d
      a8:	0000028f 	.word	0x0000028f
      ac:	00000291 	.word	0x00000291
      b0:	00000293 	.word	0x00000293
      b4:	00000295 	.word	0x00000295
      b8:	00000297 	.word	0x00000297
      bc:	00000299 	.word	0x00000299
      c0:	0000029b 	.word	0x0000029b
      c4:	0000029d 	.word	0x0000029d
      c8:	0000029f 	.word	0x0000029f
      cc:	000002a1 	.word	0x000002a1
      d0:	000002a3 	.word	0x000002a3
      d4:	000002a5 	.word	0x000002a5
      d8:	000002a7 	.word	0x000002a7
      dc:	000002a9 	.word	0x000002a9
      e0:	000002ab 	.word	0x000002ab
      e4:	000002ad 	.word	0x000002ad
      e8:	000002af 	.word	0x000002af
      ec:	000002b1 	.word	0x000002b1
      f0:	000002b3 	.word	0x000002b3
      f4:	000002b5 	.word	0x000002b5
      f8:	000002b7 	.word	0x000002b7
      fc:	000002b9 	.word	0x000002b9
     100:	000002bb 	.word	0x000002bb
     104:	000002bd 	.word	0x000002bd
     108:	000002bf 	.word	0x000002bf
     10c:	000002c1 	.word	0x000002c1
     110:	000002c3 	.word	0x000002c3
     114:	000002c5 	.word	0x000002c5
     118:	000002c7 	.word	0x000002c7
     11c:	000002c9 	.word	0x000002c9
     120:	000002cb 	.word	0x000002cb
     124:	000002cd 	.word	0x000002cd
     128:	000002cf 	.word	0x000002cf
     12c:	000002d1 	.word	0x000002d1
     130:	000002d3 	.word	0x000002d3
     134:	000002d5 	.word	0x000002d5
     138:	000002d7 	.word	0x000002d7

0000013c <boot_flag>:
     13c:	52554e58 	.word	0x52554e58

00000140 <program_size>:
     140:	00000000 	.word	0x00000000

00000144 <ram_addr>:
     144:	00000000 	.word	0x00000000

00000148 <copy_unit_size>:
     148:	00000000 	.word	0x00000000

0000014c <cpu_clk_type>:
     14c:	03d09000 	.word	0x03d09000

00000150 <qspi_clk_type>:
     150:	03d09000 	.word	0x03d09000

00000154 <cache_cfg>:
     154:	00000061 	.word	0x00000061

00000158 <clock_divider>:
     158:	00000002 	.word	0x00000002

0000015c <frame_format_size>:
     15c:	0000001f 	.word	0x0000001f

00000160 <ssi_frame_format>:
     160:	00000000 	.word	0x00000000

00000164 <clock_phase>:
     164:	00000000 	.word	0x00000000

00000168 <clock_polarity>:
     168:	00000000 	.word	0x00000000

0000016c <transfer_mode>:
     16c:	00000003 	.word	0x00000003

00000170 <slave_output_enable>:
     170:	00000000 	.word	0x00000000

00000174 <operation_mode>:
     174:	00000000 	.word	0x00000000

00000178 <slave_select_toggle_en>:
     178:	00000000 	.word	0x00000000

0000017c <control_farme_size>:
     17c:	00000000 	.word	0x00000000

00000180 <spi_frame_format>:
     180:	00000001 	.word	0x00000001

00000184 <spi_hyperbus_en>:
     184:	00000000 	.word	0x00000000

00000188 <data_frames_number>:
     188:	00000000 	.word	0x00000000

0000018c <slaves_select>:
     18c:	00000001 	.word	0x00000001

00000190 <tx_fifo_threshold_level>:
     190:	00000000 	.word	0x00000000

00000194 <tx_fifo_start_fifo_level>:
     194:	00000000 	.word	0x00000000

00000198 <rx_fifo_threshold_level>:
     198:	00000000 	.word	0x00000000

0000019c <dma_rx_data_level>:
     19c:	00000000 	.word	0x00000000

000001a0 <dma_tx_data_level>:
     1a0:	00000000 	.word	0x00000000

000001a4 <unmask_interrupt>:
     1a4:	00000000 	.word	0x00000000

000001a8 <xip_spi_frame_format>:
     1a8:	00000001 	.word	0x00000001

000001ac <transfer_type>:
     1ac:	00000000 	.word	0x00000000

000001b0 <address_length>:
     1b0:	00000006 	.word	0x00000006

000001b4 <instruction_length>:
     1b4:	00000002 	.word	0x00000002

000001b8 <xip_mode_bit_en>:
     1b8:	00000000 	.word	0x00000000

000001bc <wait_cycles>:
     1bc:	00000008 	.word	0x00000008

000001c0 <xip_dfs_hsize_hburst_en>:
     1c0:	00000000 	.word	0x00000000

000001c4 <xip_spi_ddr_en>:
     1c4:	00000000 	.word	0x00000000

000001c8 <instruction_ddr_enable>:
     1c8:	00000000 	.word	0x00000000

000001cc <read_data_strobe_enable>:
     1cc:	00000000 	.word	0x00000000

000001d0 <xip_instruction_enable>:
     1d0:	00000001 	.word	0x00000001

000001d4 <xip_continuous_transfer_enable>:
     1d4:	00000000 	.word	0x00000000

000001d8 <xip_spi_hyerbus_format_enable>:
     1d8:	00000000 	.word	0x00000000

000001dc <xip_rxds_signaling_enable>:
     1dc:	00000000 	.word	0x00000000

000001e0 <xip_mode_bit_length>:
     1e0:	00000000 	.word	0x00000000

000001e4 <xip_pre_fetch_enable>:
     1e4:	00000000 	.word	0x00000000

000001e8 <xip_inst_transfer_opcode>:
     1e8:	0000003b 	.word	0x0000003b

000001ec <xip_wrap_transfer_opcode>:
     1ec:	00000000 	.word	0x00000000

000001f0 <slaves_enbale_mask>:
     1f0:	00000001 	.word	0x00000001

000001f4 <spi_clk_stretch_en>:
     1f4:	00000000 	.word	0x00000000

000001f8 <spi_data_mask_en>:
     1f8:	00000000 	.word	0x00000000

000001fc <xip_time_out>:
     1fc:	00000032 	.word	0x00000032

00000200 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     200:	490b      	ldr	r1, [pc, #44]	; (230 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     202:	4a0c      	ldr	r2, [pc, #48]	; (234 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     204:	4b0c      	ldr	r3, [pc, #48]	; (238 <Reset_Handler+0x38>)

    subs    r3, r2
     206:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     208:	dd03      	ble.n	212 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     20a:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     20c:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     20e:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     210:	dcfb      	bgt.n	20a <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     212:	490a      	ldr	r1, [pc, #40]	; (23c <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     214:	4a0a      	ldr	r2, [pc, #40]	; (240 <Reset_Handler+0x40>)

    movs    r0, 0
     216:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     218:	4291      	cmp	r1, r2
    itt    lt
     21a:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     21c:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     220:	e7fa      	blt.n	218 <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     222:	4808      	ldr	r0, [pc, #32]	; (244 <Reset_Handler+0x44>)
    blx     r0
     224:	4780      	blx	r0
#endif

    bl    main
     226:	f001 f873 	bl	1310 <main>
    bl    exit
     22a:	f001 f88b 	bl	1344 <exit>
     22e:	0000      	.short	0x0000
    ldr    r1, =__etext
     230:	00001c9b 	.word	0x00001c9b
    ldr    r2, =__data_start__
     234:	20008000 	.word	0x20008000
    ldr    r3, =__data_end__
     238:	2000806c 	.word	0x2000806c
    ldr r1, =__bss_start__
     23c:	2000806c 	.word	0x2000806c
    ldr r2, =__bss_end__
     240:	2000829c 	.word	0x2000829c
    ldr     r0,=SystemInit
     244:	000002f5 	.word	0x000002f5

00000248 <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     248:	e7fe      	b.n	248 <NMI_Handler>

0000024a <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     24a:	e7fe      	b.n	24a <HardFault_Handler>

0000024c <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     24c:	e7fe      	b.n	24c <MemManage_Handler>

0000024e <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     24e:	e7fe      	b.n	24e <BusFault_Handler>

00000250 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     250:	e7fe      	b.n	250 <UsageFault_Handler>

00000252 <SVC_Handler>:
    def_default_handler    SVC_Handler
     252:	e7fe      	b.n	252 <SVC_Handler>

00000254 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     254:	e7fe      	b.n	254 <DebugMon_Handler>

00000256 <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     256:	e7fe      	b.n	256 <PendSV_Handler>
    def_default_handler    SysTick_Handler
     258:	e7fe      	b.n	258 <PendSV_Handler+0x2>

0000025a <UART0_IRQHandler>:

/* IRQ Handlers */

    def_default_handler     UART0_IRQHandler 
     25a:	e7fe      	b.n	25a <UART0_IRQHandler>

0000025c <UART1_IRQHandler>:
    def_default_handler     UART1_IRQHandler        
     25c:	e7fe      	b.n	25c <UART1_IRQHandler>

0000025e <DMA_IRQHandler>:
    def_default_handler     DMA_IRQHandler          
     25e:	e7fe      	b.n	25e <DMA_IRQHandler>

00000260 <SPIM0_IRQHandler>:
    def_default_handler     SPIM0_IRQHandler        
     260:	e7fe      	b.n	260 <SPIM0_IRQHandler>

00000262 <SPIM1_IRQHandler>:
    def_default_handler     SPIM1_IRQHandler        
     262:	e7fe      	b.n	262 <SPIM1_IRQHandler>

00000264 <SPIS1_IRQHandler>:
    def_default_handler     SPIS1_IRQHandler        
     264:	e7fe      	b.n	264 <SPIS1_IRQHandler>

00000266 <I2C0_IRQHandler>:
    def_default_handler     I2C0_IRQHandler         
     266:	e7fe      	b.n	266 <I2C0_IRQHandler>

00000268 <I2C1_IRQHandler>:
    def_default_handler     I2C1_IRQHandler         
     268:	e7fe      	b.n	268 <I2C1_IRQHandler>

0000026a <I2SM_IRQHandler>:
    def_default_handler     I2SM_IRQHandler         
     26a:	e7fe      	b.n	26a <I2SM_IRQHandler>

0000026c <I2SS_IRQHandler>:
    def_default_handler     I2SS_IRQHandler         
     26c:	e7fe      	b.n	26c <I2SS_IRQHandler>

0000026e <RTC_IRQHandler>:
    def_default_handler     RTC_IRQHandler          
     26e:	e7fe      	b.n	26e <RTC_IRQHandler>

00000270 <QDEC_IRQHandler>:
    def_default_handler     QDEC_IRQHandler         
     270:	e7fe      	b.n	270 <QDEC_IRQHandler>

00000272 <TIMER0_IRQHandler>:
    def_default_handler     TIMER0_IRQHandler       
     272:	e7fe      	b.n	272 <TIMER0_IRQHandler>

00000274 <TIMER1_IRQHandler>:
    def_default_handler     TIMER1_IRQHandler       
     274:	e7fe      	b.n	274 <TIMER1_IRQHandler>

00000276 <TIMER2_IRQHandler>:
    def_default_handler     TIMER2_IRQHandler       
     276:	e7fe      	b.n	276 <TIMER2_IRQHandler>

00000278 <TIMER3_IRQHandler>:
    def_default_handler     TIMER3_IRQHandler       
     278:	e7fe      	b.n	278 <TIMER3_IRQHandler>

0000027a <TIMER4_IRQHandler>:
    def_default_handler     TIMER4_IRQHandler       
     27a:	e7fe      	b.n	27a <TIMER4_IRQHandler>

0000027c <TIMER5_IRQHandler>:
    def_default_handler     TIMER5_IRQHandler       
     27c:	e7fe      	b.n	27c <TIMER5_IRQHandler>

0000027e <TIMER6_IRQHandler>:
    def_default_handler     TIMER6_IRQHandler       
     27e:	e7fe      	b.n	27e <TIMER6_IRQHandler>

00000280 <TIMER7_IRQHandler>:
    def_default_handler     TIMER7_IRQHandler       
     280:	e7fe      	b.n	280 <TIMER7_IRQHandler>

00000282 <GPIO0_IRQHandler>:
    def_default_handler     GPIO0_IRQHandler        
     282:	e7fe      	b.n	282 <GPIO0_IRQHandler>

00000284 <GPIO1_IRQHandler>:
    def_default_handler     GPIO1_IRQHandler        
     284:	e7fe      	b.n	284 <GPIO1_IRQHandler>

00000286 <GPIO2_IRQHandler>:
    def_default_handler     GPIO2_IRQHandler        
     286:	e7fe      	b.n	286 <GPIO2_IRQHandler>

00000288 <GPIO3_IRQHandler>:
    def_default_handler     GPIO3_IRQHandler        
     288:	e7fe      	b.n	288 <GPIO3_IRQHandler>

0000028a <GPIO4_IRQHandler>:
    def_default_handler     GPIO4_IRQHandler        
     28a:	e7fe      	b.n	28a <GPIO4_IRQHandler>

0000028c <GPIO5_IRQHandler>:
    def_default_handler     GPIO5_IRQHandler        
     28c:	e7fe      	b.n	28c <GPIO5_IRQHandler>

0000028e <GPIO6_IRQHandler>:
    def_default_handler     GPIO6_IRQHandler        
     28e:	e7fe      	b.n	28e <GPIO6_IRQHandler>

00000290 <GPIO7_IRQHandler>:
    def_default_handler     GPIO7_IRQHandler        
     290:	e7fe      	b.n	290 <GPIO7_IRQHandler>

00000292 <GPIO8_IRQHandler>:
    def_default_handler     GPIO8_IRQHandler        
     292:	e7fe      	b.n	292 <GPIO8_IRQHandler>

00000294 <GPIO9_IRQHandler>:
    def_default_handler     GPIO9_IRQHandler        
     294:	e7fe      	b.n	294 <GPIO9_IRQHandler>

00000296 <GPIO10_IRQHandler>:
    def_default_handler     GPIO10_IRQHandler        
     296:	e7fe      	b.n	296 <GPIO10_IRQHandler>

00000298 <GPIO11_IRQHandler>:
    def_default_handler     GPIO11_IRQHandler       
     298:	e7fe      	b.n	298 <GPIO11_IRQHandler>

0000029a <GPIO12_IRQHandler>:
    def_default_handler     GPIO12_IRQHandler       
     29a:	e7fe      	b.n	29a <GPIO12_IRQHandler>

0000029c <GPIO13_IRQHandler>:
    def_default_handler     GPIO13_IRQHandler       
     29c:	e7fe      	b.n	29c <GPIO13_IRQHandler>

0000029e <GPIO14_IRQHandler>:
    def_default_handler     GPIO14_IRQHandler       
     29e:	e7fe      	b.n	29e <GPIO14_IRQHandler>

000002a0 <GPIO15_IRQHandler>:
    def_default_handler     GPIO15_IRQHandler       
     2a0:	e7fe      	b.n	2a0 <GPIO15_IRQHandler>

000002a2 <GPIO16_IRQHandler>:
    def_default_handler     GPIO16_IRQHandler       
     2a2:	e7fe      	b.n	2a2 <GPIO16_IRQHandler>

000002a4 <GPIO17_IRQHandler>:
    def_default_handler     GPIO17_IRQHandler       
     2a4:	e7fe      	b.n	2a4 <GPIO17_IRQHandler>

000002a6 <GPIO18_IRQHandler>:
    def_default_handler     GPIO18_IRQHandler       
     2a6:	e7fe      	b.n	2a6 <GPIO18_IRQHandler>

000002a8 <GPIO19_IRQHandler>:
    def_default_handler     GPIO19_IRQHandler       
     2a8:	e7fe      	b.n	2a8 <GPIO19_IRQHandler>

000002aa <GPIO20_IRQHandler>:
    def_default_handler     GPIO20_IRQHandler       
     2aa:	e7fe      	b.n	2aa <GPIO20_IRQHandler>

000002ac <GPIO21_IRQHandler>:
    def_default_handler     GPIO21_IRQHandler       
     2ac:	e7fe      	b.n	2ac <GPIO21_IRQHandler>

000002ae <GPIO22_IRQHandler>:
    def_default_handler     GPIO22_IRQHandler       
     2ae:	e7fe      	b.n	2ae <GPIO22_IRQHandler>

000002b0 <GPIO23_IRQHandler>:
    def_default_handler     GPIO23_IRQHandler       
     2b0:	e7fe      	b.n	2b0 <GPIO23_IRQHandler>

000002b2 <GPIO24_IRQHandler>:
    def_default_handler     GPIO24_IRQHandler       
     2b2:	e7fe      	b.n	2b2 <GPIO24_IRQHandler>

000002b4 <GPIO25_IRQHandler>:
    def_default_handler     GPIO25_IRQHandler       
     2b4:	e7fe      	b.n	2b4 <GPIO25_IRQHandler>

000002b6 <GPIO26_IRQHandler>:
    def_default_handler     GPIO26_IRQHandler       
     2b6:	e7fe      	b.n	2b6 <GPIO26_IRQHandler>

000002b8 <GPIO27_IRQHandler>:
    def_default_handler     GPIO27_IRQHandler       
     2b8:	e7fe      	b.n	2b8 <GPIO27_IRQHandler>

000002ba <GPIO28_IRQHandler>:
    def_default_handler     GPIO28_IRQHandler       
     2ba:	e7fe      	b.n	2ba <GPIO28_IRQHandler>

000002bc <GPIO29_IRQHandler>:
    def_default_handler     GPIO29_IRQHandler       
     2bc:	e7fe      	b.n	2bc <GPIO29_IRQHandler>

000002be <GPIO30_IRQHandler>:
    def_default_handler     GPIO30_IRQHandler       
     2be:	e7fe      	b.n	2be <GPIO30_IRQHandler>

000002c0 <GPIO31_IRQHandler>:
    def_default_handler     GPIO31_IRQHandler       
     2c0:	e7fe      	b.n	2c0 <GPIO31_IRQHandler>

000002c2 <rwbt_isr>:
    def_default_handler     rwbt_isr   			   
     2c2:	e7fe      	b.n	2c2 <rwbt_isr>

000002c4 <rwble_isr>:
    def_default_handler     rwble_isr   			   
     2c4:	e7fe      	b.n	2c4 <rwble_isr>

000002c6 <rwip_isr>:
    def_default_handler     rwip_isr				   
     2c6:	e7fe      	b.n	2c6 <rwip_isr>

000002c8 <pcm_isr>:
    def_default_handler     pcm_isr				   
     2c8:	e7fe      	b.n	2c8 <pcm_isr>

000002ca <apb2dpv_isr>:
    def_default_handler     apb2dpv_isr			   
     2ca:	e7fe      	b.n	2ca <apb2dpv_isr>

000002cc <bboscen_isr>:
    def_default_handler     bboscen_isr			   
     2cc:	e7fe      	b.n	2cc <bboscen_isr>

000002ce <RF_IRQHandler>:
    def_default_handler     RF_IRQHandler           
     2ce:	e7fe      	b.n	2ce <RF_IRQHandler>

000002d0 <USBSRT_IRQHandler>:
    def_default_handler     USBSRT_IRQHandler       
     2d0:	e7fe      	b.n	2d0 <USBSRT_IRQHandler>

000002d2 <USBSTO_IRQHandler>:
    def_default_handler     USBSTO_IRQHandler	   
     2d2:	e7fe      	b.n	2d2 <USBSTO_IRQHandler>

000002d4 <USB_IRQHandler>:
    def_default_handler     USB_IRQHandler          
     2d4:	e7fe      	b.n	2d4 <USB_IRQHandler>

000002d6 <info_init_get>:
    def_default_handler     info_init_get           
     2d6:	e7fe      	b.n	2d6 <info_init_get>

000002d8 <SystemCoreClockUpdate>:
  System Core Clock Variable
 *----------------------------------------------------------------------------*/
unsigned long int SystemCoreClock = SYSTEM_CLOCK;  /* System Core Clock Frequency      */

void SystemCoreClockUpdate(unsigned long int clock)
{
     2d8:	b480      	push	{r7}
     2da:	b083      	sub	sp, #12
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
    SystemCoreClock = clock;
     2e0:	4a03      	ldr	r2, [pc, #12]	; (2f0 <SystemCoreClockUpdate+0x18>)
     2e2:	687b      	ldr	r3, [r7, #4]
     2e4:	6013      	str	r3, [r2, #0]
}
     2e6:	bf00      	nop
     2e8:	370c      	adds	r7, #12
     2ea:	46bd      	mov	sp, r7
     2ec:	bc80      	pop	{r7}
     2ee:	4770      	bx	lr
     2f0:	20008000 	.word	0x20008000

000002f4 <SystemInit>:

void SystemInit (void)
{
     2f4:	b480      	push	{r7}
     2f6:	af00      	add	r7, sp, #0
    SystemCoreClock = SYSTEM_CLOCK;
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <SystemInit+0x14>)
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <SystemInit+0x18>)
     2fc:	601a      	str	r2, [r3, #0]
}
     2fe:	bf00      	nop
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20008000 	.word	0x20008000
     30c:	016e3600 	.word	0x016e3600

00000310 <SystemDevClockCtl>:

void SystemDevClockCtl(CKEnId_Type id, uint8_t enable)
{
     310:	b480      	push	{r7}
     312:	b083      	sub	sp, #12
     314:	af00      	add	r7, sp, #0
     316:	4603      	mov	r3, r0
     318:	460a      	mov	r2, r1
     31a:	71fb      	strb	r3, [r7, #7]
     31c:	4613      	mov	r3, r2
     31e:	71bb      	strb	r3, [r7, #6]
   if (enable) {
     320:	79bb      	ldrb	r3, [r7, #6]
     322:	2b00      	cmp	r3, #0
     324:	d00b      	beq.n	33e <SystemDevClockCtl+0x2e>
       SCU->CLK_EN |= 0x01ul << id;
     326:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     32a:	681a      	ldr	r2, [r3, #0]
     32c:	79fb      	ldrb	r3, [r7, #7]
     32e:	2101      	movs	r1, #1
     330:	fa01 f303 	lsl.w	r3, r1, r3
     334:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     338:	4313      	orrs	r3, r2
     33a:	600b      	str	r3, [r1, #0]
   }
   else {
       SCU->CLK_EN &= ~(0x01ul << id);
   }
}
     33c:	e00b      	b.n	356 <SystemDevClockCtl+0x46>
       SCU->CLK_EN &= ~(0x01ul << id);
     33e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     342:	681a      	ldr	r2, [r3, #0]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	2101      	movs	r1, #1
     348:	fa01 f303 	lsl.w	r3, r1, r3
     34c:	43db      	mvns	r3, r3
     34e:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
     352:	4013      	ands	r3, r2
     354:	600b      	str	r3, [r1, #0]
}
     356:	bf00      	nop
     358:	370c      	adds	r7, #12
     35a:	46bd      	mov	sp, r7
     35c:	bc80      	pop	{r7}
     35e:	4770      	bx	lr

00000360 <SystemDevRstCtl>:

void SystemDevRstCtl(SwRstId_Type id)
{
     360:	b480      	push	{r7}
     362:	b083      	sub	sp, #12
     364:	af00      	add	r7, sp, #0
     366:	4603      	mov	r3, r0
     368:	71fb      	strb	r3, [r7, #7]
    SCU->SW_RST = 1 << id;
     36a:	79fb      	ldrb	r3, [r7, #7]
     36c:	2201      	movs	r2, #1
     36e:	409a      	lsls	r2, r3
     370:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     374:	605a      	str	r2, [r3, #4]
    /* The SoC need us set it to zero when reset request is triggered! */
    SCU->SW_RST = 0 << id;
     376:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     37a:	2200      	movs	r2, #0
     37c:	605a      	str	r2, [r3, #4]
}
     37e:	bf00      	nop
     380:	370c      	adds	r7, #12
     382:	46bd      	mov	sp, r7
     384:	bc80      	pop	{r7}
     386:	4770      	bx	lr

00000388 <SystemPADConfig>:

void SystemPADConfig(PADId_Type pad_id, PADConfig_Type *config)
{
     388:	b480      	push	{r7}
     38a:	b083      	sub	sp, #12
     38c:	af00      	add	r7, sp, #0
     38e:	4603      	mov	r3, r0
     390:	6039      	str	r1, [r7, #0]
     392:	71fb      	strb	r3, [r7, #7]
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     394:	683b      	ldr	r3, [r7, #0]
     396:	781b      	ldrb	r3, [r3, #0]
     398:	f3c3 0300 	ubfx	r3, r3, #0, #1
     39c:	b2db      	uxtb	r3, r3
     39e:	f003 0201 	and.w	r2, r3, #1
                            (config->ie     &0x01) << 1 | 
     3a2:	683b      	ldr	r3, [r7, #0]
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
     3aa:	b2db      	uxtb	r3, r3
     3ac:	005b      	lsls	r3, r3, #1
     3ae:	f003 0302 	and.w	r3, r3, #2
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3b2:	431a      	orrs	r2, r3
                            (config->oen    &0x01) << 2 | 
     3b4:	683b      	ldr	r3, [r7, #0]
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
     3bc:	b2db      	uxtb	r3, r3
     3be:	009b      	lsls	r3, r3, #2
     3c0:	f003 0304 	and.w	r3, r3, #4
                            (config->ie     &0x01) << 1 | 
     3c4:	431a      	orrs	r2, r3
                            (config->ren    &0x01) << 3 | 
     3c6:	683b      	ldr	r3, [r7, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     3ce:	b2db      	uxtb	r3, r3
     3d0:	00db      	lsls	r3, r3, #3
     3d2:	f003 0308 	and.w	r3, r3, #8
                            (config->oen    &0x01) << 2 | 
     3d6:	431a      	orrs	r2, r3
                            (config->pad_ctl&0x07) << 4 );
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
     3e0:	b2db      	uxtb	r3, r3
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
                            (config->ren    &0x01) << 3 | 
     3e8:	ea42 0103 	orr.w	r1, r2, r3
    SCU->PAD_CFG[pad_id] = ((config->set    &0x01) << 0 | 
     3ec:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     3f0:	79fb      	ldrb	r3, [r7, #7]
     3f2:	331c      	adds	r3, #28
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	4413      	add	r3, r2
     3f8:	6059      	str	r1, [r3, #4]
}
     3fa:	bf00      	nop
     3fc:	370c      	adds	r7, #12
     3fe:	46bd      	mov	sp, r7
     400:	bc80      	pop	{r7}
     402:	4770      	bx	lr

00000404 <SystemIOConfigQspi>:


void SystemIOConfigQspi(IOConfig_Type *config)
{
     404:	b480      	push	{r7}
     406:	b085      	sub	sp, #20
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
    uint32_t cfg = SCU->IO_CONFIG ;
     40c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     412:	60fb      	str	r3, [r7, #12]
    cfg  &=~(0x07ul<<8|0x07ul<<11|0x07ul<<14|0x07ul<<17);
     414:	68fb      	ldr	r3, [r7, #12]
     416:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
     41a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
     41e:	60fb      	str	r3, [r7, #12]
    cfg  |= (	(config->d0&0x07) << 8  | 
     420:	687b      	ldr	r3, [r7, #4]
     422:	781b      	ldrb	r3, [r3, #0]
     424:	f3c3 0302 	ubfx	r3, r3, #0, #3
     428:	b2db      	uxtb	r3, r3
     42a:	021b      	lsls	r3, r3, #8
     42c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
                (config->d1&0x07) << 11 | 
     430:	687b      	ldr	r3, [r7, #4]
     432:	781b      	ldrb	r3, [r3, #0]
     434:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     438:	b2db      	uxtb	r3, r3
     43a:	02db      	lsls	r3, r3, #11
     43c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    cfg  |= (	(config->d0&0x07) << 8  | 
     440:	431a      	orrs	r2, r3
                (config->d2&0x07) << 14 | 
     442:	687b      	ldr	r3, [r7, #4]
     444:	881b      	ldrh	r3, [r3, #0]
     446:	f3c3 1382 	ubfx	r3, r3, #6, #3
     44a:	b2db      	uxtb	r3, r3
     44c:	039b      	lsls	r3, r3, #14
     44e:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
                (config->d1&0x07) << 11 | 
     452:	431a      	orrs	r2, r3
                (config->d3&0x07) << 17 );	
     454:	687b      	ldr	r3, [r7, #4]
     456:	785b      	ldrb	r3, [r3, #1]
     458:	f3c3 0342 	ubfx	r3, r3, #1, #3
     45c:	b2db      	uxtb	r3, r3
     45e:	045b      	lsls	r3, r3, #17
     460:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
                (config->d2&0x07) << 14 | 
     464:	4313      	orrs	r3, r2
     466:	461a      	mov	r2, r3
    cfg  |= (	(config->d0&0x07) << 8  | 
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	4313      	orrs	r3, r2
     46c:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     46e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     472:	68fb      	ldr	r3, [r7, #12]
     474:	6293      	str	r3, [r2, #40]	; 0x28
}
     476:	bf00      	nop
     478:	3714      	adds	r7, #20
     47a:	46bd      	mov	sp, r7
     47c:	bc80      	pop	{r7}
     47e:	4770      	bx	lr

00000480 <SystemIOConfigQspiOne>:


void SystemIOConfigQspiOne(uint32_t config,PadIoConfig_Type io)
{
     480:	b480      	push	{r7}
     482:	b085      	sub	sp, #20
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	460b      	mov	r3, r1
     48a:	70fb      	strb	r3, [r7, #3]
    uint32_t cfg = SCU->IO_CONFIG ;
     48c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     492:	60fb      	str	r3, [r7, #12]
    if(io>3 || config >5)
     494:	78fb      	ldrb	r3, [r7, #3]
     496:	2b03      	cmp	r3, #3
     498:	d820      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	2b05      	cmp	r3, #5
     49e:	d81d      	bhi.n	4dc <SystemIOConfigQspiOne+0x5c>
        return ;
        
    cfg &=~(0x7ul<<(8 + 3*io));
     4a0:	78fa      	ldrb	r2, [r7, #3]
     4a2:	4613      	mov	r3, r2
     4a4:	005b      	lsls	r3, r3, #1
     4a6:	4413      	add	r3, r2
     4a8:	3308      	adds	r3, #8
     4aa:	2207      	movs	r2, #7
     4ac:	fa02 f303 	lsl.w	r3, r2, r3
     4b0:	43db      	mvns	r3, r3
     4b2:	68fa      	ldr	r2, [r7, #12]
     4b4:	4013      	ands	r3, r2
     4b6:	60fb      	str	r3, [r7, #12]
    cfg  |= ((config&0x07) << (8 + 3*io));	
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	f003 0107 	and.w	r1, r3, #7
     4be:	78fa      	ldrb	r2, [r7, #3]
     4c0:	4613      	mov	r3, r2
     4c2:	005b      	lsls	r3, r3, #1
     4c4:	4413      	add	r3, r2
     4c6:	3308      	adds	r3, #8
     4c8:	fa01 f303 	lsl.w	r3, r1, r3
     4cc:	68fa      	ldr	r2, [r7, #12]
     4ce:	4313      	orrs	r3, r2
     4d0:	60fb      	str	r3, [r7, #12]
    SCU->IO_CONFIG = cfg ;
     4d2:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     4d6:	68fb      	ldr	r3, [r7, #12]
     4d8:	6293      	str	r3, [r2, #40]	; 0x28
     4da:	e000      	b.n	4de <SystemIOConfigQspiOne+0x5e>
        return ;
     4dc:	bf00      	nop
}
     4de:	3714      	adds	r7, #20
     4e0:	46bd      	mov	sp, r7
     4e2:	bc80      	pop	{r7}
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop

000004e8 <cm_printf>:
//    return ch;
//}


int cm_printf(const char *fmt, ...)
{
     4e8:	b40f      	push	{r0, r1, r2, r3}
     4ea:	b580      	push	{r7, lr}
     4ec:	b082      	sub	sp, #8
     4ee:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
     4f0:	f107 0314 	add.w	r3, r7, #20
     4f4:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
     4f6:	683a      	ldr	r2, [r7, #0]
     4f8:	6939      	ldr	r1, [r7, #16]
     4fa:	4809      	ldr	r0, [pc, #36]	; (520 <cm_printf+0x38>)
     4fc:	f000 ff62 	bl	13c4 <vsiprintf>
     500:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_tmp_buf, r);
     502:	687b      	ldr	r3, [r7, #4]
     504:	b29b      	uxth	r3, r3
     506:	461a      	mov	r2, r3
     508:	4905      	ldr	r1, [pc, #20]	; (520 <cm_printf+0x38>)
     50a:	4806      	ldr	r0, [pc, #24]	; (524 <cm_printf+0x3c>)
     50c:	f000 f986 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
     510:	687b      	ldr	r3, [r7, #4]
}
     512:	4618      	mov	r0, r3
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     51c:	b004      	add	sp, #16
     51e:	4770      	bx	lr
     520:	2000806c 	.word	0x2000806c
     524:	90002000 	.word	0x90002000

00000528 <at_eventInd>:

int at_eventInd(const char *fmt, ...)
{
     528:	b40f      	push	{r0, r1, r2, r3}
     52a:	b580      	push	{r7, lr}
     52c:	b082      	sub	sp, #8
     52e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     530:	f107 0314 	add.w	r3, r7, #20
     534:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     536:	683a      	ldr	r2, [r7, #0]
     538:	6939      	ldr	r1, [r7, #16]
     53a:	4809      	ldr	r0, [pc, #36]	; (560 <at_eventInd+0x38>)
     53c:	f000 ff42 	bl	13c4 <vsiprintf>
     540:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART0, s_dbg_tmp_buf, r);
     542:	687b      	ldr	r3, [r7, #4]
     544:	b29b      	uxth	r3, r3
     546:	461a      	mov	r2, r3
     548:	4905      	ldr	r1, [pc, #20]	; (560 <at_eventInd+0x38>)
     54a:	4806      	ldr	r0, [pc, #24]	; (564 <at_eventInd+0x3c>)
     54c:	f000 f966 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     550:	687b      	ldr	r3, [r7, #4]
}
     552:	4618      	mov	r0, r3
     554:	3708      	adds	r7, #8
     556:	46bd      	mov	sp, r7
     558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     55c:	b004      	add	sp, #16
     55e:	4770      	bx	lr
     560:	200080ec 	.word	0x200080ec
     564:	90002000 	.word	0x90002000

00000568 <cm_printf_Uart1>:

int cm_printf_Uart1(const char *fmt, ...)
{
     568:	b40f      	push	{r0, r1, r2, r3}
     56a:	b580      	push	{r7, lr}
     56c:	b082      	sub	sp, #8
     56e:	af00      	add	r7, sp, #0
    static unsigned char s_dbg_tmp_buf[128];
    int r;
    va_list arglist;
    va_start(arglist, fmt);
     570:	f107 0314 	add.w	r3, r7, #20
     574:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_dbg_tmp_buf, fmt, arglist);
     576:	683a      	ldr	r2, [r7, #0]
     578:	6939      	ldr	r1, [r7, #16]
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <cm_printf_Uart1+0x38>)
     57c:	f000 ff22 	bl	13c4 <vsiprintf>
     580:	6078      	str	r0, [r7, #4]
    UART_WriteData(UART1, s_dbg_tmp_buf, r);
     582:	687b      	ldr	r3, [r7, #4]
     584:	b29b      	uxth	r3, r3
     586:	461a      	mov	r2, r3
     588:	4905      	ldr	r1, [pc, #20]	; (5a0 <cm_printf_Uart1+0x38>)
     58a:	4806      	ldr	r0, [pc, #24]	; (5a4 <cm_printf_Uart1+0x3c>)
     58c:	f000 f946 	bl	81c <UART_WriteData>
    va_end(arglist);
    return r;
     590:	687b      	ldr	r3, [r7, #4]
}
     592:	4618      	mov	r0, r3
     594:	3708      	adds	r7, #8
     596:	46bd      	mov	sp, r7
     598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     59c:	b004      	add	sp, #16
     59e:	4770      	bx	lr
     5a0:	2000816c 	.word	0x2000816c
     5a4:	90002800 	.word	0x90002800

000005a8 <UART_DeInit>:

UART_write_handle  UWrite_handle;


void UART_DeInit(UART_TypeDef *UARTx)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
    #if  defined(BR002)||defined(BR003)
    if (UARTx == UART0) {
     5b0:	687b      	ldr	r3, [r7, #4]
     5b2:	4a0c      	ldr	r2, [pc, #48]	; (5e4 <UART_DeInit+0x3c>)
     5b4:	4293      	cmp	r3, r2
     5b6:	d108      	bne.n	5ca <UART_DeInit+0x22>
        SystemDevRstCtl(UART0_SwRst);
     5b8:	2004      	movs	r0, #4
     5ba:	f7ff fed1 	bl	360 <SystemDevRstCtl>
        memset(UART0,0,sizeof(UART_TypeDef));
     5be:	22d0      	movs	r2, #208	; 0xd0
     5c0:	2100      	movs	r1, #0
     5c2:	4808      	ldr	r0, [pc, #32]	; (5e4 <UART_DeInit+0x3c>)
     5c4:	f000 fee0 	bl	1388 <memset>
    else {
        SystemDevRstCtl(UART1_PCLK_SwRst);
        memset(UART1,0,sizeof(UART_TypeDef));
    }
    #endif
}
     5c8:	e007      	b.n	5da <UART_DeInit+0x32>
        SystemDevRstCtl(UART1_SwRst);
     5ca:	2005      	movs	r0, #5
     5cc:	f7ff fec8 	bl	360 <SystemDevRstCtl>
        memset(UART1,0,sizeof(UART_TypeDef));
     5d0:	22d0      	movs	r2, #208	; 0xd0
     5d2:	2100      	movs	r1, #0
     5d4:	4804      	ldr	r0, [pc, #16]	; (5e8 <UART_DeInit+0x40>)
     5d6:	f000 fed7 	bl	1388 <memset>
}
     5da:	bf00      	nop
     5dc:	3708      	adds	r7, #8
     5de:	46bd      	mov	sp, r7
     5e0:	bd80      	pop	{r7, pc}
     5e2:	bf00      	nop
     5e4:	90002000 	.word	0x90002000
     5e8:	90002800 	.word	0x90002800

000005ec <UART_Init>:

void UART_Init(UART_TypeDef *UARTx, UART_InitInfo_Type *UART_InitStruct)
{
     5ec:	b480      	push	{r7}
     5ee:	b085      	sub	sp, #20
     5f0:	af00      	add	r7, sp, #0
     5f2:	6078      	str	r0, [r7, #4]
     5f4:	6039      	str	r1, [r7, #0]
    uint32_t BR_div;
    uint32_t fcr_cfg = 0;
     5f6:	2300      	movs	r3, #0
     5f8:	60fb      	str	r3, [r7, #12]
    
    if (UARTx->USR & 0x01) {
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
     5fe:	f003 0301 	and.w	r3, r3, #1
     602:	2b00      	cmp	r3, #0
     604:	f040 80dc 	bne.w	7c0 <UART_Init+0x1d4>
        //UART is busy now, we can init it!
        return;
    }
    UARTx->IER &= ~(0xFF);
     608:	687b      	ldr	r3, [r7, #4]
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     610:	687b      	ldr	r3, [r7, #4]
     612:	605a      	str	r2, [r3, #4]
    UARTx->LCR |= 0x01 << 7; //Enable the DLL/DLH to writable
     614:	687b      	ldr	r3, [r7, #4]
     616:	68db      	ldr	r3, [r3, #12]
     618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	60da      	str	r2, [r3, #12]
    BR_div = (SystemCoreClock/UART_InitStruct->UART_BaudRate);
     620:	4b6a      	ldr	r3, [pc, #424]	; (7cc <UART_Init+0x1e0>)
     622:	681a      	ldr	r2, [r3, #0]
     624:	683b      	ldr	r3, [r7, #0]
     626:	681b      	ldr	r3, [r3, #0]
     628:	fbb2 f3f3 	udiv	r3, r2, r3
     62c:	60bb      	str	r3, [r7, #8]

    UARTx->DLL =  ((BR_div>>4 ) & 0xFF);
     62e:	68bb      	ldr	r3, [r7, #8]
     630:	091b      	lsrs	r3, r3, #4
     632:	b2da      	uxtb	r2, r3
     634:	687b      	ldr	r3, [r7, #4]
     636:	601a      	str	r2, [r3, #0]
    UARTx->DLH =  ((BR_div>>12) & 0xFF);
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	0b1b      	lsrs	r3, r3, #12
     63c:	b2da      	uxtb	r2, r3
     63e:	687b      	ldr	r3, [r7, #4]
     640:	605a      	str	r2, [r3, #4]
    UARTx->DLF =  ((BR_div) & 0xf);
     642:	68bb      	ldr	r3, [r7, #8]
     644:	f003 020f 	and.w	r2, r3, #15
     648:	687b      	ldr	r3, [r7, #4]
     64a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable
     64e:	687b      	ldr	r3, [r7, #4]
     650:	68db      	ldr	r3, [r3, #12]
     652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
     656:	687b      	ldr	r3, [r7, #4]
     658:	60da      	str	r2, [r3, #12]
    UARTx->LCR &= ~(0xFF);
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	68db      	ldr	r3, [r3, #12]
     65e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     662:	687b      	ldr	r3, [r7, #4]
     664:	60da      	str	r2, [r3, #12]
    UARTx->LCR_EXT &= ~(0xFF);
     666:	687b      	ldr	r3, [r7, #4]
     668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
     66c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     670:	687b      	ldr	r3, [r7, #4]
     672:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if (UART_InitStruct->UART_WordLength == UART_WL_9BITS) {
     676:	683b      	ldr	r3, [r7, #0]
     678:	889b      	ldrh	r3, [r3, #4]
     67a:	2b04      	cmp	r3, #4
     67c:	d006      	beq.n	68c <UART_Init+0xa0>
        //Supported  ???
        //UARTx->LCR_EXT |= 0x01 << 0;
    }
    else {
        UARTx->LCR |= UART_InitStruct->UART_WordLength;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	68db      	ldr	r3, [r3, #12]
     682:	683a      	ldr	r2, [r7, #0]
     684:	8892      	ldrh	r2, [r2, #4]
     686:	431a      	orrs	r2, r3
     688:	687b      	ldr	r3, [r7, #4]
     68a:	60da      	str	r2, [r3, #12]
    }
    UARTx->LCR |= UART_InitStruct->UART_StopBits << 2;
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	68db      	ldr	r3, [r3, #12]
     690:	683a      	ldr	r2, [r7, #0]
     692:	88d2      	ldrh	r2, [r2, #6]
     694:	0092      	lsls	r2, r2, #2
     696:	431a      	orrs	r2, r3
     698:	687b      	ldr	r3, [r7, #4]
     69a:	60da      	str	r2, [r3, #12]
    if (UART_InitStruct->UART_ParityMode != UART_PM_NONE) {
     69c:	683b      	ldr	r3, [r7, #0]
     69e:	891b      	ldrh	r3, [r3, #8]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d025      	beq.n	6f0 <UART_Init+0x104>
        UARTx->LCR |= 0x01 << 3;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	68db      	ldr	r3, [r3, #12]
     6a8:	f043 0208 	orr.w	r2, r3, #8
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	60da      	str	r2, [r3, #12]
        //For ODD parity mode, the EPS/Stick Parity have be cleard.
        if (UART_InitStruct->UART_ParityMode == UART_PM_EVEN) {
     6b0:	683b      	ldr	r3, [r7, #0]
     6b2:	891b      	ldrh	r3, [r3, #8]
     6b4:	2b02      	cmp	r3, #2
     6b6:	d106      	bne.n	6c6 <UART_Init+0xda>
            UARTx->LCR |= 0x01 << 4;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	68db      	ldr	r3, [r3, #12]
     6bc:	f043 0210 	orr.w	r2, r3, #16
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	60da      	str	r2, [r3, #12]
     6c4:	e014      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG0) {
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	891b      	ldrh	r3, [r3, #8]
     6ca:	2b03      	cmp	r3, #3
     6cc:	d106      	bne.n	6dc <UART_Init+0xf0>
            UARTx->LCR |= 0x03 << 4;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	68db      	ldr	r3, [r3, #12]
     6d2:	f043 0230 	orr.w	r2, r3, #48	; 0x30
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	60da      	str	r2, [r3, #12]
     6da:	e009      	b.n	6f0 <UART_Init+0x104>
        }
        else if (UART_InitStruct->UART_ParityMode == UART_PM_STICK_LOG1) {
     6dc:	683b      	ldr	r3, [r7, #0]
     6de:	891b      	ldrh	r3, [r3, #8]
     6e0:	2b04      	cmp	r3, #4
     6e2:	d105      	bne.n	6f0 <UART_Init+0x104>
            UARTx->LCR |= 0x02 << 4;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	68db      	ldr	r3, [r3, #12]
     6e8:	f043 0220 	orr.w	r2, r3, #32
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	60da      	str	r2, [r3, #12]
        }
    }
    UARTx->MCR &= ~(0xFF);
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	691b      	ldr	r3, [r3, #16]
     6f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	611a      	str	r2, [r3, #16]
    if (UART_InitStruct->UART_HardwareFlowControl      == UART_FC_DTRDSR) 
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	895b      	ldrh	r3, [r3, #10]
     700:	2b01      	cmp	r3, #1
     702:	d106      	bne.n	712 <UART_Init+0x126>
         UARTx->MCR |= 0x01;
     704:	687b      	ldr	r3, [r7, #4]
     706:	691b      	ldr	r3, [r3, #16]
     708:	f043 0201 	orr.w	r2, r3, #1
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	611a      	str	r2, [r3, #16]
     710:	e02a      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS) 
     712:	683b      	ldr	r3, [r7, #0]
     714:	895b      	ldrh	r3, [r3, #10]
     716:	2b02      	cmp	r3, #2
     718:	d106      	bne.n	728 <UART_Init+0x13c>
         UARTx->MCR |= 0x02;
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	f043 0202 	orr.w	r2, r3, #2
     722:	687b      	ldr	r3, [r7, #4]
     724:	611a      	str	r2, [r3, #16]
     726:	e01f      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS) 
     728:	683b      	ldr	r3, [r7, #0]
     72a:	895b      	ldrh	r3, [r3, #10]
     72c:	2b03      	cmp	r3, #3
     72e:	d106      	bne.n	73e <UART_Init+0x152>
        UARTx->MCR  |= 0x22;
     730:	687b      	ldr	r3, [r7, #4]
     732:	691b      	ldr	r3, [r3, #16]
     734:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     738:	687b      	ldr	r3, [r7, #4]
     73a:	611a      	str	r2, [r3, #16]
     73c:	e014      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_RTSCTS_DTRDSR) 
     73e:	683b      	ldr	r3, [r7, #0]
     740:	895b      	ldrh	r3, [r3, #10]
     742:	2b04      	cmp	r3, #4
     744:	d106      	bne.n	754 <UART_Init+0x168>
        UARTx->MCR  |= 0x3;
     746:	687b      	ldr	r3, [r7, #4]
     748:	691b      	ldr	r3, [r3, #16]
     74a:	f043 0203 	orr.w	r2, r3, #3
     74e:	687b      	ldr	r3, [r7, #4]
     750:	611a      	str	r2, [r3, #16]
     752:	e009      	b.n	768 <UART_Init+0x17c>
    else if (UART_InitStruct->UART_HardwareFlowControl == UART_FC_AUTO_RTSCTS_DTRDSR) 
     754:	683b      	ldr	r3, [r7, #0]
     756:	895b      	ldrh	r3, [r3, #10]
     758:	2b05      	cmp	r3, #5
     75a:	d105      	bne.n	768 <UART_Init+0x17c>
        UARTx->MCR  |= 0x23;
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	691b      	ldr	r3, [r3, #16]
     760:	f043 0223 	orr.w	r2, r3, #35	; 0x23
     764:	687b      	ldr	r3, [r7, #4]
     766:	611a      	str	r2, [r3, #16]
    
    UARTx->FCR &= ~(0xFF);
     768:	687b      	ldr	r3, [r7, #4]
     76a:	689b      	ldr	r3, [r3, #8]
     76c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
     770:	687b      	ldr	r3, [r7, #4]
     772:	609a      	str	r2, [r3, #8]
    if (UART_InitStruct->UART_DMAMode == UART_DM_MODE_1) 
     774:	683b      	ldr	r3, [r7, #0]
     776:	899b      	ldrh	r3, [r3, #12]
     778:	2b01      	cmp	r3, #1
     77a:	d103      	bne.n	784 <UART_Init+0x198>
        fcr_cfg |= 0x01 << 3;
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	f043 0308 	orr.w	r3, r3, #8
     782:	60fb      	str	r3, [r7, #12]
    
    if (UART_InitStruct->UART_FIFOMode == UART_FM_ENABLE) {
     784:	683b      	ldr	r3, [r7, #0]
     786:	89db      	ldrh	r3, [r3, #14]
     788:	2b01      	cmp	r3, #1
     78a:	d10d      	bne.n	7a8 <UART_Init+0x1bc>
        
        fcr_cfg |= UART_InitStruct->UART_RX_FIFOTriggerMode << 6;
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	8a5b      	ldrh	r3, [r3, #18]
     790:	019b      	lsls	r3, r3, #6
     792:	461a      	mov	r2, r3
     794:	68fb      	ldr	r3, [r7, #12]
     796:	4313      	orrs	r3, r2
     798:	60fb      	str	r3, [r7, #12]
        fcr_cfg |= UART_InitStruct->UART_TX_FIFOTriggerMode << 4;       
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	8a1b      	ldrh	r3, [r3, #16]
     79e:	011b      	lsls	r3, r3, #4
     7a0:	461a      	mov	r2, r3
     7a2:	68fb      	ldr	r3, [r7, #12]
     7a4:	4313      	orrs	r3, r2
     7a6:	60fb      	str	r3, [r7, #12]
    }
    
    fcr_cfg |= 0x03 << 1; //Reset XMIT/RCVR FIFO
     7a8:	68fb      	ldr	r3, [r7, #12]
     7aa:	f043 0306 	orr.w	r3, r3, #6
     7ae:	60fb      	str	r3, [r7, #12]
    fcr_cfg |= 0x01 << 0;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	f043 0301 	orr.w	r3, r3, #1
     7b6:	60fb      	str	r3, [r7, #12]
    UARTx->FCR = fcr_cfg;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	68fa      	ldr	r2, [r7, #12]
     7bc:	609a      	str	r2, [r3, #8]
     7be:	e000      	b.n	7c2 <UART_Init+0x1d6>
        return;
     7c0:	bf00      	nop
}
     7c2:	3714      	adds	r7, #20
     7c4:	46bd      	mov	sp, r7
     7c6:	bc80      	pop	{r7}
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop
     7cc:	20008000 	.word	0x20008000

000007d0 <UART_InterruptSet>:

void UART_InterruptSet(UART_TypeDef *UARTx, uint16_t UART_IntMask)
{
     7d0:	b480      	push	{r7}
     7d2:	b083      	sub	sp, #12
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
     7d8:	460b      	mov	r3, r1
     7da:	807b      	strh	r3, [r7, #2]
    // UARTx->LCR &= ~(0x01 << 7); //Disable the DLL/DLH to writable    
    UARTx->IER &= ~UART_IntMask;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	685b      	ldr	r3, [r3, #4]
     7e0:	887a      	ldrh	r2, [r7, #2]
     7e2:	43d2      	mvns	r2, r2
     7e4:	401a      	ands	r2, r3
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	605a      	str	r2, [r3, #4]
    UARTx->IER |= UART_IntMask;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	685a      	ldr	r2, [r3, #4]
     7ee:	887b      	ldrh	r3, [r7, #2]
     7f0:	431a      	orrs	r2, r3
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	605a      	str	r2, [r3, #4]
}
     7f6:	bf00      	nop
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	bc80      	pop	{r7}
     7fe:	4770      	bx	lr

00000800 <UART_WriteByte>:

void UART_WriteByte(UART_TypeDef *UARTx, uint8_t byte)
{
     800:	b480      	push	{r7}
     802:	b083      	sub	sp, #12
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	460b      	mov	r3, r1
     80a:	70fb      	strb	r3, [r7, #3]
    UARTx->THR = byte;
     80c:	78fa      	ldrb	r2, [r7, #3]
     80e:	687b      	ldr	r3, [r7, #4]
     810:	601a      	str	r2, [r3, #0]
}
     812:	bf00      	nop
     814:	370c      	adds	r7, #12
     816:	46bd      	mov	sp, r7
     818:	bc80      	pop	{r7}
     81a:	4770      	bx	lr

0000081c <UART_WriteData>:

void UART_WriteData(UART_TypeDef *UARTx, uint8_t *data, uint16_t length)
{
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	60f8      	str	r0, [r7, #12]
     824:	60b9      	str	r1, [r7, #8]
     826:	4613      	mov	r3, r2
     828:	80fb      	strh	r3, [r7, #6]
    while (length--) {
     82a:	e013      	b.n	854 <UART_WriteData+0x38>
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
        {
            if(UWrite_handle)
     82c:	4b0e      	ldr	r3, [pc, #56]	; (868 <UART_WriteData+0x4c>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2b00      	cmp	r3, #0
     832:	d002      	beq.n	83a <UART_WriteData+0x1e>
                UWrite_handle();
     834:	4b0c      	ldr	r3, [pc, #48]	; (868 <UART_WriteData+0x4c>)
     836:	681b      	ldr	r3, [r3, #0]
     838:	4798      	blx	r3
        while (!(UARTx->LSR & UART_LSR_BIT_THRE))
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	695b      	ldr	r3, [r3, #20]
     83e:	f003 0320 	and.w	r3, r3, #32
     842:	2b00      	cmp	r3, #0
     844:	d0f2      	beq.n	82c <UART_WriteData+0x10>
        };
        UARTx->THR = *data++;
     846:	68bb      	ldr	r3, [r7, #8]
     848:	1c5a      	adds	r2, r3, #1
     84a:	60ba      	str	r2, [r7, #8]
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	461a      	mov	r2, r3
     850:	68fb      	ldr	r3, [r7, #12]
     852:	601a      	str	r2, [r3, #0]
    while (length--) {
     854:	88fb      	ldrh	r3, [r7, #6]
     856:	1e5a      	subs	r2, r3, #1
     858:	80fa      	strh	r2, [r7, #6]
     85a:	2b00      	cmp	r3, #0
     85c:	d1ed      	bne.n	83a <UART_WriteData+0x1e>
    }
}
     85e:	bf00      	nop
     860:	3710      	adds	r7, #16
     862:	46bd      	mov	sp, r7
     864:	bd80      	pop	{r7, pc}
     866:	bf00      	nop
     868:	20008288 	.word	0x20008288

0000086c <UART_SetUWriteHandle>:

void UART_SetUWriteHandle(UART_write_handle handle)
{
     86c:	b480      	push	{r7}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
    UWrite_handle = handle;
     874:	4a03      	ldr	r2, [pc, #12]	; (884 <UART_SetUWriteHandle+0x18>)
     876:	687b      	ldr	r3, [r7, #4]
     878:	6013      	str	r3, [r2, #0]
}
     87a:	bf00      	nop
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr
     884:	20008288 	.word	0x20008288

00000888 <UART_ReadByte>:

uint8_t UART_ReadByte(UART_TypeDef *UARTx)
{
     888:	b480      	push	{r7}
     88a:	b083      	sub	sp, #12
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
    return (UARTx->RBR & 0xFF);
     890:	687b      	ldr	r3, [r7, #4]
     892:	681b      	ldr	r3, [r3, #0]
     894:	b2db      	uxtb	r3, r3
}
     896:	4618      	mov	r0, r3
     898:	370c      	adds	r7, #12
     89a:	46bd      	mov	sp, r7
     89c:	bc80      	pop	{r7}
     89e:	4770      	bx	lr

000008a0 <UART_AutoFlow>:

void  UART_AutoFlow(UART_TypeDef *UARTx,bool En)
{
     8a0:	b480      	push	{r7}
     8a2:	b083      	sub	sp, #12
     8a4:	af00      	add	r7, sp, #0
     8a6:	6078      	str	r0, [r7, #4]
     8a8:	460b      	mov	r3, r1
     8aa:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ac:	78fb      	ldrb	r3, [r7, #3]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d00c      	beq.n	8cc <UART_AutoFlow+0x2c>
    {
        UARTx->MCR  |=0x22;  
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	691b      	ldr	r3, [r3, #16]
     8b6:	f043 0222 	orr.w	r2, r3, #34	; 0x22
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	611a      	str	r2, [r3, #16]
        UARTx->FCR  |=1<<0;
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	689b      	ldr	r3, [r3, #8]
     8c2:	f043 0201 	orr.w	r2, r3, #1
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	609a      	str	r2, [r3, #8]
    else
    {
        UARTx->MCR  &= ~0x22;  
    }
        
}
     8ca:	e005      	b.n	8d8 <UART_AutoFlow+0x38>
        UARTx->MCR  &= ~0x22;  
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	691b      	ldr	r3, [r3, #16]
     8d0:	f023 0222 	bic.w	r2, r3, #34	; 0x22
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	611a      	str	r2, [r3, #16]
}
     8d8:	bf00      	nop
     8da:	370c      	adds	r7, #12
     8dc:	46bd      	mov	sp, r7
     8de:	bc80      	pop	{r7}
     8e0:	4770      	bx	lr

000008e2 <UART_SetRts>:

void  UART_SetRts(UART_TypeDef *UARTx,bool En)
{
     8e2:	b480      	push	{r7}
     8e4:	b083      	sub	sp, #12
     8e6:	af00      	add	r7, sp, #0
     8e8:	6078      	str	r0, [r7, #4]
     8ea:	460b      	mov	r3, r1
     8ec:	70fb      	strb	r3, [r7, #3]
    if(En)
     8ee:	78fb      	ldrb	r3, [r7, #3]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d006      	beq.n	902 <UART_SetRts+0x20>
    {
        UARTx->MCR  |=0x02;  
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	691b      	ldr	r3, [r3, #16]
     8f8:	f043 0202 	orr.w	r2, r3, #2
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	611a      	str	r2, [r3, #16]
    else
    {
        UARTx->MCR  &= ~0x02;  
    }
        
}
     900:	e005      	b.n	90e <UART_SetRts+0x2c>
        UARTx->MCR  &= ~0x02;  
     902:	687b      	ldr	r3, [r7, #4]
     904:	691b      	ldr	r3, [r3, #16]
     906:	f023 0202 	bic.w	r2, r3, #2
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	611a      	str	r2, [r3, #16]
}
     90e:	bf00      	nop
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	bc80      	pop	{r7}
     916:	4770      	bx	lr

00000918 <UART_LSRCheckBits>:

FlagStatus UART_LSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     918:	b480      	push	{r7}
     91a:	b085      	sub	sp, #20
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->LSR & 0x1FF;
     922:	687b      	ldr	r3, [r7, #4]
     924:	695b      	ldr	r3, [r3, #20]
     926:	f3c3 0308 	ubfx	r3, r3, #0, #9
     92a:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     92c:	68fa      	ldr	r2, [r7, #12]
     92e:	683b      	ldr	r3, [r7, #0]
     930:	4013      	ands	r3, r2
     932:	2b00      	cmp	r3, #0
     934:	d001      	beq.n	93a <UART_LSRCheckBits+0x22>
        return SET;
     936:	2301      	movs	r3, #1
     938:	e000      	b.n	93c <UART_LSRCheckBits+0x24>
    }
    else {
        return RESET;
     93a:	2300      	movs	r3, #0
    }
}
     93c:	4618      	mov	r0, r3
     93e:	3714      	adds	r7, #20
     940:	46bd      	mov	sp, r7
     942:	bc80      	pop	{r7}
     944:	4770      	bx	lr

00000946 <UART_MSRCheckBits>:

FlagStatus UART_MSRCheckBits(UART_TypeDef *UARTx, uint32_t bits)
{
     946:	b480      	push	{r7}
     948:	b085      	sub	sp, #20
     94a:	af00      	add	r7, sp, #0
     94c:	6078      	str	r0, [r7, #4]
     94e:	6039      	str	r1, [r7, #0]
    uint32_t val = UARTx->MSR;
     950:	687b      	ldr	r3, [r7, #4]
     952:	699b      	ldr	r3, [r3, #24]
     954:	60fb      	str	r3, [r7, #12]

    if (val & bits) {
     956:	68fa      	ldr	r2, [r7, #12]
     958:	683b      	ldr	r3, [r7, #0]
     95a:	4013      	ands	r3, r2
     95c:	2b00      	cmp	r3, #0
     95e:	d001      	beq.n	964 <UART_MSRCheckBits+0x1e>
        return SET;
     960:	2301      	movs	r3, #1
     962:	e000      	b.n	966 <UART_MSRCheckBits+0x20>
    }
    else {
        return RESET;
     964:	2300      	movs	r3, #0
    }
}
     966:	4618      	mov	r0, r3
     968:	3714      	adds	r7, #20
     96a:	46bd      	mov	sp, r7
     96c:	bc80      	pop	{r7}
     96e:	4770      	bx	lr

00000970 <UART_GetInterruptID>:

UART_InterID_Tpye UART_GetInterruptID(UART_TypeDef *UARTx)
{
     970:	b480      	push	{r7}
     972:	b083      	sub	sp, #12
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
    return (UART_InterID_Tpye)(UARTx->IIR & 0xf);
     978:	687b      	ldr	r3, [r7, #4]
     97a:	689b      	ldr	r3, [r3, #8]
     97c:	b2db      	uxtb	r3, r3
     97e:	f003 030f 	and.w	r3, r3, #15
     982:	b2db      	uxtb	r3, r3
}
     984:	4618      	mov	r0, r3
     986:	370c      	adds	r7, #12
     988:	46bd      	mov	sp, r7
     98a:	bc80      	pop	{r7}
     98c:	4770      	bx	lr

0000098e <UART_GetInterruptStatus>:

ITStatus UART_GetInterruptStatus(UART_TypeDef *UARTx, uint16_t UART_IntIds)
{
     98e:	b480      	push	{r7}
     990:	b083      	sub	sp, #12
     992:	af00      	add	r7, sp, #0
     994:	6078      	str	r0, [r7, #4]
     996:	460b      	mov	r3, r1
     998:	807b      	strh	r3, [r7, #2]
    if (UARTx->IER & UART_IntIds) {
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	685a      	ldr	r2, [r3, #4]
     99e:	887b      	ldrh	r3, [r7, #2]
     9a0:	4013      	ands	r3, r2
     9a2:	2b00      	cmp	r3, #0
     9a4:	d007      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
        if (UARTx->IIR & UART_IntIds) {
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	689a      	ldr	r2, [r3, #8]
     9aa:	887b      	ldrh	r3, [r7, #2]
     9ac:	4013      	ands	r3, r2
     9ae:	2b00      	cmp	r3, #0
     9b0:	d001      	beq.n	9b6 <UART_GetInterruptStatus+0x28>
            return SET;
     9b2:	2301      	movs	r3, #1
     9b4:	e000      	b.n	9b8 <UART_GetInterruptStatus+0x2a>
        }
    }
    return RESET;
     9b6:	2300      	movs	r3, #0
}
     9b8:	4618      	mov	r0, r3
     9ba:	370c      	adds	r7, #12
     9bc:	46bd      	mov	sp, r7
     9be:	bc80      	pop	{r7}
     9c0:	4770      	bx	lr

000009c2 <UART_GetStatus>:

uint32_t UART_GetStatus(UART_TypeDef *UARTx)
{
     9c2:	b480      	push	{r7}
     9c4:	b083      	sub	sp, #12
     9c6:	af00      	add	r7, sp, #0
     9c8:	6078      	str	r0, [r7, #4]
    return(UARTx->USR );
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
     9ce:	4618      	mov	r0, r3
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	bc80      	pop	{r7}
     9d6:	4770      	bx	lr

000009d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     9d8:	b480      	push	{r7}
     9da:	b083      	sub	sp, #12
     9dc:	af00      	add	r7, sp, #0
     9de:	4603      	mov	r3, r0
     9e0:	6039      	str	r1, [r7, #0]
     9e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
     9e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
     9e8:	2b00      	cmp	r3, #0
     9ea:	da0b      	bge.n	a04 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     9ec:	683b      	ldr	r3, [r7, #0]
     9ee:	b2da      	uxtb	r2, r3
     9f0:	490c      	ldr	r1, [pc, #48]	; (a24 <NVIC_SetPriority+0x4c>)
     9f2:	79fb      	ldrb	r3, [r7, #7]
     9f4:	f003 030f 	and.w	r3, r3, #15
     9f8:	3b04      	subs	r3, #4
     9fa:	0152      	lsls	r2, r2, #5
     9fc:	b2d2      	uxtb	r2, r2
     9fe:	440b      	add	r3, r1
     a00:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
     a02:	e009      	b.n	a18 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     a04:	683b      	ldr	r3, [r7, #0]
     a06:	b2da      	uxtb	r2, r3
     a08:	4907      	ldr	r1, [pc, #28]	; (a28 <NVIC_SetPriority+0x50>)
     a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
     a0e:	0152      	lsls	r2, r2, #5
     a10:	b2d2      	uxtb	r2, r2
     a12:	440b      	add	r3, r1
     a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     a18:	bf00      	nop
     a1a:	370c      	adds	r7, #12
     a1c:	46bd      	mov	sp, r7
     a1e:	bc80      	pop	{r7}
     a20:	4770      	bx	lr
     a22:	bf00      	nop
     a24:	e000ed00 	.word	0xe000ed00
     a28:	e000e100 	.word	0xe000e100

00000a2c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b082      	sub	sp, #8
     a30:	af00      	add	r7, sp, #0
     a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);           /* Reload value impossible */
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	3b01      	subs	r3, #1
     a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     a3c:	d301      	bcc.n	a42 <SysTick_Config+0x16>
     a3e:	2301      	movs	r3, #1
     a40:	e00f      	b.n	a62 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                       /* set reload register */
     a42:	4a0a      	ldr	r2, [pc, #40]	; (a6c <SysTick_Config+0x40>)
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	3b01      	subs	r3, #1
     a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);       /* set Priority for Systick Interrupt */
     a4a:	2107      	movs	r1, #7
     a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a50:	f7ff ffc2 	bl	9d8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                               /* Load the SysTick Counter Value */
     a54:	4b05      	ldr	r3, [pc, #20]	; (a6c <SysTick_Config+0x40>)
     a56:	2200      	movs	r2, #0
     a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     a5a:	4b04      	ldr	r3, [pc, #16]	; (a6c <SysTick_Config+0x40>)
     a5c:	2207      	movs	r2, #7
     a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                       /* Function successful */
     a60:	2300      	movs	r3, #0
}
     a62:	4618      	mov	r0, r3
     a64:	3708      	adds	r7, #8
     a66:	46bd      	mov	sp, r7
     a68:	bd80      	pop	{r7, pc}
     a6a:	bf00      	nop
     a6c:	e000e010 	.word	0xe000e010

00000a70 <VerifyIsGo>:
void Verify_SendEndSimulation(void);


/* Get a run Case Falg*/
bool VerifyIsGo(void)
{
     a70:	b480      	push	{r7}
     a72:	af00      	add	r7, sp, #0
    if(VERIFY_RUN_CF)
     a74:	4b07      	ldr	r3, [pc, #28]	; (a94 <VerifyIsGo+0x24>)
     a76:	781b      	ldrb	r3, [r3, #0]
     a78:	b2db      	uxtb	r3, r3
     a7a:	2b00      	cmp	r3, #0
     a7c:	d004      	beq.n	a88 <VerifyIsGo+0x18>
    {
        VERIFY_RUN_CF = false;
     a7e:	4b05      	ldr	r3, [pc, #20]	; (a94 <VerifyIsGo+0x24>)
     a80:	2200      	movs	r2, #0
     a82:	701a      	strb	r2, [r3, #0]
        return true;
     a84:	2301      	movs	r3, #1
     a86:	e000      	b.n	a8a <VerifyIsGo+0x1a>
    }
    return false;
     a88:	2300      	movs	r3, #0
}
     a8a:	4618      	mov	r0, r3
     a8c:	46bd      	mov	sp, r7
     a8e:	bc80      	pop	{r7}
     a90:	4770      	bx	lr
     a92:	bf00      	nop
     a94:	200081f4 	.word	0x200081f4

00000a98 <VerifyRunCase>:

/* Set a run Case Falg*/
void VerifyRunCase(void)
{
     a98:	b480      	push	{r7}
     a9a:	af00      	add	r7, sp, #0
    VERIFY_RUN_CF = true ;
     a9c:	4b03      	ldr	r3, [pc, #12]	; (aac <VerifyRunCase+0x14>)
     a9e:	2201      	movs	r2, #1
     aa0:	701a      	strb	r2, [r3, #0]
}
     aa2:	bf00      	nop
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	bf00      	nop
     aac:	200081f4 	.word	0x200081f4

00000ab0 <verify_messageGetRunCid>:

/* Get current Case ID*/
uint32_t  verify_messageGetRunCid(void)
{
     ab0:	b480      	push	{r7}
     ab2:	b083      	sub	sp, #12
     ab4:	af00      	add	r7, sp, #0
    uint32_t  cid = VERIFY_MESSGAE_RUN_CID;
     ab6:	4b04      	ldr	r3, [pc, #16]	; (ac8 <verify_messageGetRunCid+0x18>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	607b      	str	r3, [r7, #4]
    return cid; 
     abc:	687b      	ldr	r3, [r7, #4]
}
     abe:	4618      	mov	r0, r3
     ac0:	370c      	adds	r7, #12
     ac2:	46bd      	mov	sp, r7
     ac4:	bc80      	pop	{r7}
     ac6:	4770      	bx	lr
     ac8:	200081ec 	.word	0x200081ec

00000acc <Verify_messageSend>:



/* Send a message to UVM*/
void Verify_messageSend(uint32_t cmd, uint32_t val)
{
     acc:	b480      	push	{r7}
     ace:	b083      	sub	sp, #12
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
     ad4:	6039      	str	r1, [r7, #0]
    SCU->SEND_DATA  = val;
     ad6:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     ada:	683b      	ldr	r3, [r7, #0]
     adc:	63d3      	str	r3, [r2, #60]	; 0x3c
    SCU->SEND_CMD   = cmd;
     ade:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	6393      	str	r3, [r2, #56]	; 0x38
}
     ae6:	bf00      	nop
     ae8:	370c      	adds	r7, #12
     aea:	46bd      	mov	sp, r7
     aec:	bc80      	pop	{r7}
     aee:	4770      	bx	lr

00000af0 <Verify_FmessageSend>:

/* Send a message to UVM*/
void Verify_FmessageSend(uint32_t cmd, uint32_t val)
{
     af0:	b480      	push	{r7}
     af2:	b083      	sub	sp, #12
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
    SCU->READ_DATA = val;
     afa:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     afe:	683b      	ldr	r3, [r7, #0]
     b00:	6453      	str	r3, [r2, #68]	; 0x44
    SCU->READ_CMD  = cmd ;
     b02:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	6413      	str	r3, [r2, #64]	; 0x40
}
     b0a:	bf00      	nop
     b0c:	370c      	adds	r7, #12
     b0e:	46bd      	mov	sp, r7
     b10:	bc80      	pop	{r7}
     b12:	4770      	bx	lr

00000b14 <Verify_messageReceive>:



/* Receive a message to UVM*/
bool Verify_messageReceive(uint32_t *cmd, uint32_t *val)
{
     b14:	b480      	push	{r7}
     b16:	b083      	sub	sp, #12
     b18:	af00      	add	r7, sp, #0
     b1a:	6078      	str	r0, [r7, #4]
     b1c:	6039      	str	r1, [r7, #0]
    while(SCU->READ_CMD == VERIFY_MESSGAE_CMD){};
     b1e:	bf00      	nop
     b20:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     b26:	4b0c      	ldr	r3, [pc, #48]	; (b58 <Verify_messageReceive+0x44>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	429a      	cmp	r2, r3
     b2c:	d0f8      	beq.n	b20 <Verify_messageReceive+0xc>
    *cmd   = SCU->READ_CMD;
     b2e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	601a      	str	r2, [r3, #0]
    *val = SCU->READ_DATA;
     b38:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     b3e:	683b      	ldr	r3, [r7, #0]
     b40:	601a      	str	r2, [r3, #0]
    VERIFY_MESSGAE_CMD = *cmd;
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	681b      	ldr	r3, [r3, #0]
     b46:	4a04      	ldr	r2, [pc, #16]	; (b58 <Verify_messageReceive+0x44>)
     b48:	6013      	str	r3, [r2, #0]
    return true;
     b4a:	2301      	movs	r3, #1
}
     b4c:	4618      	mov	r0, r3
     b4e:	370c      	adds	r7, #12
     b50:	46bd      	mov	sp, r7
     b52:	bc80      	pop	{r7}
     b54:	4770      	bx	lr
     b56:	bf00      	nop
     b58:	200081f0 	.word	0x200081f0

00000b5c <Verify_messageGetRData>:



/* Receive a message to UVM*/
bool Verify_messageGetRData(uint32_t *cmd, uint32_t *val)
{
     b5c:	b480      	push	{r7}
     b5e:	b083      	sub	sp, #12
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	6039      	str	r1, [r7, #0]
   
    *cmd  = SCU->READ_CMD;
     b66:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	601a      	str	r2, [r3, #0]
    *val  = SCU->READ_DATA;
     b70:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     b76:	683b      	ldr	r3, [r7, #0]
     b78:	601a      	str	r2, [r3, #0]
    return true;
     b7a:	2301      	movs	r3, #1
}
     b7c:	4618      	mov	r0, r3
     b7e:	370c      	adds	r7, #12
     b80:	46bd      	mov	sp, r7
     b82:	bc80      	pop	{r7}
     b84:	4770      	bx	lr

00000b86 <verify_messageGetReceive>:


/* Get current UVM message*/
bool verify_messageGetReceive(uint32_t *cmd, uint32_t *val)
{
     b86:	b480      	push	{r7}
     b88:	b083      	sub	sp, #12
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
     b8e:	6039      	str	r1, [r7, #0]
    if(SCU->READ_CMD != VERIFY_MESSGAE_CMD)
     b90:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     b96:	4b10      	ldr	r3, [pc, #64]	; (bd8 <verify_messageGetReceive+0x52>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	429a      	cmp	r2, r3
     b9c:	d00f      	beq.n	bbe <verify_messageGetReceive+0x38>
    {
        *cmd    = SCU->READ_CMD;
     b9e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	601a      	str	r2, [r3, #0]
        *val    = SCU->READ_DATA;
     ba8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
     bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     bae:	683b      	ldr	r3, [r7, #0]
     bb0:	601a      	str	r2, [r3, #0]
        VERIFY_MESSGAE_CMD = *cmd;
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	4a08      	ldr	r2, [pc, #32]	; (bd8 <verify_messageGetReceive+0x52>)
     bb8:	6013      	str	r3, [r2, #0]
        return true;
     bba:	2301      	movs	r3, #1
     bbc:	e006      	b.n	bcc <verify_messageGetReceive+0x46>
    }
    else
    {   
        *cmd = 0;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	2200      	movs	r2, #0
     bc2:	601a      	str	r2, [r3, #0]
        *val =0;
     bc4:	683b      	ldr	r3, [r7, #0]
     bc6:	2200      	movs	r2, #0
     bc8:	601a      	str	r2, [r3, #0]
        return false;
     bca:	2300      	movs	r3, #0
    }
    
}
     bcc:	4618      	mov	r0, r3
     bce:	370c      	adds	r7, #12
     bd0:	46bd      	mov	sp, r7
     bd2:	bc80      	pop	{r7}
     bd4:	4770      	bx	lr
     bd6:	bf00      	nop
     bd8:	200081f0 	.word	0x200081f0

00000bdc <verify_SendRunCaseId>:


/* Contorl Run a case*/
void verify_SendRunCaseId(uint32_t Cid)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b082      	sub	sp, #8
     be0:	af00      	add	r7, sp, #0
     be2:	6078      	str	r0, [r7, #4]
    Verify_messageSend(BRCASE_RID,Cid);
     be4:	6879      	ldr	r1, [r7, #4]
     be6:	2001      	movs	r0, #1
     be8:	f7ff ff70 	bl	acc <Verify_messageSend>
    VerifyRunCase();
     bec:	f7ff ff54 	bl	a98 <VerifyRunCase>
}
     bf0:	bf00      	nop
     bf2:	3708      	adds	r7, #8
     bf4:	46bd      	mov	sp, r7
     bf6:	bd80      	pop	{r7, pc}

00000bf8 <Verify_messageCheckRececive>:

/* Check that the run instruction is received */
bool Verify_messageCheckRececive(void)
{
     bf8:	b580      	push	{r7, lr}
     bfa:	b082      	sub	sp, #8
     bfc:	af00      	add	r7, sp, #0
    uint32_t cid  =0;
     bfe:	2300      	movs	r3, #0
     c00:	607b      	str	r3, [r7, #4]
    uint32_t data =0;
     c02:	2300      	movs	r3, #0
     c04:	603b      	str	r3, [r7, #0]
    verify_messageGetReceive(&cid,&data);
     c06:	463a      	mov	r2, r7
     c08:	1d3b      	adds	r3, r7, #4
     c0a:	4611      	mov	r1, r2
     c0c:	4618      	mov	r0, r3
     c0e:	f7ff ffba 	bl	b86 <verify_messageGetReceive>
    if(cid == BRCASE_RID)
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	2b01      	cmp	r3, #1
     c16:	d10a      	bne.n	c2e <Verify_messageCheckRececive+0x36>
    {
        VERIFY_MESSGAE_RUN_CID = data;
     c18:	683b      	ldr	r3, [r7, #0]
     c1a:	4a07      	ldr	r2, [pc, #28]	; (c38 <Verify_messageCheckRececive+0x40>)
     c1c:	6013      	str	r3, [r2, #0]
#ifndef BR_DUAL
        Verify_messageSend(BRCASE_RID,1);
     c1e:	2101      	movs	r1, #1
     c20:	2001      	movs	r0, #1
     c22:	f7ff ff53 	bl	acc <Verify_messageSend>
#endif 
        VerifyRunCase();
     c26:	f7ff ff37 	bl	a98 <VerifyRunCase>
        return true;
     c2a:	2301      	movs	r3, #1
     c2c:	e000      	b.n	c30 <Verify_messageCheckRececive+0x38>
    }
   return false;
     c2e:	2300      	movs	r3, #0
}
     c30:	4618      	mov	r0, r3
     c32:	3708      	adds	r7, #8
     c34:	46bd      	mov	sp, r7
     c36:	bd80      	pop	{r7, pc}
     c38:	200081ec 	.word	0x200081ec

00000c3c <verify_SendCid>:

/****************************************************
Send Case ID ->UVM 
*****************************************************/
bool verify_SendCid(uint32_t cid,uint32_t *data)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b086      	sub	sp, #24
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
     c44:	6039      	str	r1, [r7, #0]
    bool sut = true;
     c46:	2301      	movs	r3, #1
     c48:	75fb      	strb	r3, [r7, #23]
#ifndef BR_NO_UVM
    uint32_t cd=0,va=0;
     c4a:	2300      	movs	r3, #0
     c4c:	613b      	str	r3, [r7, #16]
     c4e:	2300      	movs	r3, #0
     c50:	60fb      	str	r3, [r7, #12]
      
    Verify_messageSend(BRCASE_CID,cid);
     c52:	6879      	ldr	r1, [r7, #4]
     c54:	2002      	movs	r0, #2
     c56:	f7ff ff39 	bl	acc <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
     c5a:	f107 020c 	add.w	r2, r7, #12
     c5e:	f107 0310 	add.w	r3, r7, #16
     c62:	4611      	mov	r1, r2
     c64:	4618      	mov	r0, r3
     c66:	f7ff ff55 	bl	b14 <Verify_messageReceive>
    if(!(cd == BRCASE_CID && va != 0))
     c6a:	693b      	ldr	r3, [r7, #16]
     c6c:	2b02      	cmp	r3, #2
     c6e:	d102      	bne.n	c76 <verify_SendCid+0x3a>
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	2b00      	cmp	r3, #0
     c74:	d101      	bne.n	c7a <verify_SendCid+0x3e>
        sut =false;
     c76:	2300      	movs	r3, #0
     c78:	75fb      	strb	r3, [r7, #23]
    *data = va;
     c7a:	68fa      	ldr	r2, [r7, #12]
     c7c:	683b      	ldr	r3, [r7, #0]
     c7e:	601a      	str	r2, [r3, #0]
#endif  
    return sut;   
     c80:	7dfb      	ldrb	r3, [r7, #23]
  
}
     c82:	4618      	mov	r0, r3
     c84:	3718      	adds	r7, #24
     c86:	46bd      	mov	sp, r7
     c88:	bd80      	pop	{r7, pc}

00000c8a <verify_step_SendCheckData>:

/*
Step by step to verify,CPU Send and UVM Check
*/
bool verify_step_SendCheckData(uint32_t step,func_handle func)
{
     c8a:	b580      	push	{r7, lr}
     c8c:	b086      	sub	sp, #24
     c8e:	af00      	add	r7, sp, #0
     c90:	6078      	str	r0, [r7, #4]
     c92:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
     c94:	2300      	movs	r3, #0
     c96:	613b      	str	r3, [r7, #16]
     c98:	2300      	movs	r3, #0
     c9a:	60fb      	str	r3, [r7, #12]
    bool sut = true;
     c9c:	2301      	movs	r3, #1
     c9e:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(step,0);
     ca0:	2100      	movs	r1, #0
     ca2:	6878      	ldr	r0, [r7, #4]
     ca4:	f7ff ff12 	bl	acc <Verify_messageSend>
    func();
     ca8:	683b      	ldr	r3, [r7, #0]
     caa:	4798      	blx	r3
    Verify_messageReceive(&cd,&va);
     cac:	f107 020c 	add.w	r2, r7, #12
     cb0:	f107 0310 	add.w	r3, r7, #16
     cb4:	4611      	mov	r1, r2
     cb6:	4618      	mov	r0, r3
     cb8:	f7ff ff2c 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == 1))
     cbc:	693b      	ldr	r3, [r7, #16]
     cbe:	687a      	ldr	r2, [r7, #4]
     cc0:	429a      	cmp	r2, r3
     cc2:	d102      	bne.n	cca <verify_step_SendCheckData+0x40>
     cc4:	68fb      	ldr	r3, [r7, #12]
     cc6:	2b01      	cmp	r3, #1
     cc8:	d001      	beq.n	cce <verify_step_SendCheckData+0x44>
        sut =false;
     cca:	2300      	movs	r3, #0
     ccc:	75fb      	strb	r3, [r7, #23]
    
    return sut;
     cce:	7dfb      	ldrb	r3, [r7, #23]
}
     cd0:	4618      	mov	r0, r3
     cd2:	3718      	adds	r7, #24
     cd4:	46bd      	mov	sp, r7
     cd6:	bd80      	pop	{r7, pc}

00000cd8 <verify_step_SendCheckOneData>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneData(uint32_t step,volatile uint32_t *reg,uint32_t val)
{
     cd8:	b580      	push	{r7, lr}
     cda:	b088      	sub	sp, #32
     cdc:	af00      	add	r7, sp, #0
     cde:	60f8      	str	r0, [r7, #12]
     ce0:	60b9      	str	r1, [r7, #8]
     ce2:	607a      	str	r2, [r7, #4]
    uint32_t cd=0,va=0;
     ce4:	2300      	movs	r3, #0
     ce6:	61bb      	str	r3, [r7, #24]
     ce8:	2300      	movs	r3, #0
     cea:	617b      	str	r3, [r7, #20]
    bool sut = true;
     cec:	2301      	movs	r3, #1
     cee:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
     cf0:	68fb      	ldr	r3, [r7, #12]
     cf2:	3b20      	subs	r3, #32
     cf4:	b29b      	uxth	r3, r3
     cf6:	4619      	mov	r1, r3
     cf8:	480f      	ldr	r0, [pc, #60]	; (d38 <verify_step_SendCheckOneData+0x60>)
     cfa:	f7ff fbf5 	bl	4e8 <cm_printf>
    *reg = val;
     cfe:	68bb      	ldr	r3, [r7, #8]
     d00:	687a      	ldr	r2, [r7, #4]
     d02:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
     d04:	6879      	ldr	r1, [r7, #4]
     d06:	68f8      	ldr	r0, [r7, #12]
     d08:	f7ff fee0 	bl	acc <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
     d0c:	f107 0214 	add.w	r2, r7, #20
     d10:	f107 0318 	add.w	r3, r7, #24
     d14:	4611      	mov	r1, r2
     d16:	4618      	mov	r0, r3
     d18:	f7ff fefc 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == 1))
     d1c:	69bb      	ldr	r3, [r7, #24]
     d1e:	68fa      	ldr	r2, [r7, #12]
     d20:	429a      	cmp	r2, r3
     d22:	d102      	bne.n	d2a <verify_step_SendCheckOneData+0x52>
     d24:	697b      	ldr	r3, [r7, #20]
     d26:	2b01      	cmp	r3, #1
     d28:	d001      	beq.n	d2e <verify_step_SendCheckOneData+0x56>
        sut =false;
     d2a:	2300      	movs	r3, #0
     d2c:	77fb      	strb	r3, [r7, #31]
    
    return sut;
     d2e:	7ffb      	ldrb	r3, [r7, #31]
}
     d30:	4618      	mov	r0, r3
     d32:	3720      	adds	r7, #32
     d34:	46bd      	mov	sp, r7
     d36:	bd80      	pop	{r7, pc}
     d38:	00001bf4 	.word	0x00001bf4

00000d3c <verify_step_SendCheckOneDataDma>:

/*
Step by step to verify,CPU Send and UVM Check a register
*/
bool verify_step_SendCheckOneDataDma(uint32_t step,volatile uint32_t *reg,uint32_t val,bool rt)
{
     d3c:	b580      	push	{r7, lr}
     d3e:	b088      	sub	sp, #32
     d40:	af00      	add	r7, sp, #0
     d42:	60f8      	str	r0, [r7, #12]
     d44:	60b9      	str	r1, [r7, #8]
     d46:	607a      	str	r2, [r7, #4]
     d48:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
     d4a:	2300      	movs	r3, #0
     d4c:	61bb      	str	r3, [r7, #24]
     d4e:	2300      	movs	r3, #0
     d50:	617b      	str	r3, [r7, #20]
    bool sut = true;
     d52:	2301      	movs	r3, #1
     d54:	77fb      	strb	r3, [r7, #31]
    mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	3b20      	subs	r3, #32
     d5a:	b29b      	uxth	r3, r3
     d5c:	4619      	mov	r1, r3
     d5e:	4814      	ldr	r0, [pc, #80]	; (db0 <verify_step_SendCheckOneDataDma+0x74>)
     d60:	f7ff fbc2 	bl	4e8 <cm_printf>
    if(rt)
     d64:	78fb      	ldrb	r3, [r7, #3]
     d66:	2b00      	cmp	r3, #0
     d68:	d005      	beq.n	d76 <verify_step_SendCheckOneDataDma+0x3a>
        *reg = (val|0xff00);
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	f443 427f 	orr.w	r2, r3, #65280	; 0xff00
     d70:	68bb      	ldr	r3, [r7, #8]
     d72:	601a      	str	r2, [r3, #0]
     d74:	e002      	b.n	d7c <verify_step_SendCheckOneDataDma+0x40>
    else
        *reg = val;
     d76:	68bb      	ldr	r3, [r7, #8]
     d78:	687a      	ldr	r2, [r7, #4]
     d7a:	601a      	str	r2, [r3, #0]
    
    Verify_messageSend(step,val);
     d7c:	6879      	ldr	r1, [r7, #4]
     d7e:	68f8      	ldr	r0, [r7, #12]
     d80:	f7ff fea4 	bl	acc <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
     d84:	f107 0214 	add.w	r2, r7, #20
     d88:	f107 0318 	add.w	r3, r7, #24
     d8c:	4611      	mov	r1, r2
     d8e:	4618      	mov	r0, r3
     d90:	f7ff fec0 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == 1))
     d94:	69bb      	ldr	r3, [r7, #24]
     d96:	68fa      	ldr	r2, [r7, #12]
     d98:	429a      	cmp	r2, r3
     d9a:	d102      	bne.n	da2 <verify_step_SendCheckOneDataDma+0x66>
     d9c:	697b      	ldr	r3, [r7, #20]
     d9e:	2b01      	cmp	r3, #1
     da0:	d001      	beq.n	da6 <verify_step_SendCheckOneDataDma+0x6a>
        sut =false;
     da2:	2300      	movs	r3, #0
     da4:	77fb      	strb	r3, [r7, #31]
    
    return sut;
     da6:	7ffb      	ldrb	r3, [r7, #31]
}
     da8:	4618      	mov	r0, r3
     daa:	3720      	adds	r7, #32
     dac:	46bd      	mov	sp, r7
     dae:	bd80      	pop	{r7, pc}
     db0:	00001bf4 	.word	0x00001bf4

00000db4 <verify_step_SendCheckOneDataLog>:

bool verify_step_SendCheckOneDataLog(uint32_t step,volatile uint32_t *reg,uint32_t val,bool log)
{
     db4:	b580      	push	{r7, lr}
     db6:	b088      	sub	sp, #32
     db8:	af00      	add	r7, sp, #0
     dba:	60f8      	str	r0, [r7, #12]
     dbc:	60b9      	str	r1, [r7, #8]
     dbe:	607a      	str	r2, [r7, #4]
     dc0:	70fb      	strb	r3, [r7, #3]
    uint32_t cd=0,va=0;
     dc2:	2300      	movs	r3, #0
     dc4:	61bb      	str	r3, [r7, #24]
     dc6:	2300      	movs	r3, #0
     dc8:	617b      	str	r3, [r7, #20]
    bool sut = true;
     dca:	2301      	movs	r3, #1
     dcc:	77fb      	strb	r3, [r7, #31]
    
    if(log)
     dce:	78fb      	ldrb	r3, [r7, #3]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d006      	beq.n	de2 <verify_step_SendCheckOneDataLog+0x2e>
        mgeprf("Setp %d Send \r\n",(step-0x20)&0xffff);
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	3b20      	subs	r3, #32
     dd8:	b29b      	uxth	r3, r3
     dda:	4619      	mov	r1, r3
     ddc:	480f      	ldr	r0, [pc, #60]	; (e1c <verify_step_SendCheckOneDataLog+0x68>)
     dde:	f7ff fb83 	bl	4e8 <cm_printf>
    *reg = val;
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	601a      	str	r2, [r3, #0]
    Verify_messageSend(step,val);
     de8:	6879      	ldr	r1, [r7, #4]
     dea:	68f8      	ldr	r0, [r7, #12]
     dec:	f7ff fe6e 	bl	acc <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
     df0:	f107 0214 	add.w	r2, r7, #20
     df4:	f107 0318 	add.w	r3, r7, #24
     df8:	4611      	mov	r1, r2
     dfa:	4618      	mov	r0, r3
     dfc:	f7ff fe8a 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == 1))
     e00:	69bb      	ldr	r3, [r7, #24]
     e02:	68fa      	ldr	r2, [r7, #12]
     e04:	429a      	cmp	r2, r3
     e06:	d102      	bne.n	e0e <verify_step_SendCheckOneDataLog+0x5a>
     e08:	697b      	ldr	r3, [r7, #20]
     e0a:	2b01      	cmp	r3, #1
     e0c:	d001      	beq.n	e12 <verify_step_SendCheckOneDataLog+0x5e>
        sut =false;
     e0e:	2300      	movs	r3, #0
     e10:	77fb      	strb	r3, [r7, #31]
    
    return sut;
     e12:	7ffb      	ldrb	r3, [r7, #31]
}
     e14:	4618      	mov	r0, r3
     e16:	3720      	adds	r7, #32
     e18:	46bd      	mov	sp, r7
     e1a:	bd80      	pop	{r7, pc}
     e1c:	00001bf4 	.word	0x00001bf4

00000e20 <verify_step_ReceiveCheckData>:

/*
Step by step to verify, UVM Send and CPU Check
*/
bool verify_step_ReceiveCheckData(uint32_t step,func_handle func)
{
     e20:	b580      	push	{r7, lr}
     e22:	b086      	sub	sp, #24
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
     e28:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
     e2a:	2300      	movs	r3, #0
     e2c:	613b      	str	r3, [r7, #16]
     e2e:	2300      	movs	r3, #0
     e30:	60fb      	str	r3, [r7, #12]
    bool sut = true;
     e32:	2301      	movs	r3, #1
     e34:	75fb      	strb	r3, [r7, #23]
    Verify_messageReceive(&cd,&va);
     e36:	f107 020c 	add.w	r2, r7, #12
     e3a:	f107 0310 	add.w	r3, r7, #16
     e3e:	4611      	mov	r1, r2
     e40:	4618      	mov	r0, r3
     e42:	f7ff fe67 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == 0))
     e46:	693b      	ldr	r3, [r7, #16]
     e48:	687a      	ldr	r2, [r7, #4]
     e4a:	429a      	cmp	r2, r3
     e4c:	d102      	bne.n	e54 <verify_step_ReceiveCheckData+0x34>
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	2b00      	cmp	r3, #0
     e52:	d002      	beq.n	e5a <verify_step_ReceiveCheckData+0x3a>
        sut =false;
     e54:	2300      	movs	r3, #0
     e56:	75fb      	strb	r3, [r7, #23]
     e58:	e009      	b.n	e6e <verify_step_ReceiveCheckData+0x4e>
    else
    {
        if(!func())
     e5a:	683b      	ldr	r3, [r7, #0]
     e5c:	4798      	blx	r3
     e5e:	4603      	mov	r3, r0
     e60:	f083 0301 	eor.w	r3, r3, #1
     e64:	b2db      	uxtb	r3, r3
     e66:	2b00      	cmp	r3, #0
     e68:	d001      	beq.n	e6e <verify_step_ReceiveCheckData+0x4e>
            sut =false;
     e6a:	2300      	movs	r3, #0
     e6c:	75fb      	strb	r3, [r7, #23]
    }
    Verify_messageSend(step,sut);
     e6e:	7dfb      	ldrb	r3, [r7, #23]
     e70:	4619      	mov	r1, r3
     e72:	6878      	ldr	r0, [r7, #4]
     e74:	f7ff fe2a 	bl	acc <Verify_messageSend>
    
    return sut;
     e78:	7dfb      	ldrb	r3, [r7, #23]
}
     e7a:	4618      	mov	r0, r3
     e7c:	3718      	adds	r7, #24
     e7e:	46bd      	mov	sp, r7
     e80:	bd80      	pop	{r7, pc}

00000e82 <verify_step_ReceiveCheckOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_ReceiveCheckOneData(uint32_t step,volatile uint32_t *reg)
{
     e82:	b580      	push	{r7, lr}
     e84:	b086      	sub	sp, #24
     e86:	af00      	add	r7, sp, #0
     e88:	6078      	str	r0, [r7, #4]
     e8a:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
     e8c:	2300      	movs	r3, #0
     e8e:	613b      	str	r3, [r7, #16]
     e90:	2300      	movs	r3, #0
     e92:	60fb      	str	r3, [r7, #12]
    bool sut = true;
     e94:	2301      	movs	r3, #1
     e96:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	3b20      	subs	r3, #32
     e9c:	b29b      	uxth	r3, r3
     e9e:	4619      	mov	r1, r3
     ea0:	480f      	ldr	r0, [pc, #60]	; (ee0 <verify_step_ReceiveCheckOneData+0x5e>)
     ea2:	f7ff fb21 	bl	4e8 <cm_printf>
    Verify_messageReceive(&cd,&va);
     ea6:	f107 020c 	add.w	r2, r7, #12
     eaa:	f107 0310 	add.w	r3, r7, #16
     eae:	4611      	mov	r1, r2
     eb0:	4618      	mov	r0, r3
     eb2:	f7ff fe2f 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
     eb6:	693b      	ldr	r3, [r7, #16]
     eb8:	687a      	ldr	r2, [r7, #4]
     eba:	429a      	cmp	r2, r3
     ebc:	d104      	bne.n	ec8 <verify_step_ReceiveCheckOneData+0x46>
     ebe:	683b      	ldr	r3, [r7, #0]
     ec0:	681a      	ldr	r2, [r3, #0]
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	429a      	cmp	r2, r3
     ec6:	d001      	beq.n	ecc <verify_step_ReceiveCheckOneData+0x4a>
        sut =false;
     ec8:	2300      	movs	r3, #0
     eca:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
     ecc:	7dfb      	ldrb	r3, [r7, #23]
     ece:	4619      	mov	r1, r3
     ed0:	6878      	ldr	r0, [r7, #4]
     ed2:	f7ff fdfb 	bl	acc <Verify_messageSend>
    
    return sut;
     ed6:	7dfb      	ldrb	r3, [r7, #23]
}
     ed8:	4618      	mov	r0, r3
     eda:	3718      	adds	r7, #24
     edc:	46bd      	mov	sp, r7
     ede:	bd80      	pop	{r7, pc}
     ee0:	00001c04 	.word	0x00001c04

00000ee4 <verify_step_ReceiveCheckOneDataLog>:
bool verify_step_ReceiveCheckOneDataLog(uint32_t step,volatile uint32_t *reg,bool log)
{
     ee4:	b580      	push	{r7, lr}
     ee6:	b088      	sub	sp, #32
     ee8:	af00      	add	r7, sp, #0
     eea:	60f8      	str	r0, [r7, #12]
     eec:	60b9      	str	r1, [r7, #8]
     eee:	4613      	mov	r3, r2
     ef0:	71fb      	strb	r3, [r7, #7]
    uint32_t cd=0,va=0;
     ef2:	2300      	movs	r3, #0
     ef4:	61bb      	str	r3, [r7, #24]
     ef6:	2300      	movs	r3, #0
     ef8:	617b      	str	r3, [r7, #20]
    bool sut = true;
     efa:	2301      	movs	r3, #1
     efc:	77fb      	strb	r3, [r7, #31]
    if(log)
     efe:	79fb      	ldrb	r3, [r7, #7]
     f00:	2b00      	cmp	r3, #0
     f02:	d006      	beq.n	f12 <verify_step_ReceiveCheckOneDataLog+0x2e>
        mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	3b20      	subs	r3, #32
     f08:	b29b      	uxth	r3, r3
     f0a:	4619      	mov	r1, r3
     f0c:	480f      	ldr	r0, [pc, #60]	; (f4c <verify_step_ReceiveCheckOneDataLog+0x68>)
     f0e:	f7ff faeb 	bl	4e8 <cm_printf>
    
    Verify_messageReceive(&cd,&va);
     f12:	f107 0214 	add.w	r2, r7, #20
     f16:	f107 0318 	add.w	r3, r7, #24
     f1a:	4611      	mov	r1, r2
     f1c:	4618      	mov	r0, r3
     f1e:	f7ff fdf9 	bl	b14 <Verify_messageReceive>
    if(!(cd == step && va == *reg))
     f22:	69bb      	ldr	r3, [r7, #24]
     f24:	68fa      	ldr	r2, [r7, #12]
     f26:	429a      	cmp	r2, r3
     f28:	d104      	bne.n	f34 <verify_step_ReceiveCheckOneDataLog+0x50>
     f2a:	68bb      	ldr	r3, [r7, #8]
     f2c:	681a      	ldr	r2, [r3, #0]
     f2e:	697b      	ldr	r3, [r7, #20]
     f30:	429a      	cmp	r2, r3
     f32:	d001      	beq.n	f38 <verify_step_ReceiveCheckOneDataLog+0x54>
        sut =false;
     f34:	2300      	movs	r3, #0
     f36:	77fb      	strb	r3, [r7, #31]
    Verify_messageSend(step,sut);
     f38:	7ffb      	ldrb	r3, [r7, #31]
     f3a:	4619      	mov	r1, r3
     f3c:	68f8      	ldr	r0, [r7, #12]
     f3e:	f7ff fdc5 	bl	acc <Verify_messageSend>
    
    return sut;
     f42:	7ffb      	ldrb	r3, [r7, #31]
}
     f44:	4618      	mov	r0, r3
     f46:	3720      	adds	r7, #32
     f48:	46bd      	mov	sp, r7
     f4a:	bd80      	pop	{r7, pc}
     f4c:	00001c04 	.word	0x00001c04

00000f50 <verify_step_CheckReceiveOneData>:

/*
Step by step to verify, UVM Send and CPU Check a register
*/
bool verify_step_CheckReceiveOneData(uint32_t step,uint32_t val,volatile uint32_t *reg)
{
     f50:	b580      	push	{r7, lr}
     f52:	b086      	sub	sp, #24
     f54:	af00      	add	r7, sp, #0
     f56:	60f8      	str	r0, [r7, #12]
     f58:	60b9      	str	r1, [r7, #8]
     f5a:	607a      	str	r2, [r7, #4]
    bool sut = true;
     f5c:	2301      	movs	r3, #1
     f5e:	75fb      	strb	r3, [r7, #23]
    mgeprf("Setp %d Receive\r\n",(step-0x20)&0xffff);
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	3b20      	subs	r3, #32
     f64:	b29b      	uxth	r3, r3
     f66:	4619      	mov	r1, r3
     f68:	4809      	ldr	r0, [pc, #36]	; (f90 <verify_step_CheckReceiveOneData+0x40>)
     f6a:	f7ff fabd 	bl	4e8 <cm_printf>
    if(!(val == *reg))
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	68ba      	ldr	r2, [r7, #8]
     f74:	429a      	cmp	r2, r3
     f76:	d001      	beq.n	f7c <verify_step_CheckReceiveOneData+0x2c>
        sut =false;
     f78:	2300      	movs	r3, #0
     f7a:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
     f7c:	7dfb      	ldrb	r3, [r7, #23]
     f7e:	4619      	mov	r1, r3
     f80:	68f8      	ldr	r0, [r7, #12]
     f82:	f7ff fda3 	bl	acc <Verify_messageSend>
    return sut;
     f86:	7dfb      	ldrb	r3, [r7, #23]
}
     f88:	4618      	mov	r0, r3
     f8a:	3718      	adds	r7, #24
     f8c:	46bd      	mov	sp, r7
     f8e:	bd80      	pop	{r7, pc}
     f90:	00001c04 	.word	0x00001c04

00000f94 <verify_step_CheckReceiveOneDataLog>:
bool verify_step_CheckReceiveOneDataLog(uint32_t step,uint32_t val,volatile uint32_t *reg,bool log)
{
     f94:	b580      	push	{r7, lr}
     f96:	b086      	sub	sp, #24
     f98:	af00      	add	r7, sp, #0
     f9a:	60f8      	str	r0, [r7, #12]
     f9c:	60b9      	str	r1, [r7, #8]
     f9e:	607a      	str	r2, [r7, #4]
     fa0:	70fb      	strb	r3, [r7, #3]
    bool sut = true;
     fa2:	2301      	movs	r3, #1
     fa4:	75fb      	strb	r3, [r7, #23]
    if(log)
     fa6:	78fb      	ldrb	r3, [r7, #3]
     fa8:	2b00      	cmp	r3, #0
     faa:	d008      	beq.n	fbe <verify_step_CheckReceiveOneDataLog+0x2a>
        mgeprf("Setp %d Receive [%X]\r\n",(step-0x20)&0xffff,*reg);
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	3b20      	subs	r3, #32
     fb0:	b299      	uxth	r1, r3
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	461a      	mov	r2, r3
     fb8:	4809      	ldr	r0, [pc, #36]	; (fe0 <verify_step_CheckReceiveOneDataLog+0x4c>)
     fba:	f7ff fa95 	bl	4e8 <cm_printf>
    
    if(!(val == *reg))
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	68ba      	ldr	r2, [r7, #8]
     fc4:	429a      	cmp	r2, r3
     fc6:	d001      	beq.n	fcc <verify_step_CheckReceiveOneDataLog+0x38>
        sut =false;
     fc8:	2300      	movs	r3, #0
     fca:	75fb      	strb	r3, [r7, #23]
    Verify_messageSend(step,sut);
     fcc:	7dfb      	ldrb	r3, [r7, #23]
     fce:	4619      	mov	r1, r3
     fd0:	68f8      	ldr	r0, [r7, #12]
     fd2:	f7ff fd7b 	bl	acc <Verify_messageSend>
    return sut;
     fd6:	7dfb      	ldrb	r3, [r7, #23]
}
     fd8:	4618      	mov	r0, r3
     fda:	3718      	adds	r7, #24
     fdc:	46bd      	mov	sp, r7
     fde:	bd80      	pop	{r7, pc}
     fe0:	00001c18 	.word	0x00001c18

00000fe4 <Verify_SendCResult>:

#ifndef ONLY_NO_UVM
/*Send Case Verify Result*/
bool Verify_SendCResult(uint32_t cmd, uint32_t val)
{
     fe4:	b580      	push	{r7, lr}
     fe6:	b086      	sub	sp, #24
     fe8:	af00      	add	r7, sp, #0
     fea:	6078      	str	r0, [r7, #4]
     fec:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
     fee:	2300      	movs	r3, #0
     ff0:	613b      	str	r3, [r7, #16]
     ff2:	2300      	movs	r3, #0
     ff4:	60fb      	str	r3, [r7, #12]
    bool sut = true;
     ff6:	2301      	movs	r3, #1
     ff8:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
     ffa:	6839      	ldr	r1, [r7, #0]
     ffc:	6878      	ldr	r0, [r7, #4]
     ffe:	f7ff fd65 	bl	acc <Verify_messageSend>
    Verify_messageReceive(&cd,&va);
    1002:	f107 020c 	add.w	r2, r7, #12
    1006:	f107 0310 	add.w	r3, r7, #16
    100a:	4611      	mov	r1, r2
    100c:	4618      	mov	r0, r3
    100e:	f7ff fd81 	bl	b14 <Verify_messageReceive>
    if(!(cd == cmd && va == 1))
    1012:	693b      	ldr	r3, [r7, #16]
    1014:	687a      	ldr	r2, [r7, #4]
    1016:	429a      	cmp	r2, r3
    1018:	d102      	bne.n	1020 <Stack_Size+0x20>
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	2b01      	cmp	r3, #1
    101e:	d001      	beq.n	1024 <Stack_Size+0x24>
        sut =false;
    1020:	2300      	movs	r3, #0
    1022:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    1024:	693b      	ldr	r3, [r7, #16]
    1026:	2b03      	cmp	r3, #3
    1028:	d104      	bne.n	1034 <Stack_Size+0x34>
    102a:	68fb      	ldr	r3, [r7, #12]
    102c:	2b01      	cmp	r3, #1
    102e:	d101      	bne.n	1034 <Stack_Size+0x34>
        Verify_SendEndSimulation();
    1030:	f000 f850 	bl	10d4 <Verify_SendEndSimulation>
    
    return sut;
    1034:	7dfb      	ldrb	r3, [r7, #23]
}
    1036:	4618      	mov	r0, r3
    1038:	3718      	adds	r7, #24
    103a:	46bd      	mov	sp, r7
    103c:	bd80      	pop	{r7, pc}

0000103e <Verify_SendCResultBack>:
}

#endif

bool Verify_SendCResultBack(uint32_t cmd, uint32_t val)
{
    103e:	b580      	push	{r7, lr}
    1040:	b086      	sub	sp, #24
    1042:	af00      	add	r7, sp, #0
    1044:	6078      	str	r0, [r7, #4]
    1046:	6039      	str	r1, [r7, #0]
    uint32_t cd=0,va=0;
    1048:	2300      	movs	r3, #0
    104a:	613b      	str	r3, [r7, #16]
    104c:	2300      	movs	r3, #0
    104e:	60fb      	str	r3, [r7, #12]
    bool sut = true;
    1050:	2301      	movs	r3, #1
    1052:	75fb      	strb	r3, [r7, #23]
    
    Verify_messageSend(cmd,val);
    1054:	6839      	ldr	r1, [r7, #0]
    1056:	6878      	ldr	r0, [r7, #4]
    1058:	f7ff fd38 	bl	acc <Verify_messageSend>
	
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    105c:	e006      	b.n	106c <Verify_SendCResultBack+0x2e>
		{
			mgeprf("SCU RCMD[%X] \n",SCU->READ_CMD);
    105e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1064:	4619      	mov	r1, r3
    1066:	4818      	ldr	r0, [pc, #96]	; (10c8 <Verify_SendCResultBack+0x8a>)
    1068:	f7ff fa3e 	bl	4e8 <cm_printf>
		while(SCU->READ_CMD == VERIFY_MESSGAE_CMD)
    106c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1072:	4b16      	ldr	r3, [pc, #88]	; (10cc <Verify_SendCResultBack+0x8e>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	429a      	cmp	r2, r3
    1078:	d0f1      	beq.n	105e <Verify_SendCResultBack+0x20>
		};
		cd   = SCU->READ_CMD;
    107a:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1080:	613b      	str	r3, [r7, #16]
		va = SCU->READ_DATA;
    1082:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
    1086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1088:	60fb      	str	r3, [r7, #12]
		mgeprf("SCU cd:[%X],va[%X]\n",cd,va);
    108a:	68fa      	ldr	r2, [r7, #12]
    108c:	6939      	ldr	r1, [r7, #16]
    108e:	4810      	ldr	r0, [pc, #64]	; (10d0 <Verify_SendCResultBack+0x92>)
    1090:	f7ff fa2a 	bl	4e8 <cm_printf>
		VERIFY_MESSGAE_CMD = cd;	
    1094:	4a0d      	ldr	r2, [pc, #52]	; (10cc <Verify_SendCResultBack+0x8e>)
    1096:	693b      	ldr	r3, [r7, #16]
    1098:	6013      	str	r3, [r2, #0]
    if(!(cd == cmd && va == 1))
    109a:	693a      	ldr	r2, [r7, #16]
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	429a      	cmp	r2, r3
    10a0:	d102      	bne.n	10a8 <Verify_SendCResultBack+0x6a>
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	2b01      	cmp	r3, #1
    10a6:	d001      	beq.n	10ac <Verify_SendCResultBack+0x6e>
        sut =false;
    10a8:	2300      	movs	r3, #0
    10aa:	75fb      	strb	r3, [r7, #23]

    if(cd == BRCASE_RESULT && va==1)
    10ac:	693b      	ldr	r3, [r7, #16]
    10ae:	2b03      	cmp	r3, #3
    10b0:	d104      	bne.n	10bc <Verify_SendCResultBack+0x7e>
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d101      	bne.n	10bc <Verify_SendCResultBack+0x7e>
        Verify_SendEndSimulation();
    10b8:	f000 f80c 	bl	10d4 <Verify_SendEndSimulation>
    
    return sut;
    10bc:	7dfb      	ldrb	r3, [r7, #23]
}
    10be:	4618      	mov	r0, r3
    10c0:	3718      	adds	r7, #24
    10c2:	46bd      	mov	sp, r7
    10c4:	bd80      	pop	{r7, pc}
    10c6:	bf00      	nop
    10c8:	00001c30 	.word	0x00001c30
    10cc:	200081f0 	.word	0x200081f0
    10d0:	00001c40 	.word	0x00001c40

000010d4 <Verify_SendEndSimulation>:


void Verify_SendEndSimulation(void)
{
    10d4:	b480      	push	{r7}
    10d6:	af00      	add	r7, sp, #0
    //UART_WriteByte(UART0,0x04);
    //while(1);
}
    10d8:	bf00      	nop
    10da:	46bd      	mov	sp, r7
    10dc:	bc80      	pop	{r7}
    10de:	4770      	bx	lr

000010e0 <Verrify_SendPinConnect>:



void Verrify_SendPinConnect(MessagaConnectEn_Type Mce)
{
    10e0:	b480      	push	{r7}
    10e2:	b083      	sub	sp, #12
    10e4:	af00      	add	r7, sp, #0
    10e6:	4603      	mov	r3, r0
    10e8:	80fb      	strh	r3, [r7, #6]
    SCU->SEND_DATA = Mce;
    10ea:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    10ee:	88fb      	ldrh	r3, [r7, #6]
    10f0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    10f2:	bf00      	nop
    10f4:	370c      	adds	r7, #12
    10f6:	46bd      	mov	sp, r7
    10f8:	bc80      	pop	{r7}
    10fa:	4770      	bx	lr

000010fc <Verrify_SendPinCon>:

void Verrify_SendPinCon(uint32_t xxx)
{
    10fc:	b480      	push	{r7}
    10fe:	b083      	sub	sp, #12
    1100:	af00      	add	r7, sp, #0
    1102:	6078      	str	r0, [r7, #4]
    SCU->SEND_DATA = xxx;
    1104:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
    110c:	bf00      	nop
    110e:	370c      	adds	r7, #12
    1110:	46bd      	mov	sp, r7
    1112:	bc80      	pop	{r7}
    1114:	4770      	bx	lr

00001116 <MCU_GetTickCount>:

//##########################################################
static unsigned long g_u32TimerMsCnt = 0;

unsigned long MCU_GetTickCount(void)
{
    1116:	b480      	push	{r7}
    1118:	af00      	add	r7, sp, #0
    return g_u32TimerMsCnt;
    111a:	4b03      	ldr	r3, [pc, #12]	; (1128 <MCU_GetTickCount+0x12>)
    111c:	681b      	ldr	r3, [r3, #0]
}
    111e:	4618      	mov	r0, r3
    1120:	46bd      	mov	sp, r7
    1122:	bc80      	pop	{r7}
    1124:	4770      	bx	lr
    1126:	bf00      	nop
    1128:	200081f8 	.word	0x200081f8

0000112c <SysTick_Handler>:
#ifndef BR_FPGA
void SysTick_Handler(void)
{
    112c:	b480      	push	{r7}
    112e:	af00      	add	r7, sp, #0
  g_u32TimerMsCnt++;
    1130:	4b04      	ldr	r3, [pc, #16]	; (1144 <SysTick_Handler+0x18>)
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	3301      	adds	r3, #1
    1136:	4a03      	ldr	r2, [pc, #12]	; (1144 <SysTick_Handler+0x18>)
    1138:	6013      	str	r3, [r2, #0]
}
    113a:	bf00      	nop
    113c:	46bd      	mov	sp, r7
    113e:	bc80      	pop	{r7}
    1140:	4770      	bx	lr
    1142:	bf00      	nop
    1144:	200081f8 	.word	0x200081f8

00001148 <MCU_Sleep>:
#endif
void MCU_Sleep(unsigned int ms)
{
    1148:	b580      	push	{r7, lr}
    114a:	b084      	sub	sp, #16
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
#ifndef BR_FPGA
    unsigned long dest_time = ms + MCU_GetTickCount();
    1150:	f7ff ffe1 	bl	1116 <MCU_GetTickCount>
    1154:	4602      	mov	r2, r0
    1156:	687b      	ldr	r3, [r7, #4]
    1158:	4413      	add	r3, r2
    115a:	60fb      	str	r3, [r7, #12]
    while (MCU_GetTickCount() <= dest_time);
    115c:	bf00      	nop
    115e:	f7ff ffda 	bl	1116 <MCU_GetTickCount>
    1162:	4602      	mov	r2, r0
    1164:	68fb      	ldr	r3, [r7, #12]
    1166:	4293      	cmp	r3, r2
    1168:	d2f9      	bcs.n	115e <MCU_Sleep+0x16>
#endif
}
    116a:	bf00      	nop
    116c:	3710      	adds	r7, #16
    116e:	46bd      	mov	sp, r7
    1170:	bd80      	pop	{r7, pc}

00001172 <sysTimeUpdataClk>:
void sysTimeUpdataClk(uint32_t clk)
{
    1172:	b580      	push	{r7, lr}
    1174:	b082      	sub	sp, #8
    1176:	af00      	add	r7, sp, #0
    1178:	6078      	str	r0, [r7, #4]
    #ifndef BR_FPGA
    SysTick_Config(clk/1000);
    117a:	687b      	ldr	r3, [r7, #4]
    117c:	4a05      	ldr	r2, [pc, #20]	; (1194 <sysTimeUpdataClk+0x22>)
    117e:	fba2 2303 	umull	r2, r3, r2, r3
    1182:	099b      	lsrs	r3, r3, #6
    1184:	4618      	mov	r0, r3
    1186:	f7ff fc51 	bl	a2c <SysTick_Config>
    #endif
}
    118a:	bf00      	nop
    118c:	3708      	adds	r7, #8
    118e:	46bd      	mov	sp, r7
    1190:	bd80      	pop	{r7, pc}
    1192:	bf00      	nop
    1194:	10624dd3 	.word	0x10624dd3

00001198 <LOGUartSel>:
//#define logUart UART0
UART_TypeDef *logUart = UART0;


void  LOGUartSel(UART_TypeDef *Ux)
{
    1198:	b480      	push	{r7}
    119a:	b083      	sub	sp, #12
    119c:	af00      	add	r7, sp, #0
    119e:	6078      	str	r0, [r7, #4]
    logUart = Ux;
    11a0:	4a03      	ldr	r2, [pc, #12]	; (11b0 <LOGUartSel+0x18>)
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	6013      	str	r3, [r2, #0]
}
    11a6:	bf00      	nop
    11a8:	370c      	adds	r7, #12
    11aa:	46bd      	mov	sp, r7
    11ac:	bc80      	pop	{r7}
    11ae:	4770      	bx	lr
    11b0:	20008004 	.word	0x20008004

000011b4 <LOGUartInit>:

void LOGUartInit(void)
{
    11b4:	b580      	push	{r7, lr}
    11b6:	b086      	sub	sp, #24
    11b8:	af00      	add	r7, sp, #0
    UART_InitInfo_Type  UART_InitStru;
    PADConfig_Type      PAD_InitStru;
    
    memset(&PAD_InitStru, 0,sizeof(PADConfig_Type));
    11ba:	463b      	mov	r3, r7
    11bc:	2204      	movs	r2, #4
    11be:	2100      	movs	r1, #0
    11c0:	4618      	mov	r0, r3
    11c2:	f000 f8e1 	bl	1388 <memset>
    memset(&UART_InitStru,0,sizeof(UART_InitInfo_Type));
    11c6:	1d3b      	adds	r3, r7, #4
    11c8:	2214      	movs	r2, #20
    11ca:	2100      	movs	r1, #0
    11cc:	4618      	mov	r0, r3
    11ce:	f000 f8db 	bl	1388 <memset>

    if(logUart == UART0) {
    11d2:	4b31      	ldr	r3, [pc, #196]	; (1298 <LOGUartInit+0xe4>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	4a31      	ldr	r2, [pc, #196]	; (129c <LOGUartInit+0xe8>)
    11d8:	4293      	cmp	r3, r2
    11da:	d104      	bne.n	11e6 <LOGUartInit+0x32>
        SystemDevClockCtl(UART0_CKEn,true);
    11dc:	2101      	movs	r1, #1
    11de:	2004      	movs	r0, #4
    11e0:	f7ff f896 	bl	310 <SystemDevClockCtl>
    11e4:	e003      	b.n	11ee <LOGUartInit+0x3a>
#if defined(BR005)
        SystemDevClockCtl(UART0_SCKEn,true);
#endif
    }else{
        SystemDevClockCtl(UART1_CKEn,true);
    11e6:	2101      	movs	r1, #1
    11e8:	2005      	movs	r0, #5
    11ea:	f7ff f891 	bl	310 <SystemDevClockCtl>
    }
    if(logUart == UART0) {
    11ee:	4b2a      	ldr	r3, [pc, #168]	; (1298 <LOGUartInit+0xe4>)
    11f0:	681b      	ldr	r3, [r3, #0]
    11f2:	4a2a      	ldr	r2, [pc, #168]	; (129c <LOGUartInit+0xe8>)
    11f4:	4293      	cmp	r3, r2
    11f6:	d118      	bne.n	122a <LOGUartInit+0x76>
        PAD_InitStru.pad_ctl = PAD_MODE0;
    11f8:	783b      	ldrb	r3, [r7, #0]
    11fa:	f36f 1306 	bfc	r3, #4, #3
    11fe:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID0,&PAD_InitStru);
    1200:	463b      	mov	r3, r7
    1202:	4619      	mov	r1, r3
    1204:	2000      	movs	r0, #0
    1206:	f7ff f8bf 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID1,&PAD_InitStru);
    120a:	463b      	mov	r3, r7
    120c:	4619      	mov	r1, r3
    120e:	2001      	movs	r0, #1
    1210:	f7ff f8ba 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID2,&PAD_InitStru);
    1214:	463b      	mov	r3, r7
    1216:	4619      	mov	r1, r3
    1218:	2002      	movs	r0, #2
    121a:	f7ff f8b5 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID3,&PAD_InitStru);
    121e:	463b      	mov	r3, r7
    1220:	4619      	mov	r1, r3
    1222:	2003      	movs	r0, #3
    1224:	f7ff f8b0 	bl	388 <SystemPADConfig>
    1228:	e018      	b.n	125c <LOGUartInit+0xa8>
    }else{
        PAD_InitStru.pad_ctl = PAD_MODE1;
    122a:	783b      	ldrb	r3, [r7, #0]
    122c:	2201      	movs	r2, #1
    122e:	f362 1306 	bfi	r3, r2, #4, #3
    1232:	703b      	strb	r3, [r7, #0]
        SystemPADConfig(PADID15,&PAD_InitStru);
    1234:	463b      	mov	r3, r7
    1236:	4619      	mov	r1, r3
    1238:	200f      	movs	r0, #15
    123a:	f7ff f8a5 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID16,&PAD_InitStru);
    123e:	463b      	mov	r3, r7
    1240:	4619      	mov	r1, r3
    1242:	2010      	movs	r0, #16
    1244:	f7ff f8a0 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID27,&PAD_InitStru);
    1248:	463b      	mov	r3, r7
    124a:	4619      	mov	r1, r3
    124c:	201b      	movs	r0, #27
    124e:	f7ff f89b 	bl	388 <SystemPADConfig>
        SystemPADConfig(PADID28,&PAD_InitStru);
    1252:	463b      	mov	r3, r7
    1254:	4619      	mov	r1, r3
    1256:	201c      	movs	r0, #28
    1258:	f7ff f896 	bl	388 <SystemPADConfig>

    }

    UART_InitStru.UART_BaudRate             = 921600;
    125c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
    1260:	607b      	str	r3, [r7, #4]
    UART_InitStru.UART_WordLength           = UART_WL_8BITS;
    1262:	2303      	movs	r3, #3
    1264:	813b      	strh	r3, [r7, #8]
    UART_InitStru.UART_StopBits             = UART_SB_1BIT;
    1266:	2300      	movs	r3, #0
    1268:	817b      	strh	r3, [r7, #10]
    UART_InitStru.UART_ParityMode           = UART_PM_NONE;
    126a:	2300      	movs	r3, #0
    126c:	81bb      	strh	r3, [r7, #12]
    UART_InitStru.UART_HardwareFlowControl  = UART_FC_NONE;
    126e:	2300      	movs	r3, #0
    1270:	81fb      	strh	r3, [r7, #14]
    UART_InitStru.UART_FIFOMode             = UART_FM_ENABLE;
    1272:	2301      	movs	r3, #1
    1274:	827b      	strh	r3, [r7, #18]
    UART_InitStru.UART_DMAMode              = UART_DM_MODE_0;
    1276:	2300      	movs	r3, #0
    1278:	823b      	strh	r3, [r7, #16]
    UART_InitStru.UART_TX_FIFOTriggerMode   = UART_TT_EMPTY;
    127a:	2300      	movs	r3, #0
    127c:	82bb      	strh	r3, [r7, #20]
    UART_InitStru.UART_RX_FIFOTriggerMode   = UART_RT_1_CHARACTER; 
    127e:	2300      	movs	r3, #0
    1280:	82fb      	strh	r3, [r7, #22]
    UART_Init(logUart, &UART_InitStru); 
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <LOGUartInit+0xe4>)
    1284:	681b      	ldr	r3, [r3, #0]
    1286:	1d3a      	adds	r2, r7, #4
    1288:	4611      	mov	r1, r2
    128a:	4618      	mov	r0, r3
    128c:	f7ff f9ae 	bl	5ec <UART_Init>
}
    1290:	bf00      	nop
    1292:	3718      	adds	r7, #24
    1294:	46bd      	mov	sp, r7
    1296:	bd80      	pop	{r7, pc}
    1298:	20008004 	.word	0x20008004
    129c:	90002000 	.word	0x90002000

000012a0 <c_printf>:

int c_printf(const char *fmt, ...)
{
    12a0:	b40f      	push	{r0, r1, r2, r3}
    12a2:	b580      	push	{r7, lr}
    12a4:	b082      	sub	sp, #8
    12a6:	af00      	add	r7, sp, #0
    static unsigned char s_tmp_buf[128];
    int r;
    va_list arglist;
    
    va_start(arglist, fmt);
    12a8:	f107 0314 	add.w	r3, r7, #20
    12ac:	603b      	str	r3, [r7, #0]
    r = vsprintf((char *)s_tmp_buf, fmt, arglist);
    12ae:	683a      	ldr	r2, [r7, #0]
    12b0:	6939      	ldr	r1, [r7, #16]
    12b2:	480a      	ldr	r0, [pc, #40]	; (12dc <c_printf+0x3c>)
    12b4:	f000 f886 	bl	13c4 <vsiprintf>
    12b8:	6078      	str	r0, [r7, #4]
    UART_WriteData(logUart, s_tmp_buf, r);
    12ba:	4b09      	ldr	r3, [pc, #36]	; (12e0 <c_printf+0x40>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	b292      	uxth	r2, r2
    12c2:	4906      	ldr	r1, [pc, #24]	; (12dc <c_printf+0x3c>)
    12c4:	4618      	mov	r0, r3
    12c6:	f7ff faa9 	bl	81c <UART_WriteData>
    va_end(arglist);
    
    return r;
    12ca:	687b      	ldr	r3, [r7, #4]
}
    12cc:	4618      	mov	r0, r3
    12ce:	3708      	adds	r7, #8
    12d0:	46bd      	mov	sp, r7
    12d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    12d6:	b004      	add	sp, #16
    12d8:	4770      	bx	lr
    12da:	bf00      	nop
    12dc:	200081fc 	.word	0x200081fc
    12e0:	20008004 	.word	0x20008004

000012e4 <SimulationEnd>:

void  SimulationEnd(void)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	af00      	add	r7, sp, #0
    while(!UART_LSRCheckBits(logUart,UART_LSR_BIT_THRE));
    12e8:	bf00      	nop
    12ea:	4b08      	ldr	r3, [pc, #32]	; (130c <SimulationEnd+0x28>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	2120      	movs	r1, #32
    12f0:	4618      	mov	r0, r3
    12f2:	f7ff fb11 	bl	918 <UART_LSRCheckBits>
    12f6:	4603      	mov	r3, r0
    12f8:	2b00      	cmp	r3, #0
    12fa:	d0f6      	beq.n	12ea <SimulationEnd+0x6>
    UART_WriteByte(logUart,0x04);
    12fc:	4b03      	ldr	r3, [pc, #12]	; (130c <SimulationEnd+0x28>)
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	2104      	movs	r1, #4
    1302:	4618      	mov	r0, r3
    1304:	f7ff fa7c 	bl	800 <UART_WriteByte>
}
    1308:	bf00      	nop
    130a:	bd80      	pop	{r7, pc}
    130c:	20008004 	.word	0x20008004

00001310 <main>:
#include "verify_message.h"
#include "log_uart_config.h"


int main (void)
{
    1310:	b580      	push	{r7, lr}
    1312:	af00      	add	r7, sp, #0
    // LOG UART INIT
    sysTimeUpdataClk(SystemCoreClock);
    1314:	4b09      	ldr	r3, [pc, #36]	; (133c <main+0x2c>)
    1316:	681b      	ldr	r3, [r3, #0]
    1318:	4618      	mov	r0, r3
    131a:	f7ff ff2a 	bl	1172 <sysTimeUpdataClk>
    Verrify_SendPinConnect(UART0_OUTPUT);
    131e:	f24a 0002 	movw	r0, #40962	; 0xa002
    1322:	f7ff fedd 	bl	10e0 <Verrify_SendPinConnect>
    LOGUartInit();
    1326:	f7ff ff45 	bl	11b4 <LOGUartInit>
    c_printf("Hello Word! \r\n"); 
    132a:	4805      	ldr	r0, [pc, #20]	; (1340 <main+0x30>)
    132c:	f7ff ffb8 	bl	12a0 <c_printf>
	MCU_Sleep(3);
    1330:	2003      	movs	r0, #3
    1332:	f7ff ff09 	bl	1148 <MCU_Sleep>
    SimulationEnd();
    1336:	f7ff ffd5 	bl	12e4 <SimulationEnd>

    while(1){     
    133a:	e7fe      	b.n	133a <main+0x2a>
    133c:	20008000 	.word	0x20008000
    1340:	00001c54 	.word	0x00001c54

00001344 <exit>:
    1344:	b508      	push	{r3, lr}
    1346:	4b07      	ldr	r3, [pc, #28]	; (1364 <exit+0x20>)
    1348:	4604      	mov	r4, r0
    134a:	b113      	cbz	r3, 1352 <exit+0xe>
    134c:	2100      	movs	r1, #0
    134e:	f3af 8000 	nop.w
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <exit+0x24>)
    1354:	6818      	ldr	r0, [r3, #0]
    1356:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1358:	b103      	cbz	r3, 135c <exit+0x18>
    135a:	4798      	blx	r3
    135c:	4620      	mov	r0, r4
    135e:	f000 fc43 	bl	1be8 <_exit>
    1362:	bf00      	nop
    1364:	00000000 	.word	0x00000000
    1368:	00001c64 	.word	0x00001c64

0000136c <memcpy>:
    136c:	440a      	add	r2, r1
    136e:	4291      	cmp	r1, r2
    1370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1374:	d100      	bne.n	1378 <memcpy+0xc>
    1376:	4770      	bx	lr
    1378:	b510      	push	{r4, lr}
    137a:	f811 4b01 	ldrb.w	r4, [r1], #1
    137e:	4291      	cmp	r1, r2
    1380:	f803 4f01 	strb.w	r4, [r3, #1]!
    1384:	d1f9      	bne.n	137a <memcpy+0xe>
    1386:	bd10      	pop	{r4, pc}

00001388 <memset>:
    1388:	4603      	mov	r3, r0
    138a:	4402      	add	r2, r0
    138c:	4293      	cmp	r3, r2
    138e:	d100      	bne.n	1392 <memset+0xa>
    1390:	4770      	bx	lr
    1392:	f803 1b01 	strb.w	r1, [r3], #1
    1396:	e7f9      	b.n	138c <memset+0x4>

00001398 <_vsiprintf_r>:
    1398:	b500      	push	{lr}
    139a:	b09b      	sub	sp, #108	; 0x6c
    139c:	9100      	str	r1, [sp, #0]
    139e:	9104      	str	r1, [sp, #16]
    13a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    13a4:	9105      	str	r1, [sp, #20]
    13a6:	9102      	str	r1, [sp, #8]
    13a8:	4905      	ldr	r1, [pc, #20]	; (13c0 <_vsiprintf_r+0x28>)
    13aa:	9103      	str	r1, [sp, #12]
    13ac:	4669      	mov	r1, sp
    13ae:	f000 f86f 	bl	1490 <_svfiprintf_r>
    13b2:	2200      	movs	r2, #0
    13b4:	9b00      	ldr	r3, [sp, #0]
    13b6:	701a      	strb	r2, [r3, #0]
    13b8:	b01b      	add	sp, #108	; 0x6c
    13ba:	f85d fb04 	ldr.w	pc, [sp], #4
    13be:	bf00      	nop
    13c0:	ffff0208 	.word	0xffff0208

000013c4 <vsiprintf>:
    13c4:	4613      	mov	r3, r2
    13c6:	460a      	mov	r2, r1
    13c8:	4601      	mov	r1, r0
    13ca:	4802      	ldr	r0, [pc, #8]	; (13d4 <vsiprintf+0x10>)
    13cc:	6800      	ldr	r0, [r0, #0]
    13ce:	f7ff bfe3 	b.w	1398 <_vsiprintf_r>
    13d2:	bf00      	nop
    13d4:	20008008 	.word	0x20008008

000013d8 <__ssputs_r>:
    13d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13dc:	688e      	ldr	r6, [r1, #8]
    13de:	4682      	mov	sl, r0
    13e0:	429e      	cmp	r6, r3
    13e2:	460c      	mov	r4, r1
    13e4:	4691      	mov	r9, r2
    13e6:	4698      	mov	r8, r3
    13e8:	d838      	bhi.n	145c <__ssputs_r+0x84>
    13ea:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    13ee:	f41c 6f90 	tst.w	ip, #1152	; 0x480
    13f2:	d031      	beq.n	1458 <__ssputs_r+0x80>
    13f4:	6962      	ldr	r2, [r4, #20]
    13f6:	6825      	ldr	r5, [r4, #0]
    13f8:	6909      	ldr	r1, [r1, #16]
    13fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    13fe:	1a6f      	subs	r7, r5, r1
    1400:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    1404:	3301      	adds	r3, #1
    1406:	1055      	asrs	r5, r2, #1
    1408:	443b      	add	r3, r7
    140a:	429d      	cmp	r5, r3
    140c:	bf38      	it	cc
    140e:	461d      	movcc	r5, r3
    1410:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    1414:	d030      	beq.n	1478 <__ssputs_r+0xa0>
    1416:	4629      	mov	r1, r5
    1418:	f000 fb32 	bl	1a80 <_malloc_r>
    141c:	4606      	mov	r6, r0
    141e:	b950      	cbnz	r0, 1436 <__ssputs_r+0x5e>
    1420:	230c      	movs	r3, #12
    1422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1426:	f8ca 3000 	str.w	r3, [sl]
    142a:	89a3      	ldrh	r3, [r4, #12]
    142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1430:	81a3      	strh	r3, [r4, #12]
    1432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1436:	463a      	mov	r2, r7
    1438:	6921      	ldr	r1, [r4, #16]
    143a:	f7ff ff97 	bl	136c <memcpy>
    143e:	89a3      	ldrh	r3, [r4, #12]
    1440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1448:	81a3      	strh	r3, [r4, #12]
    144a:	6126      	str	r6, [r4, #16]
    144c:	443e      	add	r6, r7
    144e:	6026      	str	r6, [r4, #0]
    1450:	4646      	mov	r6, r8
    1452:	6165      	str	r5, [r4, #20]
    1454:	1bed      	subs	r5, r5, r7
    1456:	60a5      	str	r5, [r4, #8]
    1458:	4546      	cmp	r6, r8
    145a:	d900      	bls.n	145e <__ssputs_r+0x86>
    145c:	4646      	mov	r6, r8
    145e:	4632      	mov	r2, r6
    1460:	4649      	mov	r1, r9
    1462:	6820      	ldr	r0, [r4, #0]
    1464:	f000 faa6 	bl	19b4 <memmove>
    1468:	68a3      	ldr	r3, [r4, #8]
    146a:	2000      	movs	r0, #0
    146c:	1b9b      	subs	r3, r3, r6
    146e:	60a3      	str	r3, [r4, #8]
    1470:	6823      	ldr	r3, [r4, #0]
    1472:	441e      	add	r6, r3
    1474:	6026      	str	r6, [r4, #0]
    1476:	e7dc      	b.n	1432 <__ssputs_r+0x5a>
    1478:	462a      	mov	r2, r5
    147a:	f000 fb5b 	bl	1b34 <_realloc_r>
    147e:	4606      	mov	r6, r0
    1480:	2800      	cmp	r0, #0
    1482:	d1e2      	bne.n	144a <__ssputs_r+0x72>
    1484:	6921      	ldr	r1, [r4, #16]
    1486:	4650      	mov	r0, sl
    1488:	f000 faae 	bl	19e8 <_free_r>
    148c:	e7c8      	b.n	1420 <__ssputs_r+0x48>
	...

00001490 <_svfiprintf_r>:
    1490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1494:	461e      	mov	r6, r3
    1496:	898b      	ldrh	r3, [r1, #12]
    1498:	b09d      	sub	sp, #116	; 0x74
    149a:	061b      	lsls	r3, r3, #24
    149c:	4607      	mov	r7, r0
    149e:	460d      	mov	r5, r1
    14a0:	4614      	mov	r4, r2
    14a2:	d50e      	bpl.n	14c2 <_svfiprintf_r+0x32>
    14a4:	690b      	ldr	r3, [r1, #16]
    14a6:	b963      	cbnz	r3, 14c2 <_svfiprintf_r+0x32>
    14a8:	2140      	movs	r1, #64	; 0x40
    14aa:	f000 fae9 	bl	1a80 <_malloc_r>
    14ae:	6028      	str	r0, [r5, #0]
    14b0:	6128      	str	r0, [r5, #16]
    14b2:	b920      	cbnz	r0, 14be <_svfiprintf_r+0x2e>
    14b4:	230c      	movs	r3, #12
    14b6:	603b      	str	r3, [r7, #0]
    14b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14bc:	e0c9      	b.n	1652 <_svfiprintf_r+0x1c2>
    14be:	2340      	movs	r3, #64	; 0x40
    14c0:	616b      	str	r3, [r5, #20]
    14c2:	2300      	movs	r3, #0
    14c4:	9309      	str	r3, [sp, #36]	; 0x24
    14c6:	2320      	movs	r3, #32
    14c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    14cc:	2330      	movs	r3, #48	; 0x30
    14ce:	f04f 0a01 	mov.w	sl, #1
    14d2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 166c <_svfiprintf_r+0x1dc>
    14d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    14da:	9603      	str	r6, [sp, #12]
    14dc:	4623      	mov	r3, r4
    14de:	461e      	mov	r6, r3
    14e0:	f813 2b01 	ldrb.w	r2, [r3], #1
    14e4:	b10a      	cbz	r2, 14ea <_svfiprintf_r+0x5a>
    14e6:	2a25      	cmp	r2, #37	; 0x25
    14e8:	d1f9      	bne.n	14de <_svfiprintf_r+0x4e>
    14ea:	ebb6 0b04 	subs.w	fp, r6, r4
    14ee:	d00b      	beq.n	1508 <_svfiprintf_r+0x78>
    14f0:	465b      	mov	r3, fp
    14f2:	4622      	mov	r2, r4
    14f4:	4629      	mov	r1, r5
    14f6:	4638      	mov	r0, r7
    14f8:	f7ff ff6e 	bl	13d8 <__ssputs_r>
    14fc:	3001      	adds	r0, #1
    14fe:	f000 80a3 	beq.w	1648 <_svfiprintf_r+0x1b8>
    1502:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1504:	445b      	add	r3, fp
    1506:	9309      	str	r3, [sp, #36]	; 0x24
    1508:	7833      	ldrb	r3, [r6, #0]
    150a:	2b00      	cmp	r3, #0
    150c:	f000 809c 	beq.w	1648 <_svfiprintf_r+0x1b8>
    1510:	2300      	movs	r3, #0
    1512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1516:	e9cd 2305 	strd	r2, r3, [sp, #20]
    151a:	3601      	adds	r6, #1
    151c:	9304      	str	r3, [sp, #16]
    151e:	9307      	str	r3, [sp, #28]
    1520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1524:	931a      	str	r3, [sp, #104]	; 0x68
    1526:	4634      	mov	r4, r6
    1528:	2205      	movs	r2, #5
    152a:	f814 1b01 	ldrb.w	r1, [r4], #1
    152e:	484f      	ldr	r0, [pc, #316]	; (166c <_svfiprintf_r+0x1dc>)
    1530:	f000 fa32 	bl	1998 <memchr>
    1534:	9b04      	ldr	r3, [sp, #16]
    1536:	b9c0      	cbnz	r0, 156a <_svfiprintf_r+0xda>
    1538:	06d9      	lsls	r1, r3, #27
    153a:	bf44      	itt	mi
    153c:	2220      	movmi	r2, #32
    153e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1542:	071a      	lsls	r2, r3, #28
    1544:	bf44      	itt	mi
    1546:	222b      	movmi	r2, #43	; 0x2b
    1548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    154c:	7832      	ldrb	r2, [r6, #0]
    154e:	2a2a      	cmp	r2, #42	; 0x2a
    1550:	d013      	beq.n	157a <_svfiprintf_r+0xea>
    1552:	4634      	mov	r4, r6
    1554:	2000      	movs	r0, #0
    1556:	260a      	movs	r6, #10
    1558:	9a07      	ldr	r2, [sp, #28]
    155a:	4621      	mov	r1, r4
    155c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1560:	3b30      	subs	r3, #48	; 0x30
    1562:	2b09      	cmp	r3, #9
    1564:	d94b      	bls.n	15fe <_svfiprintf_r+0x16e>
    1566:	b970      	cbnz	r0, 1586 <_svfiprintf_r+0xf6>
    1568:	e014      	b.n	1594 <_svfiprintf_r+0x104>
    156a:	eba0 0009 	sub.w	r0, r0, r9
    156e:	fa0a f000 	lsl.w	r0, sl, r0
    1572:	4318      	orrs	r0, r3
    1574:	9004      	str	r0, [sp, #16]
    1576:	4626      	mov	r6, r4
    1578:	e7d5      	b.n	1526 <_svfiprintf_r+0x96>
    157a:	9a03      	ldr	r2, [sp, #12]
    157c:	1d11      	adds	r1, r2, #4
    157e:	6812      	ldr	r2, [r2, #0]
    1580:	9103      	str	r1, [sp, #12]
    1582:	2a00      	cmp	r2, #0
    1584:	db01      	blt.n	158a <_svfiprintf_r+0xfa>
    1586:	9207      	str	r2, [sp, #28]
    1588:	e004      	b.n	1594 <_svfiprintf_r+0x104>
    158a:	4252      	negs	r2, r2
    158c:	f043 0302 	orr.w	r3, r3, #2
    1590:	9207      	str	r2, [sp, #28]
    1592:	9304      	str	r3, [sp, #16]
    1594:	7823      	ldrb	r3, [r4, #0]
    1596:	2b2e      	cmp	r3, #46	; 0x2e
    1598:	d10c      	bne.n	15b4 <_svfiprintf_r+0x124>
    159a:	7863      	ldrb	r3, [r4, #1]
    159c:	2b2a      	cmp	r3, #42	; 0x2a
    159e:	d133      	bne.n	1608 <_svfiprintf_r+0x178>
    15a0:	9b03      	ldr	r3, [sp, #12]
    15a2:	3402      	adds	r4, #2
    15a4:	1d1a      	adds	r2, r3, #4
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	9203      	str	r2, [sp, #12]
    15aa:	2b00      	cmp	r3, #0
    15ac:	bfb8      	it	lt
    15ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    15b2:	9305      	str	r3, [sp, #20]
    15b4:	4e2e      	ldr	r6, [pc, #184]	; (1670 <_svfiprintf_r+0x1e0>)
    15b6:	2203      	movs	r2, #3
    15b8:	7821      	ldrb	r1, [r4, #0]
    15ba:	4630      	mov	r0, r6
    15bc:	f000 f9ec 	bl	1998 <memchr>
    15c0:	b138      	cbz	r0, 15d2 <_svfiprintf_r+0x142>
    15c2:	2340      	movs	r3, #64	; 0x40
    15c4:	1b80      	subs	r0, r0, r6
    15c6:	fa03 f000 	lsl.w	r0, r3, r0
    15ca:	9b04      	ldr	r3, [sp, #16]
    15cc:	3401      	adds	r4, #1
    15ce:	4303      	orrs	r3, r0
    15d0:	9304      	str	r3, [sp, #16]
    15d2:	f814 1b01 	ldrb.w	r1, [r4], #1
    15d6:	2206      	movs	r2, #6
    15d8:	4826      	ldr	r0, [pc, #152]	; (1674 <_svfiprintf_r+0x1e4>)
    15da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    15de:	f000 f9db 	bl	1998 <memchr>
    15e2:	2800      	cmp	r0, #0
    15e4:	d038      	beq.n	1658 <_svfiprintf_r+0x1c8>
    15e6:	4b24      	ldr	r3, [pc, #144]	; (1678 <_svfiprintf_r+0x1e8>)
    15e8:	bb13      	cbnz	r3, 1630 <_svfiprintf_r+0x1a0>
    15ea:	9b03      	ldr	r3, [sp, #12]
    15ec:	3307      	adds	r3, #7
    15ee:	f023 0307 	bic.w	r3, r3, #7
    15f2:	3308      	adds	r3, #8
    15f4:	9303      	str	r3, [sp, #12]
    15f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15f8:	4443      	add	r3, r8
    15fa:	9309      	str	r3, [sp, #36]	; 0x24
    15fc:	e76e      	b.n	14dc <_svfiprintf_r+0x4c>
    15fe:	fb06 3202 	mla	r2, r6, r2, r3
    1602:	2001      	movs	r0, #1
    1604:	460c      	mov	r4, r1
    1606:	e7a8      	b.n	155a <_svfiprintf_r+0xca>
    1608:	2300      	movs	r3, #0
    160a:	260a      	movs	r6, #10
    160c:	4619      	mov	r1, r3
    160e:	3401      	adds	r4, #1
    1610:	9305      	str	r3, [sp, #20]
    1612:	4620      	mov	r0, r4
    1614:	f810 2b01 	ldrb.w	r2, [r0], #1
    1618:	3a30      	subs	r2, #48	; 0x30
    161a:	2a09      	cmp	r2, #9
    161c:	d903      	bls.n	1626 <_svfiprintf_r+0x196>
    161e:	2b00      	cmp	r3, #0
    1620:	d0c8      	beq.n	15b4 <_svfiprintf_r+0x124>
    1622:	9105      	str	r1, [sp, #20]
    1624:	e7c6      	b.n	15b4 <_svfiprintf_r+0x124>
    1626:	fb06 2101 	mla	r1, r6, r1, r2
    162a:	2301      	movs	r3, #1
    162c:	4604      	mov	r4, r0
    162e:	e7f0      	b.n	1612 <_svfiprintf_r+0x182>
    1630:	ab03      	add	r3, sp, #12
    1632:	9300      	str	r3, [sp, #0]
    1634:	462a      	mov	r2, r5
    1636:	4b11      	ldr	r3, [pc, #68]	; (167c <_svfiprintf_r+0x1ec>)
    1638:	a904      	add	r1, sp, #16
    163a:	4638      	mov	r0, r7
    163c:	f3af 8000 	nop.w
    1640:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1644:	4680      	mov	r8, r0
    1646:	d1d6      	bne.n	15f6 <_svfiprintf_r+0x166>
    1648:	89ab      	ldrh	r3, [r5, #12]
    164a:	065b      	lsls	r3, r3, #25
    164c:	f53f af34 	bmi.w	14b8 <_svfiprintf_r+0x28>
    1650:	9809      	ldr	r0, [sp, #36]	; 0x24
    1652:	b01d      	add	sp, #116	; 0x74
    1654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1658:	ab03      	add	r3, sp, #12
    165a:	9300      	str	r3, [sp, #0]
    165c:	462a      	mov	r2, r5
    165e:	4b07      	ldr	r3, [pc, #28]	; (167c <_svfiprintf_r+0x1ec>)
    1660:	a904      	add	r1, sp, #16
    1662:	4638      	mov	r0, r7
    1664:	f000 f882 	bl	176c <_printf_i>
    1668:	e7ea      	b.n	1640 <_svfiprintf_r+0x1b0>
    166a:	bf00      	nop
    166c:	00001c68 	.word	0x00001c68
    1670:	00001c6e 	.word	0x00001c6e
    1674:	00001c72 	.word	0x00001c72
    1678:	00000000 	.word	0x00000000
    167c:	000013d9 	.word	0x000013d9

00001680 <_printf_common>:
    1680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1684:	4691      	mov	r9, r2
    1686:	461f      	mov	r7, r3
    1688:	688a      	ldr	r2, [r1, #8]
    168a:	690b      	ldr	r3, [r1, #16]
    168c:	4606      	mov	r6, r0
    168e:	4293      	cmp	r3, r2
    1690:	bfb8      	it	lt
    1692:	4613      	movlt	r3, r2
    1694:	f8c9 3000 	str.w	r3, [r9]
    1698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    169c:	460c      	mov	r4, r1
    169e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16a2:	b112      	cbz	r2, 16aa <_printf_common+0x2a>
    16a4:	3301      	adds	r3, #1
    16a6:	f8c9 3000 	str.w	r3, [r9]
    16aa:	6823      	ldr	r3, [r4, #0]
    16ac:	0699      	lsls	r1, r3, #26
    16ae:	bf42      	ittt	mi
    16b0:	f8d9 3000 	ldrmi.w	r3, [r9]
    16b4:	3302      	addmi	r3, #2
    16b6:	f8c9 3000 	strmi.w	r3, [r9]
    16ba:	6825      	ldr	r5, [r4, #0]
    16bc:	f015 0506 	ands.w	r5, r5, #6
    16c0:	d107      	bne.n	16d2 <_printf_common+0x52>
    16c2:	f104 0a19 	add.w	sl, r4, #25
    16c6:	68e3      	ldr	r3, [r4, #12]
    16c8:	f8d9 2000 	ldr.w	r2, [r9]
    16cc:	1a9b      	subs	r3, r3, r2
    16ce:	42ab      	cmp	r3, r5
    16d0:	dc29      	bgt.n	1726 <_printf_common+0xa6>
    16d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    16d6:	6822      	ldr	r2, [r4, #0]
    16d8:	3300      	adds	r3, #0
    16da:	bf18      	it	ne
    16dc:	2301      	movne	r3, #1
    16de:	0692      	lsls	r2, r2, #26
    16e0:	d42e      	bmi.n	1740 <_printf_common+0xc0>
    16e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    16e6:	4639      	mov	r1, r7
    16e8:	4630      	mov	r0, r6
    16ea:	47c0      	blx	r8
    16ec:	3001      	adds	r0, #1
    16ee:	d021      	beq.n	1734 <_printf_common+0xb4>
    16f0:	6823      	ldr	r3, [r4, #0]
    16f2:	68e5      	ldr	r5, [r4, #12]
    16f4:	f003 0306 	and.w	r3, r3, #6
    16f8:	2b04      	cmp	r3, #4
    16fa:	bf18      	it	ne
    16fc:	2500      	movne	r5, #0
    16fe:	f8d9 2000 	ldr.w	r2, [r9]
    1702:	f04f 0900 	mov.w	r9, #0
    1706:	bf08      	it	eq
    1708:	1aad      	subeq	r5, r5, r2
    170a:	68a3      	ldr	r3, [r4, #8]
    170c:	6922      	ldr	r2, [r4, #16]
    170e:	bf08      	it	eq
    1710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1714:	4293      	cmp	r3, r2
    1716:	bfc4      	itt	gt
    1718:	1a9b      	subgt	r3, r3, r2
    171a:	18ed      	addgt	r5, r5, r3
    171c:	341a      	adds	r4, #26
    171e:	454d      	cmp	r5, r9
    1720:	d11a      	bne.n	1758 <_printf_common+0xd8>
    1722:	2000      	movs	r0, #0
    1724:	e008      	b.n	1738 <_printf_common+0xb8>
    1726:	2301      	movs	r3, #1
    1728:	4652      	mov	r2, sl
    172a:	4639      	mov	r1, r7
    172c:	4630      	mov	r0, r6
    172e:	47c0      	blx	r8
    1730:	3001      	adds	r0, #1
    1732:	d103      	bne.n	173c <_printf_common+0xbc>
    1734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    173c:	3501      	adds	r5, #1
    173e:	e7c2      	b.n	16c6 <_printf_common+0x46>
    1740:	2030      	movs	r0, #48	; 0x30
    1742:	18e1      	adds	r1, r4, r3
    1744:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1748:	1c5a      	adds	r2, r3, #1
    174a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    174e:	4422      	add	r2, r4
    1750:	3302      	adds	r3, #2
    1752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1756:	e7c4      	b.n	16e2 <_printf_common+0x62>
    1758:	2301      	movs	r3, #1
    175a:	4622      	mov	r2, r4
    175c:	4639      	mov	r1, r7
    175e:	4630      	mov	r0, r6
    1760:	47c0      	blx	r8
    1762:	3001      	adds	r0, #1
    1764:	d0e6      	beq.n	1734 <_printf_common+0xb4>
    1766:	f109 0901 	add.w	r9, r9, #1
    176a:	e7d8      	b.n	171e <_printf_common+0x9e>

0000176c <_printf_i>:
    176c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1770:	4606      	mov	r6, r0
    1772:	460c      	mov	r4, r1
    1774:	f101 0043 	add.w	r0, r1, #67	; 0x43
    1778:	7e09      	ldrb	r1, [r1, #24]
    177a:	b085      	sub	sp, #20
    177c:	296e      	cmp	r1, #110	; 0x6e
    177e:	4698      	mov	r8, r3
    1780:	4617      	mov	r7, r2
    1782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1784:	f000 80bb 	beq.w	18fe <_printf_i+0x192>
    1788:	d824      	bhi.n	17d4 <_printf_i+0x68>
    178a:	2963      	cmp	r1, #99	; 0x63
    178c:	d039      	beq.n	1802 <_printf_i+0x96>
    178e:	d80a      	bhi.n	17a6 <_printf_i+0x3a>
    1790:	2900      	cmp	r1, #0
    1792:	f000 80c4 	beq.w	191e <_printf_i+0x1b2>
    1796:	2958      	cmp	r1, #88	; 0x58
    1798:	f000 8092 	beq.w	18c0 <_printf_i+0x154>
    179c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    17a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    17a4:	e035      	b.n	1812 <_printf_i+0xa6>
    17a6:	2964      	cmp	r1, #100	; 0x64
    17a8:	d001      	beq.n	17ae <_printf_i+0x42>
    17aa:	2969      	cmp	r1, #105	; 0x69
    17ac:	d1f6      	bne.n	179c <_printf_i+0x30>
    17ae:	6825      	ldr	r5, [r4, #0]
    17b0:	681a      	ldr	r2, [r3, #0]
    17b2:	f015 0f80 	tst.w	r5, #128	; 0x80
    17b6:	f102 0104 	add.w	r1, r2, #4
    17ba:	d02c      	beq.n	1816 <_printf_i+0xaa>
    17bc:	6812      	ldr	r2, [r2, #0]
    17be:	6019      	str	r1, [r3, #0]
    17c0:	2a00      	cmp	r2, #0
    17c2:	da03      	bge.n	17cc <_printf_i+0x60>
    17c4:	232d      	movs	r3, #45	; 0x2d
    17c6:	4252      	negs	r2, r2
    17c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    17cc:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 1990 <_printf_i+0x224>
    17d0:	230a      	movs	r3, #10
    17d2:	e03f      	b.n	1854 <_printf_i+0xe8>
    17d4:	2973      	cmp	r1, #115	; 0x73
    17d6:	f000 80a6 	beq.w	1926 <_printf_i+0x1ba>
    17da:	d808      	bhi.n	17ee <_printf_i+0x82>
    17dc:	296f      	cmp	r1, #111	; 0x6f
    17de:	d021      	beq.n	1824 <_printf_i+0xb8>
    17e0:	2970      	cmp	r1, #112	; 0x70
    17e2:	d1db      	bne.n	179c <_printf_i+0x30>
    17e4:	6822      	ldr	r2, [r4, #0]
    17e6:	f042 0220 	orr.w	r2, r2, #32
    17ea:	6022      	str	r2, [r4, #0]
    17ec:	e003      	b.n	17f6 <_printf_i+0x8a>
    17ee:	2975      	cmp	r1, #117	; 0x75
    17f0:	d018      	beq.n	1824 <_printf_i+0xb8>
    17f2:	2978      	cmp	r1, #120	; 0x78
    17f4:	d1d2      	bne.n	179c <_printf_i+0x30>
    17f6:	2278      	movs	r2, #120	; 0x78
    17f8:	f8df c198 	ldr.w	ip, [pc, #408]	; 1994 <_printf_i+0x228>
    17fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    1800:	e062      	b.n	18c8 <_printf_i+0x15c>
    1802:	681a      	ldr	r2, [r3, #0]
    1804:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1808:	1d11      	adds	r1, r2, #4
    180a:	6019      	str	r1, [r3, #0]
    180c:	6813      	ldr	r3, [r2, #0]
    180e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1812:	2301      	movs	r3, #1
    1814:	e094      	b.n	1940 <_printf_i+0x1d4>
    1816:	6812      	ldr	r2, [r2, #0]
    1818:	f015 0f40 	tst.w	r5, #64	; 0x40
    181c:	6019      	str	r1, [r3, #0]
    181e:	bf18      	it	ne
    1820:	b212      	sxthne	r2, r2
    1822:	e7cd      	b.n	17c0 <_printf_i+0x54>
    1824:	f8d4 c000 	ldr.w	ip, [r4]
    1828:	681a      	ldr	r2, [r3, #0]
    182a:	f01c 0f80 	tst.w	ip, #128	; 0x80
    182e:	f102 0504 	add.w	r5, r2, #4
    1832:	601d      	str	r5, [r3, #0]
    1834:	d001      	beq.n	183a <_printf_i+0xce>
    1836:	6812      	ldr	r2, [r2, #0]
    1838:	e003      	b.n	1842 <_printf_i+0xd6>
    183a:	f01c 0f40 	tst.w	ip, #64	; 0x40
    183e:	d0fa      	beq.n	1836 <_printf_i+0xca>
    1840:	8812      	ldrh	r2, [r2, #0]
    1842:	296f      	cmp	r1, #111	; 0x6f
    1844:	bf0c      	ite	eq
    1846:	2308      	moveq	r3, #8
    1848:	230a      	movne	r3, #10
    184a:	f8df c144 	ldr.w	ip, [pc, #324]	; 1990 <_printf_i+0x224>
    184e:	2100      	movs	r1, #0
    1850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1854:	6865      	ldr	r5, [r4, #4]
    1856:	2d00      	cmp	r5, #0
    1858:	bfa8      	it	ge
    185a:	6821      	ldrge	r1, [r4, #0]
    185c:	60a5      	str	r5, [r4, #8]
    185e:	bfa4      	itt	ge
    1860:	f021 0104 	bicge.w	r1, r1, #4
    1864:	6021      	strge	r1, [r4, #0]
    1866:	b90a      	cbnz	r2, 186c <_printf_i+0x100>
    1868:	2d00      	cmp	r5, #0
    186a:	d046      	beq.n	18fa <_printf_i+0x18e>
    186c:	4605      	mov	r5, r0
    186e:	fbb2 f1f3 	udiv	r1, r2, r3
    1872:	fb03 2e11 	mls	lr, r3, r1, r2
    1876:	f81c e00e 	ldrb.w	lr, [ip, lr]
    187a:	4293      	cmp	r3, r2
    187c:	f805 ed01 	strb.w	lr, [r5, #-1]!
    1880:	d939      	bls.n	18f6 <_printf_i+0x18a>
    1882:	2b08      	cmp	r3, #8
    1884:	d10b      	bne.n	189e <_printf_i+0x132>
    1886:	6823      	ldr	r3, [r4, #0]
    1888:	07da      	lsls	r2, r3, #31
    188a:	d508      	bpl.n	189e <_printf_i+0x132>
    188c:	6923      	ldr	r3, [r4, #16]
    188e:	6862      	ldr	r2, [r4, #4]
    1890:	429a      	cmp	r2, r3
    1892:	bfde      	ittt	le
    1894:	2330      	movle	r3, #48	; 0x30
    1896:	f805 3c01 	strble.w	r3, [r5, #-1]
    189a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    189e:	1b40      	subs	r0, r0, r5
    18a0:	6120      	str	r0, [r4, #16]
    18a2:	f8cd 8000 	str.w	r8, [sp]
    18a6:	463b      	mov	r3, r7
    18a8:	aa03      	add	r2, sp, #12
    18aa:	4621      	mov	r1, r4
    18ac:	4630      	mov	r0, r6
    18ae:	f7ff fee7 	bl	1680 <_printf_common>
    18b2:	3001      	adds	r0, #1
    18b4:	d149      	bne.n	194a <_printf_i+0x1de>
    18b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18ba:	b005      	add	sp, #20
    18bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18c0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1990 <_printf_i+0x224>
    18c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    18c8:	681d      	ldr	r5, [r3, #0]
    18ca:	6821      	ldr	r1, [r4, #0]
    18cc:	f855 2b04 	ldr.w	r2, [r5], #4
    18d0:	601d      	str	r5, [r3, #0]
    18d2:	060d      	lsls	r5, r1, #24
    18d4:	d50b      	bpl.n	18ee <_printf_i+0x182>
    18d6:	07cd      	lsls	r5, r1, #31
    18d8:	bf44      	itt	mi
    18da:	f041 0120 	orrmi.w	r1, r1, #32
    18de:	6021      	strmi	r1, [r4, #0]
    18e0:	b91a      	cbnz	r2, 18ea <_printf_i+0x17e>
    18e2:	6823      	ldr	r3, [r4, #0]
    18e4:	f023 0320 	bic.w	r3, r3, #32
    18e8:	6023      	str	r3, [r4, #0]
    18ea:	2310      	movs	r3, #16
    18ec:	e7af      	b.n	184e <_printf_i+0xe2>
    18ee:	064b      	lsls	r3, r1, #25
    18f0:	bf48      	it	mi
    18f2:	b292      	uxthmi	r2, r2
    18f4:	e7ef      	b.n	18d6 <_printf_i+0x16a>
    18f6:	460a      	mov	r2, r1
    18f8:	e7b9      	b.n	186e <_printf_i+0x102>
    18fa:	4605      	mov	r5, r0
    18fc:	e7c1      	b.n	1882 <_printf_i+0x116>
    18fe:	681a      	ldr	r2, [r3, #0]
    1900:	f8d4 c000 	ldr.w	ip, [r4]
    1904:	1d15      	adds	r5, r2, #4
    1906:	6961      	ldr	r1, [r4, #20]
    1908:	f01c 0f80 	tst.w	ip, #128	; 0x80
    190c:	601d      	str	r5, [r3, #0]
    190e:	6813      	ldr	r3, [r2, #0]
    1910:	d001      	beq.n	1916 <_printf_i+0x1aa>
    1912:	6019      	str	r1, [r3, #0]
    1914:	e003      	b.n	191e <_printf_i+0x1b2>
    1916:	f01c 0f40 	tst.w	ip, #64	; 0x40
    191a:	d0fa      	beq.n	1912 <_printf_i+0x1a6>
    191c:	8019      	strh	r1, [r3, #0]
    191e:	2300      	movs	r3, #0
    1920:	4605      	mov	r5, r0
    1922:	6123      	str	r3, [r4, #16]
    1924:	e7bd      	b.n	18a2 <_printf_i+0x136>
    1926:	681a      	ldr	r2, [r3, #0]
    1928:	1d11      	adds	r1, r2, #4
    192a:	6019      	str	r1, [r3, #0]
    192c:	6815      	ldr	r5, [r2, #0]
    192e:	2100      	movs	r1, #0
    1930:	6862      	ldr	r2, [r4, #4]
    1932:	4628      	mov	r0, r5
    1934:	f000 f830 	bl	1998 <memchr>
    1938:	b108      	cbz	r0, 193e <_printf_i+0x1d2>
    193a:	1b40      	subs	r0, r0, r5
    193c:	6060      	str	r0, [r4, #4]
    193e:	6863      	ldr	r3, [r4, #4]
    1940:	6123      	str	r3, [r4, #16]
    1942:	2300      	movs	r3, #0
    1944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    1948:	e7ab      	b.n	18a2 <_printf_i+0x136>
    194a:	6923      	ldr	r3, [r4, #16]
    194c:	462a      	mov	r2, r5
    194e:	4639      	mov	r1, r7
    1950:	4630      	mov	r0, r6
    1952:	47c0      	blx	r8
    1954:	3001      	adds	r0, #1
    1956:	d0ae      	beq.n	18b6 <_printf_i+0x14a>
    1958:	6823      	ldr	r3, [r4, #0]
    195a:	079b      	lsls	r3, r3, #30
    195c:	d413      	bmi.n	1986 <_printf_i+0x21a>
    195e:	68e0      	ldr	r0, [r4, #12]
    1960:	9b03      	ldr	r3, [sp, #12]
    1962:	4298      	cmp	r0, r3
    1964:	bfb8      	it	lt
    1966:	4618      	movlt	r0, r3
    1968:	e7a7      	b.n	18ba <_printf_i+0x14e>
    196a:	2301      	movs	r3, #1
    196c:	464a      	mov	r2, r9
    196e:	4639      	mov	r1, r7
    1970:	4630      	mov	r0, r6
    1972:	47c0      	blx	r8
    1974:	3001      	adds	r0, #1
    1976:	d09e      	beq.n	18b6 <_printf_i+0x14a>
    1978:	3501      	adds	r5, #1
    197a:	68e3      	ldr	r3, [r4, #12]
    197c:	9a03      	ldr	r2, [sp, #12]
    197e:	1a9b      	subs	r3, r3, r2
    1980:	42ab      	cmp	r3, r5
    1982:	dcf2      	bgt.n	196a <_printf_i+0x1fe>
    1984:	e7eb      	b.n	195e <_printf_i+0x1f2>
    1986:	2500      	movs	r5, #0
    1988:	f104 0919 	add.w	r9, r4, #25
    198c:	e7f5      	b.n	197a <_printf_i+0x20e>
    198e:	bf00      	nop
    1990:	00001c79 	.word	0x00001c79
    1994:	00001c8a 	.word	0x00001c8a

00001998 <memchr>:
    1998:	b510      	push	{r4, lr}
    199a:	b2c9      	uxtb	r1, r1
    199c:	4402      	add	r2, r0
    199e:	4290      	cmp	r0, r2
    19a0:	4603      	mov	r3, r0
    19a2:	d101      	bne.n	19a8 <memchr+0x10>
    19a4:	2300      	movs	r3, #0
    19a6:	e003      	b.n	19b0 <memchr+0x18>
    19a8:	781c      	ldrb	r4, [r3, #0]
    19aa:	3001      	adds	r0, #1
    19ac:	428c      	cmp	r4, r1
    19ae:	d1f6      	bne.n	199e <memchr+0x6>
    19b0:	4618      	mov	r0, r3
    19b2:	bd10      	pop	{r4, pc}

000019b4 <memmove>:
    19b4:	4288      	cmp	r0, r1
    19b6:	b510      	push	{r4, lr}
    19b8:	eb01 0302 	add.w	r3, r1, r2
    19bc:	d902      	bls.n	19c4 <memmove+0x10>
    19be:	4283      	cmp	r3, r0
    19c0:	461c      	mov	r4, r3
    19c2:	d807      	bhi.n	19d4 <memmove+0x20>
    19c4:	1e42      	subs	r2, r0, #1
    19c6:	4299      	cmp	r1, r3
    19c8:	d008      	beq.n	19dc <memmove+0x28>
    19ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    19ce:	f802 4f01 	strb.w	r4, [r2, #1]!
    19d2:	e7f8      	b.n	19c6 <memmove+0x12>
    19d4:	1883      	adds	r3, r0, r2
    19d6:	1a9a      	subs	r2, r3, r2
    19d8:	429a      	cmp	r2, r3
    19da:	d100      	bne.n	19de <memmove+0x2a>
    19dc:	bd10      	pop	{r4, pc}
    19de:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    19e2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    19e6:	e7f7      	b.n	19d8 <memmove+0x24>

000019e8 <_free_r>:
    19e8:	b538      	push	{r3, r4, r5, lr}
    19ea:	4605      	mov	r5, r0
    19ec:	2900      	cmp	r1, #0
    19ee:	d043      	beq.n	1a78 <_free_r+0x90>
    19f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    19f4:	1f0c      	subs	r4, r1, #4
    19f6:	2b00      	cmp	r3, #0
    19f8:	bfb8      	it	lt
    19fa:	18e4      	addlt	r4, r4, r3
    19fc:	f000 f8d0 	bl	1ba0 <__malloc_lock>
    1a00:	4a1e      	ldr	r2, [pc, #120]	; (1a7c <_free_r+0x94>)
    1a02:	6813      	ldr	r3, [r2, #0]
    1a04:	4610      	mov	r0, r2
    1a06:	b933      	cbnz	r3, 1a16 <_free_r+0x2e>
    1a08:	6063      	str	r3, [r4, #4]
    1a0a:	6014      	str	r4, [r2, #0]
    1a0c:	4628      	mov	r0, r5
    1a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a12:	f000 b8cb 	b.w	1bac <__malloc_unlock>
    1a16:	42a3      	cmp	r3, r4
    1a18:	d90b      	bls.n	1a32 <_free_r+0x4a>
    1a1a:	6821      	ldr	r1, [r4, #0]
    1a1c:	1862      	adds	r2, r4, r1
    1a1e:	4293      	cmp	r3, r2
    1a20:	bf01      	itttt	eq
    1a22:	681a      	ldreq	r2, [r3, #0]
    1a24:	685b      	ldreq	r3, [r3, #4]
    1a26:	1852      	addeq	r2, r2, r1
    1a28:	6022      	streq	r2, [r4, #0]
    1a2a:	6063      	str	r3, [r4, #4]
    1a2c:	6004      	str	r4, [r0, #0]
    1a2e:	e7ed      	b.n	1a0c <_free_r+0x24>
    1a30:	4613      	mov	r3, r2
    1a32:	685a      	ldr	r2, [r3, #4]
    1a34:	b10a      	cbz	r2, 1a3a <_free_r+0x52>
    1a36:	42a2      	cmp	r2, r4
    1a38:	d9fa      	bls.n	1a30 <_free_r+0x48>
    1a3a:	6819      	ldr	r1, [r3, #0]
    1a3c:	1858      	adds	r0, r3, r1
    1a3e:	42a0      	cmp	r0, r4
    1a40:	d10b      	bne.n	1a5a <_free_r+0x72>
    1a42:	6820      	ldr	r0, [r4, #0]
    1a44:	4401      	add	r1, r0
    1a46:	1858      	adds	r0, r3, r1
    1a48:	4282      	cmp	r2, r0
    1a4a:	6019      	str	r1, [r3, #0]
    1a4c:	d1de      	bne.n	1a0c <_free_r+0x24>
    1a4e:	6810      	ldr	r0, [r2, #0]
    1a50:	6852      	ldr	r2, [r2, #4]
    1a52:	4401      	add	r1, r0
    1a54:	6019      	str	r1, [r3, #0]
    1a56:	605a      	str	r2, [r3, #4]
    1a58:	e7d8      	b.n	1a0c <_free_r+0x24>
    1a5a:	d902      	bls.n	1a62 <_free_r+0x7a>
    1a5c:	230c      	movs	r3, #12
    1a5e:	602b      	str	r3, [r5, #0]
    1a60:	e7d4      	b.n	1a0c <_free_r+0x24>
    1a62:	6820      	ldr	r0, [r4, #0]
    1a64:	1821      	adds	r1, r4, r0
    1a66:	428a      	cmp	r2, r1
    1a68:	bf01      	itttt	eq
    1a6a:	6811      	ldreq	r1, [r2, #0]
    1a6c:	6852      	ldreq	r2, [r2, #4]
    1a6e:	1809      	addeq	r1, r1, r0
    1a70:	6021      	streq	r1, [r4, #0]
    1a72:	6062      	str	r2, [r4, #4]
    1a74:	605c      	str	r4, [r3, #4]
    1a76:	e7c9      	b.n	1a0c <_free_r+0x24>
    1a78:	bd38      	pop	{r3, r4, r5, pc}
    1a7a:	bf00      	nop
    1a7c:	2000827c 	.word	0x2000827c

00001a80 <_malloc_r>:
    1a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a82:	1ccd      	adds	r5, r1, #3
    1a84:	f025 0503 	bic.w	r5, r5, #3
    1a88:	3508      	adds	r5, #8
    1a8a:	2d0c      	cmp	r5, #12
    1a8c:	bf38      	it	cc
    1a8e:	250c      	movcc	r5, #12
    1a90:	2d00      	cmp	r5, #0
    1a92:	4606      	mov	r6, r0
    1a94:	db01      	blt.n	1a9a <_malloc_r+0x1a>
    1a96:	42a9      	cmp	r1, r5
    1a98:	d903      	bls.n	1aa2 <_malloc_r+0x22>
    1a9a:	230c      	movs	r3, #12
    1a9c:	6033      	str	r3, [r6, #0]
    1a9e:	2000      	movs	r0, #0
    1aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aa2:	f000 f87d 	bl	1ba0 <__malloc_lock>
    1aa6:	4921      	ldr	r1, [pc, #132]	; (1b2c <_malloc_r+0xac>)
    1aa8:	680a      	ldr	r2, [r1, #0]
    1aaa:	4614      	mov	r4, r2
    1aac:	b99c      	cbnz	r4, 1ad6 <_malloc_r+0x56>
    1aae:	4f20      	ldr	r7, [pc, #128]	; (1b30 <_malloc_r+0xb0>)
    1ab0:	683b      	ldr	r3, [r7, #0]
    1ab2:	b923      	cbnz	r3, 1abe <_malloc_r+0x3e>
    1ab4:	4621      	mov	r1, r4
    1ab6:	4630      	mov	r0, r6
    1ab8:	f000 f862 	bl	1b80 <_sbrk_r>
    1abc:	6038      	str	r0, [r7, #0]
    1abe:	4629      	mov	r1, r5
    1ac0:	4630      	mov	r0, r6
    1ac2:	f000 f85d 	bl	1b80 <_sbrk_r>
    1ac6:	1c43      	adds	r3, r0, #1
    1ac8:	d123      	bne.n	1b12 <_malloc_r+0x92>
    1aca:	230c      	movs	r3, #12
    1acc:	4630      	mov	r0, r6
    1ace:	6033      	str	r3, [r6, #0]
    1ad0:	f000 f86c 	bl	1bac <__malloc_unlock>
    1ad4:	e7e3      	b.n	1a9e <_malloc_r+0x1e>
    1ad6:	6823      	ldr	r3, [r4, #0]
    1ad8:	1b5b      	subs	r3, r3, r5
    1ada:	d417      	bmi.n	1b0c <_malloc_r+0x8c>
    1adc:	2b0b      	cmp	r3, #11
    1ade:	d903      	bls.n	1ae8 <_malloc_r+0x68>
    1ae0:	6023      	str	r3, [r4, #0]
    1ae2:	441c      	add	r4, r3
    1ae4:	6025      	str	r5, [r4, #0]
    1ae6:	e004      	b.n	1af2 <_malloc_r+0x72>
    1ae8:	6863      	ldr	r3, [r4, #4]
    1aea:	42a2      	cmp	r2, r4
    1aec:	bf0c      	ite	eq
    1aee:	600b      	streq	r3, [r1, #0]
    1af0:	6053      	strne	r3, [r2, #4]
    1af2:	4630      	mov	r0, r6
    1af4:	f000 f85a 	bl	1bac <__malloc_unlock>
    1af8:	f104 000b 	add.w	r0, r4, #11
    1afc:	1d23      	adds	r3, r4, #4
    1afe:	f020 0007 	bic.w	r0, r0, #7
    1b02:	1ac2      	subs	r2, r0, r3
    1b04:	d0cc      	beq.n	1aa0 <_malloc_r+0x20>
    1b06:	1a1b      	subs	r3, r3, r0
    1b08:	50a3      	str	r3, [r4, r2]
    1b0a:	e7c9      	b.n	1aa0 <_malloc_r+0x20>
    1b0c:	4622      	mov	r2, r4
    1b0e:	6864      	ldr	r4, [r4, #4]
    1b10:	e7cc      	b.n	1aac <_malloc_r+0x2c>
    1b12:	1cc4      	adds	r4, r0, #3
    1b14:	f024 0403 	bic.w	r4, r4, #3
    1b18:	42a0      	cmp	r0, r4
    1b1a:	d0e3      	beq.n	1ae4 <_malloc_r+0x64>
    1b1c:	1a21      	subs	r1, r4, r0
    1b1e:	4630      	mov	r0, r6
    1b20:	f000 f82e 	bl	1b80 <_sbrk_r>
    1b24:	3001      	adds	r0, #1
    1b26:	d1dd      	bne.n	1ae4 <_malloc_r+0x64>
    1b28:	e7cf      	b.n	1aca <_malloc_r+0x4a>
    1b2a:	bf00      	nop
    1b2c:	2000827c 	.word	0x2000827c
    1b30:	20008280 	.word	0x20008280

00001b34 <_realloc_r>:
    1b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b36:	4607      	mov	r7, r0
    1b38:	4614      	mov	r4, r2
    1b3a:	460e      	mov	r6, r1
    1b3c:	b921      	cbnz	r1, 1b48 <_realloc_r+0x14>
    1b3e:	4611      	mov	r1, r2
    1b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1b44:	f7ff bf9c 	b.w	1a80 <_malloc_r>
    1b48:	b922      	cbnz	r2, 1b54 <_realloc_r+0x20>
    1b4a:	f7ff ff4d 	bl	19e8 <_free_r>
    1b4e:	4625      	mov	r5, r4
    1b50:	4628      	mov	r0, r5
    1b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b54:	f000 f830 	bl	1bb8 <_malloc_usable_size_r>
    1b58:	42a0      	cmp	r0, r4
    1b5a:	d20f      	bcs.n	1b7c <_realloc_r+0x48>
    1b5c:	4621      	mov	r1, r4
    1b5e:	4638      	mov	r0, r7
    1b60:	f7ff ff8e 	bl	1a80 <_malloc_r>
    1b64:	4605      	mov	r5, r0
    1b66:	2800      	cmp	r0, #0
    1b68:	d0f2      	beq.n	1b50 <_realloc_r+0x1c>
    1b6a:	4631      	mov	r1, r6
    1b6c:	4622      	mov	r2, r4
    1b6e:	f7ff fbfd 	bl	136c <memcpy>
    1b72:	4631      	mov	r1, r6
    1b74:	4638      	mov	r0, r7
    1b76:	f7ff ff37 	bl	19e8 <_free_r>
    1b7a:	e7e9      	b.n	1b50 <_realloc_r+0x1c>
    1b7c:	4635      	mov	r5, r6
    1b7e:	e7e7      	b.n	1b50 <_realloc_r+0x1c>

00001b80 <_sbrk_r>:
    1b80:	b538      	push	{r3, r4, r5, lr}
    1b82:	2300      	movs	r3, #0
    1b84:	4c05      	ldr	r4, [pc, #20]	; (1b9c <_sbrk_r+0x1c>)
    1b86:	4605      	mov	r5, r0
    1b88:	4608      	mov	r0, r1
    1b8a:	6023      	str	r3, [r4, #0]
    1b8c:	f000 f81e 	bl	1bcc <_sbrk>
    1b90:	1c43      	adds	r3, r0, #1
    1b92:	d102      	bne.n	1b9a <_sbrk_r+0x1a>
    1b94:	6823      	ldr	r3, [r4, #0]
    1b96:	b103      	cbz	r3, 1b9a <_sbrk_r+0x1a>
    1b98:	602b      	str	r3, [r5, #0]
    1b9a:	bd38      	pop	{r3, r4, r5, pc}
    1b9c:	2000828c 	.word	0x2000828c

00001ba0 <__malloc_lock>:
    1ba0:	4801      	ldr	r0, [pc, #4]	; (1ba8 <__malloc_lock+0x8>)
    1ba2:	f000 b811 	b.w	1bc8 <__retarget_lock_acquire_recursive>
    1ba6:	bf00      	nop
    1ba8:	20008294 	.word	0x20008294

00001bac <__malloc_unlock>:
    1bac:	4801      	ldr	r0, [pc, #4]	; (1bb4 <__malloc_unlock+0x8>)
    1bae:	f000 b80c 	b.w	1bca <__retarget_lock_release_recursive>
    1bb2:	bf00      	nop
    1bb4:	20008294 	.word	0x20008294

00001bb8 <_malloc_usable_size_r>:
    1bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1bbc:	1f18      	subs	r0, r3, #4
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	bfbc      	itt	lt
    1bc2:	580b      	ldrlt	r3, [r1, r0]
    1bc4:	18c0      	addlt	r0, r0, r3
    1bc6:	4770      	bx	lr

00001bc8 <__retarget_lock_acquire_recursive>:
    1bc8:	4770      	bx	lr

00001bca <__retarget_lock_release_recursive>:
    1bca:	4770      	bx	lr

00001bcc <_sbrk>:
    1bcc:	4a04      	ldr	r2, [pc, #16]	; (1be0 <_sbrk+0x14>)
    1bce:	4905      	ldr	r1, [pc, #20]	; (1be4 <_sbrk+0x18>)
    1bd0:	6813      	ldr	r3, [r2, #0]
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	bf08      	it	eq
    1bd6:	460b      	moveq	r3, r1
    1bd8:	4418      	add	r0, r3
    1bda:	6010      	str	r0, [r2, #0]
    1bdc:	4618      	mov	r0, r3
    1bde:	4770      	bx	lr
    1be0:	20008284 	.word	0x20008284
    1be4:	200082a0 	.word	0x200082a0

00001be8 <_exit>:
    1be8:	e7fe      	b.n	1be8 <_exit>
    1bea:	bf00      	nop

00001bec <_init>:
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bee:	bf00      	nop

00001bf0 <_fini>:
    1bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bf2:	bf00      	nop
    1bf4:	70746553 	.word	0x70746553
    1bf8:	20642520 	.word	0x20642520
    1bfc:	646e6553 	.word	0x646e6553
    1c00:	000a0d20 	.word	0x000a0d20
    1c04:	70746553 	.word	0x70746553
    1c08:	20642520 	.word	0x20642520
    1c0c:	65636552 	.word	0x65636552
    1c10:	0d657669 	.word	0x0d657669
    1c14:	0000000a 	.word	0x0000000a
    1c18:	70746553 	.word	0x70746553
    1c1c:	20642520 	.word	0x20642520
    1c20:	65636552 	.word	0x65636552
    1c24:	20657669 	.word	0x20657669
    1c28:	5d58255b 	.word	0x5d58255b
    1c2c:	00000a0d 	.word	0x00000a0d
    1c30:	20554353 	.word	0x20554353
    1c34:	444d4352 	.word	0x444d4352
    1c38:	5d58255b 	.word	0x5d58255b
    1c3c:	00000a20 	.word	0x00000a20
    1c40:	20554353 	.word	0x20554353
    1c44:	5b3a6463 	.word	0x5b3a6463
    1c48:	2c5d5825 	.word	0x2c5d5825
    1c4c:	255b6176 	.word	0x255b6176
    1c50:	000a5d58 	.word	0x000a5d58
    1c54:	6c6c6548 	.word	0x6c6c6548
    1c58:	6f57206f 	.word	0x6f57206f
    1c5c:	20216472 	.word	0x20216472
    1c60:	00000a0d 	.word	0x00000a0d

00001c64 <_global_impure_ptr>:
    1c64:	2000800c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    1c74:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    1c84:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    1c94:	64636261                                 abcdef.
